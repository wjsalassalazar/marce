
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model Example
 * 
 */
export type Example = $Result.DefaultSelection<Prisma.$ExamplePayload>
/**
 * Model Account
 * 
 */
export type Account = $Result.DefaultSelection<Prisma.$AccountPayload>
/**
 * Model Session
 * 
 */
export type Session = $Result.DefaultSelection<Prisma.$SessionPayload>
/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model VerificationToken
 * 
 */
export type VerificationToken = $Result.DefaultSelection<Prisma.$VerificationTokenPayload>
/**
 * Model Post
 * 
 */
export type Post = $Result.DefaultSelection<Prisma.$PostPayload>
/**
 * Model Mention
 * 
 */
export type Mention = $Result.DefaultSelection<Prisma.$MentionPayload>
/**
 * Model Notification
 * 
 */
export type Notification = $Result.DefaultSelection<Prisma.$NotificationPayload>
/**
 * Model NotificationMention
 * 
 */
export type NotificationMention = $Result.DefaultSelection<Prisma.$NotificationMentionPayload>
/**
 * Model NotificationStartFollow
 * 
 */
export type NotificationStartFollow = $Result.DefaultSelection<Prisma.$NotificationStartFollowPayload>
/**
 * Model NotificationCommunityNewMember
 * 
 */
export type NotificationCommunityNewMember = $Result.DefaultSelection<Prisma.$NotificationCommunityNewMemberPayload>
/**
 * Model NotificationPostComment
 * 
 */
export type NotificationPostComment = $Result.DefaultSelection<Prisma.$NotificationPostCommentPayload>
/**
 * Model NotificationCommentReply
 * 
 */
export type NotificationCommentReply = $Result.DefaultSelection<Prisma.$NotificationCommentReplyPayload>
/**
 * Model UserShare
 * 
 */
export type UserShare = $Result.DefaultSelection<Prisma.$UserSharePayload>
/**
 * Model Image
 * 
 */
export type Image = $Result.DefaultSelection<Prisma.$ImagePayload>
/**
 * Model Comment
 * 
 */
export type Comment = $Result.DefaultSelection<Prisma.$CommentPayload>
/**
 * Model PostLike
 * 
 */
export type PostLike = $Result.DefaultSelection<Prisma.$PostLikePayload>
/**
 * Model CommentLike
 * 
 */
export type CommentLike = $Result.DefaultSelection<Prisma.$CommentLikePayload>
/**
 * Model Bookmark
 * 
 */
export type Bookmark = $Result.DefaultSelection<Prisma.$BookmarkPayload>
/**
 * Model Tag
 * 
 */
export type Tag = $Result.DefaultSelection<Prisma.$TagPayload>
/**
 * Model PostTag
 * 
 */
export type PostTag = $Result.DefaultSelection<Prisma.$PostTagPayload>
/**
 * Model Community
 * 
 */
export type Community = $Result.DefaultSelection<Prisma.$CommunityPayload>
/**
 * Model FavouriteCommunity
 * 
 */
export type FavouriteCommunity = $Result.DefaultSelection<Prisma.$FavouriteCommunityPayload>
/**
 * Model Category
 * 
 */
export type Category = $Result.DefaultSelection<Prisma.$CategoryPayload>
/**
 * Model UserCommunity
 * 
 */
export type UserCommunity = $Result.DefaultSelection<Prisma.$UserCommunityPayload>

/**
 * Enums
 */
export namespace $Enums {
  export const Role: {
  USER: 'USER',
  ADMIN: 'ADMIN'
};

export type Role = (typeof Role)[keyof typeof Role]

}

export type Role = $Enums.Role

export const Role: typeof $Enums.Role

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Examples
 * const examples = await prisma.example.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Examples
   * const examples = await prisma.example.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.example`: Exposes CRUD operations for the **Example** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Examples
    * const examples = await prisma.example.findMany()
    * ```
    */
  get example(): Prisma.ExampleDelegate<ExtArgs>;

  /**
   * `prisma.account`: Exposes CRUD operations for the **Account** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Accounts
    * const accounts = await prisma.account.findMany()
    * ```
    */
  get account(): Prisma.AccountDelegate<ExtArgs>;

  /**
   * `prisma.session`: Exposes CRUD operations for the **Session** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Sessions
    * const sessions = await prisma.session.findMany()
    * ```
    */
  get session(): Prisma.SessionDelegate<ExtArgs>;

  /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.verificationToken`: Exposes CRUD operations for the **VerificationToken** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more VerificationTokens
    * const verificationTokens = await prisma.verificationToken.findMany()
    * ```
    */
  get verificationToken(): Prisma.VerificationTokenDelegate<ExtArgs>;

  /**
   * `prisma.post`: Exposes CRUD operations for the **Post** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Posts
    * const posts = await prisma.post.findMany()
    * ```
    */
  get post(): Prisma.PostDelegate<ExtArgs>;

  /**
   * `prisma.mention`: Exposes CRUD operations for the **Mention** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Mentions
    * const mentions = await prisma.mention.findMany()
    * ```
    */
  get mention(): Prisma.MentionDelegate<ExtArgs>;

  /**
   * `prisma.notification`: Exposes CRUD operations for the **Notification** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Notifications
    * const notifications = await prisma.notification.findMany()
    * ```
    */
  get notification(): Prisma.NotificationDelegate<ExtArgs>;

  /**
   * `prisma.notificationMention`: Exposes CRUD operations for the **NotificationMention** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationMentions
    * const notificationMentions = await prisma.notificationMention.findMany()
    * ```
    */
  get notificationMention(): Prisma.NotificationMentionDelegate<ExtArgs>;

  /**
   * `prisma.notificationStartFollow`: Exposes CRUD operations for the **NotificationStartFollow** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationStartFollows
    * const notificationStartFollows = await prisma.notificationStartFollow.findMany()
    * ```
    */
  get notificationStartFollow(): Prisma.NotificationStartFollowDelegate<ExtArgs>;

  /**
   * `prisma.notificationCommunityNewMember`: Exposes CRUD operations for the **NotificationCommunityNewMember** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationCommunityNewMembers
    * const notificationCommunityNewMembers = await prisma.notificationCommunityNewMember.findMany()
    * ```
    */
  get notificationCommunityNewMember(): Prisma.NotificationCommunityNewMemberDelegate<ExtArgs>;

  /**
   * `prisma.notificationPostComment`: Exposes CRUD operations for the **NotificationPostComment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationPostComments
    * const notificationPostComments = await prisma.notificationPostComment.findMany()
    * ```
    */
  get notificationPostComment(): Prisma.NotificationPostCommentDelegate<ExtArgs>;

  /**
   * `prisma.notificationCommentReply`: Exposes CRUD operations for the **NotificationCommentReply** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more NotificationCommentReplies
    * const notificationCommentReplies = await prisma.notificationCommentReply.findMany()
    * ```
    */
  get notificationCommentReply(): Prisma.NotificationCommentReplyDelegate<ExtArgs>;

  /**
   * `prisma.userShare`: Exposes CRUD operations for the **UserShare** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserShares
    * const userShares = await prisma.userShare.findMany()
    * ```
    */
  get userShare(): Prisma.UserShareDelegate<ExtArgs>;

  /**
   * `prisma.image`: Exposes CRUD operations for the **Image** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Images
    * const images = await prisma.image.findMany()
    * ```
    */
  get image(): Prisma.ImageDelegate<ExtArgs>;

  /**
   * `prisma.comment`: Exposes CRUD operations for the **Comment** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Comments
    * const comments = await prisma.comment.findMany()
    * ```
    */
  get comment(): Prisma.CommentDelegate<ExtArgs>;

  /**
   * `prisma.postLike`: Exposes CRUD operations for the **PostLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostLikes
    * const postLikes = await prisma.postLike.findMany()
    * ```
    */
  get postLike(): Prisma.PostLikeDelegate<ExtArgs>;

  /**
   * `prisma.commentLike`: Exposes CRUD operations for the **CommentLike** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more CommentLikes
    * const commentLikes = await prisma.commentLike.findMany()
    * ```
    */
  get commentLike(): Prisma.CommentLikeDelegate<ExtArgs>;

  /**
   * `prisma.bookmark`: Exposes CRUD operations for the **Bookmark** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Bookmarks
    * const bookmarks = await prisma.bookmark.findMany()
    * ```
    */
  get bookmark(): Prisma.BookmarkDelegate<ExtArgs>;

  /**
   * `prisma.tag`: Exposes CRUD operations for the **Tag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Tags
    * const tags = await prisma.tag.findMany()
    * ```
    */
  get tag(): Prisma.TagDelegate<ExtArgs>;

  /**
   * `prisma.postTag`: Exposes CRUD operations for the **PostTag** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more PostTags
    * const postTags = await prisma.postTag.findMany()
    * ```
    */
  get postTag(): Prisma.PostTagDelegate<ExtArgs>;

  /**
   * `prisma.community`: Exposes CRUD operations for the **Community** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Communities
    * const communities = await prisma.community.findMany()
    * ```
    */
  get community(): Prisma.CommunityDelegate<ExtArgs>;

  /**
   * `prisma.favouriteCommunity`: Exposes CRUD operations for the **FavouriteCommunity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more FavouriteCommunities
    * const favouriteCommunities = await prisma.favouriteCommunity.findMany()
    * ```
    */
  get favouriteCommunity(): Prisma.FavouriteCommunityDelegate<ExtArgs>;

  /**
   * `prisma.category`: Exposes CRUD operations for the **Category** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Categories
    * const categories = await prisma.category.findMany()
    * ```
    */
  get category(): Prisma.CategoryDelegate<ExtArgs>;

  /**
   * `prisma.userCommunity`: Exposes CRUD operations for the **UserCommunity** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more UserCommunities
    * const userCommunities = await prisma.userCommunity.findMany()
    * ```
    */
  get userCommunity(): Prisma.UserCommunityDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.13.0
   * Query Engine version: b9a39a7ee606c28e3455d0fd60e78c3ba82b1a2b
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  type SelectAndOmit = {
    select: any
    omit: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : T extends SelectAndOmit
        ? 'Please either choose `select` or `omit`.'
        : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    Example: 'Example',
    Account: 'Account',
    Session: 'Session',
    User: 'User',
    VerificationToken: 'VerificationToken',
    Post: 'Post',
    Mention: 'Mention',
    Notification: 'Notification',
    NotificationMention: 'NotificationMention',
    NotificationStartFollow: 'NotificationStartFollow',
    NotificationCommunityNewMember: 'NotificationCommunityNewMember',
    NotificationPostComment: 'NotificationPostComment',
    NotificationCommentReply: 'NotificationCommentReply',
    UserShare: 'UserShare',
    Image: 'Image',
    Comment: 'Comment',
    PostLike: 'PostLike',
    CommentLike: 'CommentLike',
    Bookmark: 'Bookmark',
    Tag: 'Tag',
    PostTag: 'PostTag',
    Community: 'Community',
    FavouriteCommunity: 'FavouriteCommunity',
    Category: 'Category',
    UserCommunity: 'UserCommunity'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'example' | 'account' | 'session' | 'user' | 'verificationToken' | 'post' | 'mention' | 'notification' | 'notificationMention' | 'notificationStartFollow' | 'notificationCommunityNewMember' | 'notificationPostComment' | 'notificationCommentReply' | 'userShare' | 'image' | 'comment' | 'postLike' | 'commentLike' | 'bookmark' | 'tag' | 'postTag' | 'community' | 'favouriteCommunity' | 'category' | 'userCommunity'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      Example: {
        payload: Prisma.$ExamplePayload<ExtArgs>
        fields: Prisma.ExampleFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ExampleFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamplePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ExampleFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamplePayload>
          }
          findFirst: {
            args: Prisma.ExampleFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamplePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ExampleFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamplePayload>
          }
          findMany: {
            args: Prisma.ExampleFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamplePayload>[]
          }
          create: {
            args: Prisma.ExampleCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamplePayload>
          }
          createMany: {
            args: Prisma.ExampleCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ExampleDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamplePayload>
          }
          update: {
            args: Prisma.ExampleUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamplePayload>
          }
          deleteMany: {
            args: Prisma.ExampleDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ExampleUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ExampleUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ExamplePayload>
          }
          aggregate: {
            args: Prisma.ExampleAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateExample>
          }
          groupBy: {
            args: Prisma.ExampleGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ExampleGroupByOutputType>[]
          }
          count: {
            args: Prisma.ExampleCountArgs<ExtArgs>,
            result: $Utils.Optional<ExampleCountAggregateOutputType> | number
          }
        }
      }
      Account: {
        payload: Prisma.$AccountPayload<ExtArgs>
        fields: Prisma.AccountFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AccountFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AccountFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findFirst: {
            args: Prisma.AccountFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AccountFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          findMany: {
            args: Prisma.AccountFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>[]
          }
          create: {
            args: Prisma.AccountCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          createMany: {
            args: Prisma.AccountCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AccountDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          update: {
            args: Prisma.AccountUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          deleteMany: {
            args: Prisma.AccountDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AccountUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AccountUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AccountPayload>
          }
          aggregate: {
            args: Prisma.AccountAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAccount>
          }
          groupBy: {
            args: Prisma.AccountGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AccountGroupByOutputType>[]
          }
          count: {
            args: Prisma.AccountCountArgs<ExtArgs>,
            result: $Utils.Optional<AccountCountAggregateOutputType> | number
          }
        }
      }
      Session: {
        payload: Prisma.$SessionPayload<ExtArgs>
        fields: Prisma.SessionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SessionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SessionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findFirst: {
            args: Prisma.SessionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SessionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          findMany: {
            args: Prisma.SessionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>[]
          }
          create: {
            args: Prisma.SessionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          createMany: {
            args: Prisma.SessionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SessionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          update: {
            args: Prisma.SessionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          deleteMany: {
            args: Prisma.SessionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SessionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SessionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SessionPayload>
          }
          aggregate: {
            args: Prisma.SessionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSession>
          }
          groupBy: {
            args: Prisma.SessionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SessionGroupByOutputType>[]
          }
          count: {
            args: Prisma.SessionCountArgs<ExtArgs>,
            result: $Utils.Optional<SessionCountAggregateOutputType> | number
          }
        }
      }
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      VerificationToken: {
        payload: Prisma.$VerificationTokenPayload<ExtArgs>
        fields: Prisma.VerificationTokenFieldRefs
        operations: {
          findUnique: {
            args: Prisma.VerificationTokenFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.VerificationTokenFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findFirst: {
            args: Prisma.VerificationTokenFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.VerificationTokenFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          findMany: {
            args: Prisma.VerificationTokenFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>[]
          }
          create: {
            args: Prisma.VerificationTokenCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          createMany: {
            args: Prisma.VerificationTokenCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.VerificationTokenDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          update: {
            args: Prisma.VerificationTokenUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          deleteMany: {
            args: Prisma.VerificationTokenDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.VerificationTokenUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.VerificationTokenUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$VerificationTokenPayload>
          }
          aggregate: {
            args: Prisma.VerificationTokenAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateVerificationToken>
          }
          groupBy: {
            args: Prisma.VerificationTokenGroupByArgs<ExtArgs>,
            result: $Utils.Optional<VerificationTokenGroupByOutputType>[]
          }
          count: {
            args: Prisma.VerificationTokenCountArgs<ExtArgs>,
            result: $Utils.Optional<VerificationTokenCountAggregateOutputType> | number
          }
        }
      }
      Post: {
        payload: Prisma.$PostPayload<ExtArgs>
        fields: Prisma.PostFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findFirst: {
            args: Prisma.PostFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          findMany: {
            args: Prisma.PostFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostPayload>[]
          }
          create: {
            args: Prisma.PostCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          createMany: {
            args: Prisma.PostCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PostDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          update: {
            args: Prisma.PostUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          deleteMany: {
            args: Prisma.PostDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PostUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PostUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostPayload>
          }
          aggregate: {
            args: Prisma.PostAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePost>
          }
          groupBy: {
            args: Prisma.PostGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PostGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostCountArgs<ExtArgs>,
            result: $Utils.Optional<PostCountAggregateOutputType> | number
          }
        }
      }
      Mention: {
        payload: Prisma.$MentionPayload<ExtArgs>
        fields: Prisma.MentionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.MentionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MentionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.MentionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MentionPayload>
          }
          findFirst: {
            args: Prisma.MentionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MentionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.MentionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MentionPayload>
          }
          findMany: {
            args: Prisma.MentionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MentionPayload>[]
          }
          create: {
            args: Prisma.MentionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MentionPayload>
          }
          createMany: {
            args: Prisma.MentionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.MentionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MentionPayload>
          }
          update: {
            args: Prisma.MentionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MentionPayload>
          }
          deleteMany: {
            args: Prisma.MentionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.MentionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.MentionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$MentionPayload>
          }
          aggregate: {
            args: Prisma.MentionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateMention>
          }
          groupBy: {
            args: Prisma.MentionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<MentionGroupByOutputType>[]
          }
          count: {
            args: Prisma.MentionCountArgs<ExtArgs>,
            result: $Utils.Optional<MentionCountAggregateOutputType> | number
          }
        }
      }
      Notification: {
        payload: Prisma.$NotificationPayload<ExtArgs>
        fields: Prisma.NotificationFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findFirst: {
            args: Prisma.NotificationFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          findMany: {
            args: Prisma.NotificationFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>[]
          }
          create: {
            args: Prisma.NotificationCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          createMany: {
            args: Prisma.NotificationCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NotificationDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          update: {
            args: Prisma.NotificationUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          deleteMany: {
            args: Prisma.NotificationDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotificationUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPayload>
          }
          aggregate: {
            args: Prisma.NotificationAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotification>
          }
          groupBy: {
            args: Prisma.NotificationGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationCountAggregateOutputType> | number
          }
        }
      }
      NotificationMention: {
        payload: Prisma.$NotificationMentionPayload<ExtArgs>
        fields: Prisma.NotificationMentionFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationMentionFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationMentionPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationMentionFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationMentionPayload>
          }
          findFirst: {
            args: Prisma.NotificationMentionFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationMentionPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationMentionFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationMentionPayload>
          }
          findMany: {
            args: Prisma.NotificationMentionFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationMentionPayload>[]
          }
          create: {
            args: Prisma.NotificationMentionCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationMentionPayload>
          }
          createMany: {
            args: Prisma.NotificationMentionCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NotificationMentionDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationMentionPayload>
          }
          update: {
            args: Prisma.NotificationMentionUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationMentionPayload>
          }
          deleteMany: {
            args: Prisma.NotificationMentionDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationMentionUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotificationMentionUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationMentionPayload>
          }
          aggregate: {
            args: Prisma.NotificationMentionAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotificationMention>
          }
          groupBy: {
            args: Prisma.NotificationMentionGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationMentionGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationMentionCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationMentionCountAggregateOutputType> | number
          }
        }
      }
      NotificationStartFollow: {
        payload: Prisma.$NotificationStartFollowPayload<ExtArgs>
        fields: Prisma.NotificationStartFollowFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationStartFollowFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationStartFollowPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationStartFollowFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationStartFollowPayload>
          }
          findFirst: {
            args: Prisma.NotificationStartFollowFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationStartFollowPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationStartFollowFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationStartFollowPayload>
          }
          findMany: {
            args: Prisma.NotificationStartFollowFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationStartFollowPayload>[]
          }
          create: {
            args: Prisma.NotificationStartFollowCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationStartFollowPayload>
          }
          createMany: {
            args: Prisma.NotificationStartFollowCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NotificationStartFollowDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationStartFollowPayload>
          }
          update: {
            args: Prisma.NotificationStartFollowUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationStartFollowPayload>
          }
          deleteMany: {
            args: Prisma.NotificationStartFollowDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationStartFollowUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotificationStartFollowUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationStartFollowPayload>
          }
          aggregate: {
            args: Prisma.NotificationStartFollowAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotificationStartFollow>
          }
          groupBy: {
            args: Prisma.NotificationStartFollowGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationStartFollowGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationStartFollowCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationStartFollowCountAggregateOutputType> | number
          }
        }
      }
      NotificationCommunityNewMember: {
        payload: Prisma.$NotificationCommunityNewMemberPayload<ExtArgs>
        fields: Prisma.NotificationCommunityNewMemberFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationCommunityNewMemberFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationCommunityNewMemberPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationCommunityNewMemberFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationCommunityNewMemberPayload>
          }
          findFirst: {
            args: Prisma.NotificationCommunityNewMemberFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationCommunityNewMemberPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationCommunityNewMemberFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationCommunityNewMemberPayload>
          }
          findMany: {
            args: Prisma.NotificationCommunityNewMemberFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationCommunityNewMemberPayload>[]
          }
          create: {
            args: Prisma.NotificationCommunityNewMemberCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationCommunityNewMemberPayload>
          }
          createMany: {
            args: Prisma.NotificationCommunityNewMemberCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NotificationCommunityNewMemberDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationCommunityNewMemberPayload>
          }
          update: {
            args: Prisma.NotificationCommunityNewMemberUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationCommunityNewMemberPayload>
          }
          deleteMany: {
            args: Prisma.NotificationCommunityNewMemberDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationCommunityNewMemberUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotificationCommunityNewMemberUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationCommunityNewMemberPayload>
          }
          aggregate: {
            args: Prisma.NotificationCommunityNewMemberAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotificationCommunityNewMember>
          }
          groupBy: {
            args: Prisma.NotificationCommunityNewMemberGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationCommunityNewMemberGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCommunityNewMemberCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationCommunityNewMemberCountAggregateOutputType> | number
          }
        }
      }
      NotificationPostComment: {
        payload: Prisma.$NotificationPostCommentPayload<ExtArgs>
        fields: Prisma.NotificationPostCommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationPostCommentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPostCommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationPostCommentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPostCommentPayload>
          }
          findFirst: {
            args: Prisma.NotificationPostCommentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPostCommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationPostCommentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPostCommentPayload>
          }
          findMany: {
            args: Prisma.NotificationPostCommentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPostCommentPayload>[]
          }
          create: {
            args: Prisma.NotificationPostCommentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPostCommentPayload>
          }
          createMany: {
            args: Prisma.NotificationPostCommentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NotificationPostCommentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPostCommentPayload>
          }
          update: {
            args: Prisma.NotificationPostCommentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPostCommentPayload>
          }
          deleteMany: {
            args: Prisma.NotificationPostCommentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationPostCommentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotificationPostCommentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationPostCommentPayload>
          }
          aggregate: {
            args: Prisma.NotificationPostCommentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotificationPostComment>
          }
          groupBy: {
            args: Prisma.NotificationPostCommentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationPostCommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationPostCommentCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationPostCommentCountAggregateOutputType> | number
          }
        }
      }
      NotificationCommentReply: {
        payload: Prisma.$NotificationCommentReplyPayload<ExtArgs>
        fields: Prisma.NotificationCommentReplyFieldRefs
        operations: {
          findUnique: {
            args: Prisma.NotificationCommentReplyFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationCommentReplyPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.NotificationCommentReplyFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationCommentReplyPayload>
          }
          findFirst: {
            args: Prisma.NotificationCommentReplyFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationCommentReplyPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.NotificationCommentReplyFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationCommentReplyPayload>
          }
          findMany: {
            args: Prisma.NotificationCommentReplyFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationCommentReplyPayload>[]
          }
          create: {
            args: Prisma.NotificationCommentReplyCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationCommentReplyPayload>
          }
          createMany: {
            args: Prisma.NotificationCommentReplyCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.NotificationCommentReplyDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationCommentReplyPayload>
          }
          update: {
            args: Prisma.NotificationCommentReplyUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationCommentReplyPayload>
          }
          deleteMany: {
            args: Prisma.NotificationCommentReplyDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.NotificationCommentReplyUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.NotificationCommentReplyUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$NotificationCommentReplyPayload>
          }
          aggregate: {
            args: Prisma.NotificationCommentReplyAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateNotificationCommentReply>
          }
          groupBy: {
            args: Prisma.NotificationCommentReplyGroupByArgs<ExtArgs>,
            result: $Utils.Optional<NotificationCommentReplyGroupByOutputType>[]
          }
          count: {
            args: Prisma.NotificationCommentReplyCountArgs<ExtArgs>,
            result: $Utils.Optional<NotificationCommentReplyCountAggregateOutputType> | number
          }
        }
      }
      UserShare: {
        payload: Prisma.$UserSharePayload<ExtArgs>
        fields: Prisma.UserShareFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserShareFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSharePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserShareFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSharePayload>
          }
          findFirst: {
            args: Prisma.UserShareFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSharePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserShareFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSharePayload>
          }
          findMany: {
            args: Prisma.UserShareFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSharePayload>[]
          }
          create: {
            args: Prisma.UserShareCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSharePayload>
          }
          createMany: {
            args: Prisma.UserShareCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserShareDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSharePayload>
          }
          update: {
            args: Prisma.UserShareUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSharePayload>
          }
          deleteMany: {
            args: Prisma.UserShareDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserShareUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserShareUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserSharePayload>
          }
          aggregate: {
            args: Prisma.UserShareAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserShare>
          }
          groupBy: {
            args: Prisma.UserShareGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserShareGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserShareCountArgs<ExtArgs>,
            result: $Utils.Optional<UserShareCountAggregateOutputType> | number
          }
        }
      }
      Image: {
        payload: Prisma.$ImagePayload<ExtArgs>
        fields: Prisma.ImageFieldRefs
        operations: {
          findUnique: {
            args: Prisma.ImageFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.ImageFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findFirst: {
            args: Prisma.ImageFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.ImageFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          findMany: {
            args: Prisma.ImageFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>[]
          }
          create: {
            args: Prisma.ImageCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          createMany: {
            args: Prisma.ImageCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.ImageDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          update: {
            args: Prisma.ImageUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          deleteMany: {
            args: Prisma.ImageDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.ImageUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.ImageUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$ImagePayload>
          }
          aggregate: {
            args: Prisma.ImageAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateImage>
          }
          groupBy: {
            args: Prisma.ImageGroupByArgs<ExtArgs>,
            result: $Utils.Optional<ImageGroupByOutputType>[]
          }
          count: {
            args: Prisma.ImageCountArgs<ExtArgs>,
            result: $Utils.Optional<ImageCountAggregateOutputType> | number
          }
        }
      }
      Comment: {
        payload: Prisma.$CommentPayload<ExtArgs>
        fields: Prisma.CommentFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findFirst: {
            args: Prisma.CommentFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          findMany: {
            args: Prisma.CommentFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>[]
          }
          create: {
            args: Prisma.CommentCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          createMany: {
            args: Prisma.CommentCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CommentDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          update: {
            args: Prisma.CommentUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          deleteMany: {
            args: Prisma.CommentDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CommentUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CommentUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentPayload>
          }
          aggregate: {
            args: Prisma.CommentAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateComment>
          }
          groupBy: {
            args: Prisma.CommentGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommentGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentCountArgs<ExtArgs>,
            result: $Utils.Optional<CommentCountAggregateOutputType> | number
          }
        }
      }
      PostLike: {
        payload: Prisma.$PostLikePayload<ExtArgs>
        fields: Prisma.PostLikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostLikeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostLikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostLikeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostLikePayload>
          }
          findFirst: {
            args: Prisma.PostLikeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostLikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostLikeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostLikePayload>
          }
          findMany: {
            args: Prisma.PostLikeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostLikePayload>[]
          }
          create: {
            args: Prisma.PostLikeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostLikePayload>
          }
          createMany: {
            args: Prisma.PostLikeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PostLikeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostLikePayload>
          }
          update: {
            args: Prisma.PostLikeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostLikePayload>
          }
          deleteMany: {
            args: Prisma.PostLikeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PostLikeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PostLikeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostLikePayload>
          }
          aggregate: {
            args: Prisma.PostLikeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePostLike>
          }
          groupBy: {
            args: Prisma.PostLikeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PostLikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostLikeCountArgs<ExtArgs>,
            result: $Utils.Optional<PostLikeCountAggregateOutputType> | number
          }
        }
      }
      CommentLike: {
        payload: Prisma.$CommentLikePayload<ExtArgs>
        fields: Prisma.CommentLikeFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommentLikeFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentLikePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommentLikeFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentLikePayload>
          }
          findFirst: {
            args: Prisma.CommentLikeFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentLikePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommentLikeFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentLikePayload>
          }
          findMany: {
            args: Prisma.CommentLikeFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentLikePayload>[]
          }
          create: {
            args: Prisma.CommentLikeCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentLikePayload>
          }
          createMany: {
            args: Prisma.CommentLikeCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CommentLikeDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentLikePayload>
          }
          update: {
            args: Prisma.CommentLikeUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentLikePayload>
          }
          deleteMany: {
            args: Prisma.CommentLikeDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CommentLikeUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CommentLikeUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommentLikePayload>
          }
          aggregate: {
            args: Prisma.CommentLikeAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCommentLike>
          }
          groupBy: {
            args: Prisma.CommentLikeGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommentLikeGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommentLikeCountArgs<ExtArgs>,
            result: $Utils.Optional<CommentLikeCountAggregateOutputType> | number
          }
        }
      }
      Bookmark: {
        payload: Prisma.$BookmarkPayload<ExtArgs>
        fields: Prisma.BookmarkFieldRefs
        operations: {
          findUnique: {
            args: Prisma.BookmarkFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.BookmarkFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          findFirst: {
            args: Prisma.BookmarkFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.BookmarkFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          findMany: {
            args: Prisma.BookmarkFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>[]
          }
          create: {
            args: Prisma.BookmarkCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          createMany: {
            args: Prisma.BookmarkCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.BookmarkDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          update: {
            args: Prisma.BookmarkUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          deleteMany: {
            args: Prisma.BookmarkDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.BookmarkUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.BookmarkUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$BookmarkPayload>
          }
          aggregate: {
            args: Prisma.BookmarkAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateBookmark>
          }
          groupBy: {
            args: Prisma.BookmarkGroupByArgs<ExtArgs>,
            result: $Utils.Optional<BookmarkGroupByOutputType>[]
          }
          count: {
            args: Prisma.BookmarkCountArgs<ExtArgs>,
            result: $Utils.Optional<BookmarkCountAggregateOutputType> | number
          }
        }
      }
      Tag: {
        payload: Prisma.$TagPayload<ExtArgs>
        fields: Prisma.TagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TagFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TagFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findFirst: {
            args: Prisma.TagFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TagFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          findMany: {
            args: Prisma.TagFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>[]
          }
          create: {
            args: Prisma.TagCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          createMany: {
            args: Prisma.TagCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TagDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          update: {
            args: Prisma.TagUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          deleteMany: {
            args: Prisma.TagDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TagUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TagUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TagPayload>
          }
          aggregate: {
            args: Prisma.TagAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTag>
          }
          groupBy: {
            args: Prisma.TagGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TagGroupByOutputType>[]
          }
          count: {
            args: Prisma.TagCountArgs<ExtArgs>,
            result: $Utils.Optional<TagCountAggregateOutputType> | number
          }
        }
      }
      PostTag: {
        payload: Prisma.$PostTagPayload<ExtArgs>
        fields: Prisma.PostTagFieldRefs
        operations: {
          findUnique: {
            args: Prisma.PostTagFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostTagPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.PostTagFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostTagPayload>
          }
          findFirst: {
            args: Prisma.PostTagFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostTagPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.PostTagFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostTagPayload>
          }
          findMany: {
            args: Prisma.PostTagFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostTagPayload>[]
          }
          create: {
            args: Prisma.PostTagCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostTagPayload>
          }
          createMany: {
            args: Prisma.PostTagCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.PostTagDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostTagPayload>
          }
          update: {
            args: Prisma.PostTagUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostTagPayload>
          }
          deleteMany: {
            args: Prisma.PostTagDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.PostTagUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.PostTagUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$PostTagPayload>
          }
          aggregate: {
            args: Prisma.PostTagAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregatePostTag>
          }
          groupBy: {
            args: Prisma.PostTagGroupByArgs<ExtArgs>,
            result: $Utils.Optional<PostTagGroupByOutputType>[]
          }
          count: {
            args: Prisma.PostTagCountArgs<ExtArgs>,
            result: $Utils.Optional<PostTagCountAggregateOutputType> | number
          }
        }
      }
      Community: {
        payload: Prisma.$CommunityPayload<ExtArgs>
        fields: Prisma.CommunityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CommunityFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CommunityFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          findFirst: {
            args: Prisma.CommunityFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CommunityFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          findMany: {
            args: Prisma.CommunityFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>[]
          }
          create: {
            args: Prisma.CommunityCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          createMany: {
            args: Prisma.CommunityCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CommunityDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          update: {
            args: Prisma.CommunityUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          deleteMany: {
            args: Prisma.CommunityDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CommunityUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CommunityUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CommunityPayload>
          }
          aggregate: {
            args: Prisma.CommunityAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCommunity>
          }
          groupBy: {
            args: Prisma.CommunityGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CommunityGroupByOutputType>[]
          }
          count: {
            args: Prisma.CommunityCountArgs<ExtArgs>,
            result: $Utils.Optional<CommunityCountAggregateOutputType> | number
          }
        }
      }
      FavouriteCommunity: {
        payload: Prisma.$FavouriteCommunityPayload<ExtArgs>
        fields: Prisma.FavouriteCommunityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavouriteCommunityFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouriteCommunityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavouriteCommunityFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouriteCommunityPayload>
          }
          findFirst: {
            args: Prisma.FavouriteCommunityFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouriteCommunityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavouriteCommunityFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouriteCommunityPayload>
          }
          findMany: {
            args: Prisma.FavouriteCommunityFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouriteCommunityPayload>[]
          }
          create: {
            args: Prisma.FavouriteCommunityCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouriteCommunityPayload>
          }
          createMany: {
            args: Prisma.FavouriteCommunityCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FavouriteCommunityDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouriteCommunityPayload>
          }
          update: {
            args: Prisma.FavouriteCommunityUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouriteCommunityPayload>
          }
          deleteMany: {
            args: Prisma.FavouriteCommunityDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FavouriteCommunityUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FavouriteCommunityUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavouriteCommunityPayload>
          }
          aggregate: {
            args: Prisma.FavouriteCommunityAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFavouriteCommunity>
          }
          groupBy: {
            args: Prisma.FavouriteCommunityGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FavouriteCommunityGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavouriteCommunityCountArgs<ExtArgs>,
            result: $Utils.Optional<FavouriteCommunityCountAggregateOutputType> | number
          }
        }
      }
      Category: {
        payload: Prisma.$CategoryPayload<ExtArgs>
        fields: Prisma.CategoryFieldRefs
        operations: {
          findUnique: {
            args: Prisma.CategoryFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.CategoryFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findFirst: {
            args: Prisma.CategoryFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.CategoryFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          findMany: {
            args: Prisma.CategoryFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>[]
          }
          create: {
            args: Prisma.CategoryCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          createMany: {
            args: Prisma.CategoryCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.CategoryDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          update: {
            args: Prisma.CategoryUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          deleteMany: {
            args: Prisma.CategoryDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.CategoryUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.CategoryUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$CategoryPayload>
          }
          aggregate: {
            args: Prisma.CategoryAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateCategory>
          }
          groupBy: {
            args: Prisma.CategoryGroupByArgs<ExtArgs>,
            result: $Utils.Optional<CategoryGroupByOutputType>[]
          }
          count: {
            args: Prisma.CategoryCountArgs<ExtArgs>,
            result: $Utils.Optional<CategoryCountAggregateOutputType> | number
          }
        }
      }
      UserCommunity: {
        payload: Prisma.$UserCommunityPayload<ExtArgs>
        fields: Prisma.UserCommunityFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserCommunityFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserCommunityPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserCommunityFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserCommunityPayload>
          }
          findFirst: {
            args: Prisma.UserCommunityFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserCommunityPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserCommunityFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserCommunityPayload>
          }
          findMany: {
            args: Prisma.UserCommunityFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserCommunityPayload>[]
          }
          create: {
            args: Prisma.UserCommunityCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserCommunityPayload>
          }
          createMany: {
            args: Prisma.UserCommunityCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserCommunityDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserCommunityPayload>
          }
          update: {
            args: Prisma.UserCommunityUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserCommunityPayload>
          }
          deleteMany: {
            args: Prisma.UserCommunityDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserCommunityUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserCommunityUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserCommunityPayload>
          }
          aggregate: {
            args: Prisma.UserCommunityAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUserCommunity>
          }
          groupBy: {
            args: Prisma.UserCommunityGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserCommunityGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCommunityCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCommunityCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    accounts: number
    sessions: number
    followedBy: number
    following: number
    posts: number
    comments: number
    likedPosts: number
    likedComments: number
    bookmarks: number
    communities: number
    mentions: number
    favouriteCommunities: number
    sharedPost: number
    notifications: number
    notificationStartFollow: number
    notificationCommunityNewMember: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | UserCountOutputTypeCountAccountsArgs
    sessions?: boolean | UserCountOutputTypeCountSessionsArgs
    followedBy?: boolean | UserCountOutputTypeCountFollowedByArgs
    following?: boolean | UserCountOutputTypeCountFollowingArgs
    posts?: boolean | UserCountOutputTypeCountPostsArgs
    comments?: boolean | UserCountOutputTypeCountCommentsArgs
    likedPosts?: boolean | UserCountOutputTypeCountLikedPostsArgs
    likedComments?: boolean | UserCountOutputTypeCountLikedCommentsArgs
    bookmarks?: boolean | UserCountOutputTypeCountBookmarksArgs
    communities?: boolean | UserCountOutputTypeCountCommunitiesArgs
    mentions?: boolean | UserCountOutputTypeCountMentionsArgs
    favouriteCommunities?: boolean | UserCountOutputTypeCountFavouriteCommunitiesArgs
    sharedPost?: boolean | UserCountOutputTypeCountSharedPostArgs
    notifications?: boolean | UserCountOutputTypeCountNotificationsArgs
    notificationStartFollow?: boolean | UserCountOutputTypeCountNotificationStartFollowArgs
    notificationCommunityNewMember?: boolean | UserCountOutputTypeCountNotificationCommunityNewMemberArgs
  }

  // Custom InputTypes
  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAccountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFollowingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLikedPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostLikeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountLikedCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentLikeWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountBookmarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountCommunitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCommunityWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountMentionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MentionWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavouriteCommunitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavouriteCommunityWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSharedPostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserShareWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationStartFollowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationStartFollowWhereInput
  }

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountNotificationCommunityNewMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationCommunityNewMemberWhereInput
  }


  /**
   * Count Type PostCountOutputType
   */

  export type PostCountOutputType = {
    comments: number
    likes: number
    bookmarkedBy: number
    images: number
    tags: number
    shares: number
    mentions: number
    sharedBy: number
    NotificationMention: number
  }

  export type PostCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comments?: boolean | PostCountOutputTypeCountCommentsArgs
    likes?: boolean | PostCountOutputTypeCountLikesArgs
    bookmarkedBy?: boolean | PostCountOutputTypeCountBookmarkedByArgs
    images?: boolean | PostCountOutputTypeCountImagesArgs
    tags?: boolean | PostCountOutputTypeCountTagsArgs
    shares?: boolean | PostCountOutputTypeCountSharesArgs
    mentions?: boolean | PostCountOutputTypeCountMentionsArgs
    sharedBy?: boolean | PostCountOutputTypeCountSharedByArgs
    NotificationMention?: boolean | PostCountOutputTypeCountNotificationMentionArgs
  }

  // Custom InputTypes
  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostCountOutputType
     */
    select?: PostCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostLikeWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountBookmarkedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountImagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountTagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostTagWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountSharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountMentionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MentionWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountSharedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserShareWhereInput
  }

  /**
   * PostCountOutputType without action
   */
  export type PostCountOutputTypeCountNotificationMentionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationMentionWhereInput
  }


  /**
   * Count Type CommentCountOutputType
   */

  export type CommentCountOutputType = {
    likes: number
    children: number
    notificationPostComment: number
    notificationCommentReply: number
  }

  export type CommentCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    likes?: boolean | CommentCountOutputTypeCountLikesArgs
    children?: boolean | CommentCountOutputTypeCountChildrenArgs
    notificationPostComment?: boolean | CommentCountOutputTypeCountNotificationPostCommentArgs
    notificationCommentReply?: boolean | CommentCountOutputTypeCountNotificationCommentReplyArgs
  }

  // Custom InputTypes
  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentCountOutputType
     */
    select?: CommentCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountLikesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentLikeWhereInput
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountChildrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountNotificationPostCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationPostCommentWhereInput
  }

  /**
   * CommentCountOutputType without action
   */
  export type CommentCountOutputTypeCountNotificationCommentReplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationCommentReplyWhereInput
  }


  /**
   * Count Type TagCountOutputType
   */

  export type TagCountOutputType = {
    posts: number
  }

  export type TagCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | TagCountOutputTypeCountPostsArgs
  }

  // Custom InputTypes
  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the TagCountOutputType
     */
    select?: TagCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * TagCountOutputType without action
   */
  export type TagCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostTagWhereInput
  }


  /**
   * Count Type CommunityCountOutputType
   */

  export type CommunityCountOutputType = {
    posts: number
    members: number
    favouriteBy: number
    notificationCommunityNewMember: number
  }

  export type CommunityCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | CommunityCountOutputTypeCountPostsArgs
    members?: boolean | CommunityCountOutputTypeCountMembersArgs
    favouriteBy?: boolean | CommunityCountOutputTypeCountFavouriteByArgs
    notificationCommunityNewMember?: boolean | CommunityCountOutputTypeCountNotificationCommunityNewMemberArgs
  }

  // Custom InputTypes
  /**
   * CommunityCountOutputType without action
   */
  export type CommunityCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommunityCountOutputType
     */
    select?: CommunityCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CommunityCountOutputType without action
   */
  export type CommunityCountOutputTypeCountPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
  }

  /**
   * CommunityCountOutputType without action
   */
  export type CommunityCountOutputTypeCountMembersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCommunityWhereInput
  }

  /**
   * CommunityCountOutputType without action
   */
  export type CommunityCountOutputTypeCountFavouriteByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavouriteCommunityWhereInput
  }

  /**
   * CommunityCountOutputType without action
   */
  export type CommunityCountOutputTypeCountNotificationCommunityNewMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationCommunityNewMemberWhereInput
  }


  /**
   * Count Type CategoryCountOutputType
   */

  export type CategoryCountOutputType = {
    comunities: number
  }

  export type CategoryCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comunities?: boolean | CategoryCountOutputTypeCountComunitiesArgs
  }

  // Custom InputTypes
  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CategoryCountOutputType
     */
    select?: CategoryCountOutputTypeSelect<ExtArgs> | null
  }

  /**
   * CategoryCountOutputType without action
   */
  export type CategoryCountOutputTypeCountComunitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunityWhereInput
  }


  /**
   * Models
   */

  /**
   * Model Example
   */

  export type AggregateExample = {
    _count: ExampleCountAggregateOutputType | null
    _min: ExampleMinAggregateOutputType | null
    _max: ExampleMaxAggregateOutputType | null
  }

  export type ExampleMinAggregateOutputType = {
    id: string | null
  }

  export type ExampleMaxAggregateOutputType = {
    id: string | null
  }

  export type ExampleCountAggregateOutputType = {
    id: number
    _all: number
  }


  export type ExampleMinAggregateInputType = {
    id?: true
  }

  export type ExampleMaxAggregateInputType = {
    id?: true
  }

  export type ExampleCountAggregateInputType = {
    id?: true
    _all?: true
  }

  export type ExampleAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Example to aggregate.
     */
    where?: ExampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Examples to fetch.
     */
    orderBy?: ExampleOrderByWithRelationInput | ExampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ExampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Examples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Examples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Examples
    **/
    _count?: true | ExampleCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ExampleMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ExampleMaxAggregateInputType
  }

  export type GetExampleAggregateType<T extends ExampleAggregateArgs> = {
        [P in keyof T & keyof AggregateExample]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateExample[P]>
      : GetScalarType<T[P], AggregateExample[P]>
  }




  export type ExampleGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ExampleWhereInput
    orderBy?: ExampleOrderByWithAggregationInput | ExampleOrderByWithAggregationInput[]
    by: ExampleScalarFieldEnum[] | ExampleScalarFieldEnum
    having?: ExampleScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ExampleCountAggregateInputType | true
    _min?: ExampleMinAggregateInputType
    _max?: ExampleMaxAggregateInputType
  }

  export type ExampleGroupByOutputType = {
    id: string
    _count: ExampleCountAggregateOutputType | null
    _min: ExampleMinAggregateOutputType | null
    _max: ExampleMaxAggregateOutputType | null
  }

  type GetExampleGroupByPayload<T extends ExampleGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ExampleGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ExampleGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ExampleGroupByOutputType[P]>
            : GetScalarType<T[P], ExampleGroupByOutputType[P]>
        }
      >
    >


  export type ExampleSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
  }, ExtArgs["result"]["example"]>

  export type ExampleSelectScalar = {
    id?: boolean
  }



  export type $ExamplePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Example"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      id: string
    }, ExtArgs["result"]["example"]>
    composites: {}
  }


  type ExampleGetPayload<S extends boolean | null | undefined | ExampleDefaultArgs> = $Result.GetResult<Prisma.$ExamplePayload, S>

  type ExampleCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ExampleFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ExampleCountAggregateInputType | true
    }

  export interface ExampleDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Example'], meta: { name: 'Example' } }
    /**
     * Find zero or one Example that matches the filter.
     * @param {ExampleFindUniqueArgs} args - Arguments to find a Example
     * @example
     * // Get one Example
     * const example = await prisma.example.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ExampleFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ExampleFindUniqueArgs<ExtArgs>>
    ): Prisma__ExampleClient<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Example that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ExampleFindUniqueOrThrowArgs} args - Arguments to find a Example
     * @example
     * // Get one Example
     * const example = await prisma.example.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ExampleFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExampleFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ExampleClient<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Example that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExampleFindFirstArgs} args - Arguments to find a Example
     * @example
     * // Get one Example
     * const example = await prisma.example.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ExampleFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ExampleFindFirstArgs<ExtArgs>>
    ): Prisma__ExampleClient<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Example that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExampleFindFirstOrThrowArgs} args - Arguments to find a Example
     * @example
     * // Get one Example
     * const example = await prisma.example.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ExampleFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ExampleFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ExampleClient<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Examples that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExampleFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Examples
     * const examples = await prisma.example.findMany()
     * 
     * // Get first 10 Examples
     * const examples = await prisma.example.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const exampleWithIdOnly = await prisma.example.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ExampleFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExampleFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Example.
     * @param {ExampleCreateArgs} args - Arguments to create a Example.
     * @example
     * // Create one Example
     * const Example = await prisma.example.create({
     *   data: {
     *     // ... data to create a Example
     *   }
     * })
     * 
    **/
    create<T extends ExampleCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ExampleCreateArgs<ExtArgs>>
    ): Prisma__ExampleClient<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Examples.
     *     @param {ExampleCreateManyArgs} args - Arguments to create many Examples.
     *     @example
     *     // Create many Examples
     *     const example = await prisma.example.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ExampleCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExampleCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Example.
     * @param {ExampleDeleteArgs} args - Arguments to delete one Example.
     * @example
     * // Delete one Example
     * const Example = await prisma.example.delete({
     *   where: {
     *     // ... filter to delete one Example
     *   }
     * })
     * 
    **/
    delete<T extends ExampleDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ExampleDeleteArgs<ExtArgs>>
    ): Prisma__ExampleClient<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Example.
     * @param {ExampleUpdateArgs} args - Arguments to update one Example.
     * @example
     * // Update one Example
     * const example = await prisma.example.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ExampleUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ExampleUpdateArgs<ExtArgs>>
    ): Prisma__ExampleClient<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Examples.
     * @param {ExampleDeleteManyArgs} args - Arguments to filter Examples to delete.
     * @example
     * // Delete a few Examples
     * const { count } = await prisma.example.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ExampleDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ExampleDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Examples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExampleUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Examples
     * const example = await prisma.example.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ExampleUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ExampleUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Example.
     * @param {ExampleUpsertArgs} args - Arguments to update or create a Example.
     * @example
     * // Update or create a Example
     * const example = await prisma.example.upsert({
     *   create: {
     *     // ... data to create a Example
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Example we want to update
     *   }
     * })
    **/
    upsert<T extends ExampleUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ExampleUpsertArgs<ExtArgs>>
    ): Prisma__ExampleClient<$Result.GetResult<Prisma.$ExamplePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Examples.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExampleCountArgs} args - Arguments to filter Examples to count.
     * @example
     * // Count the number of Examples
     * const count = await prisma.example.count({
     *   where: {
     *     // ... the filter for the Examples we want to count
     *   }
     * })
    **/
    count<T extends ExampleCountArgs>(
      args?: Subset<T, ExampleCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ExampleCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Example.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExampleAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ExampleAggregateArgs>(args: Subset<T, ExampleAggregateArgs>): Prisma.PrismaPromise<GetExampleAggregateType<T>>

    /**
     * Group by Example.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ExampleGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ExampleGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ExampleGroupByArgs['orderBy'] }
        : { orderBy?: ExampleGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ExampleGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetExampleGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Example model
   */
  readonly fields: ExampleFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Example.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ExampleClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Example model
   */ 
  interface ExampleFieldRefs {
    readonly id: FieldRef<"Example", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Example findUnique
   */
  export type ExampleFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
    /**
     * Filter, which Example to fetch.
     */
    where: ExampleWhereUniqueInput
  }

  /**
   * Example findUniqueOrThrow
   */
  export type ExampleFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
    /**
     * Filter, which Example to fetch.
     */
    where: ExampleWhereUniqueInput
  }

  /**
   * Example findFirst
   */
  export type ExampleFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
    /**
     * Filter, which Example to fetch.
     */
    where?: ExampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Examples to fetch.
     */
    orderBy?: ExampleOrderByWithRelationInput | ExampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Examples.
     */
    cursor?: ExampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Examples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Examples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Examples.
     */
    distinct?: ExampleScalarFieldEnum | ExampleScalarFieldEnum[]
  }

  /**
   * Example findFirstOrThrow
   */
  export type ExampleFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
    /**
     * Filter, which Example to fetch.
     */
    where?: ExampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Examples to fetch.
     */
    orderBy?: ExampleOrderByWithRelationInput | ExampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Examples.
     */
    cursor?: ExampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Examples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Examples.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Examples.
     */
    distinct?: ExampleScalarFieldEnum | ExampleScalarFieldEnum[]
  }

  /**
   * Example findMany
   */
  export type ExampleFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
    /**
     * Filter, which Examples to fetch.
     */
    where?: ExampleWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Examples to fetch.
     */
    orderBy?: ExampleOrderByWithRelationInput | ExampleOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Examples.
     */
    cursor?: ExampleWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Examples from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Examples.
     */
    skip?: number
    distinct?: ExampleScalarFieldEnum | ExampleScalarFieldEnum[]
  }

  /**
   * Example create
   */
  export type ExampleCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
    /**
     * The data needed to create a Example.
     */
    data?: XOR<ExampleCreateInput, ExampleUncheckedCreateInput>
  }

  /**
   * Example createMany
   */
  export type ExampleCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Examples.
     */
    data: ExampleCreateManyInput | ExampleCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Example update
   */
  export type ExampleUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
    /**
     * The data needed to update a Example.
     */
    data: XOR<ExampleUpdateInput, ExampleUncheckedUpdateInput>
    /**
     * Choose, which Example to update.
     */
    where: ExampleWhereUniqueInput
  }

  /**
   * Example updateMany
   */
  export type ExampleUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Examples.
     */
    data: XOR<ExampleUpdateManyMutationInput, ExampleUncheckedUpdateManyInput>
    /**
     * Filter which Examples to update
     */
    where?: ExampleWhereInput
  }

  /**
   * Example upsert
   */
  export type ExampleUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
    /**
     * The filter to search for the Example to update in case it exists.
     */
    where: ExampleWhereUniqueInput
    /**
     * In case the Example found by the `where` argument doesn't exist, create a new Example with this data.
     */
    create: XOR<ExampleCreateInput, ExampleUncheckedCreateInput>
    /**
     * In case the Example was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ExampleUpdateInput, ExampleUncheckedUpdateInput>
  }

  /**
   * Example delete
   */
  export type ExampleDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
    /**
     * Filter which Example to delete.
     */
    where: ExampleWhereUniqueInput
  }

  /**
   * Example deleteMany
   */
  export type ExampleDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Examples to delete
     */
    where?: ExampleWhereInput
  }

  /**
   * Example without action
   */
  export type ExampleDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Example
     */
    select?: ExampleSelect<ExtArgs> | null
  }


  /**
   * Model Account
   */

  export type AggregateAccount = {
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  export type AccountAvgAggregateOutputType = {
    expires_at: number | null
    refresh_token_expires_in: number | null
  }

  export type AccountSumAggregateOutputType = {
    expires_at: number | null
    refresh_token_expires_in: number | null
  }

  export type AccountMinAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    refresh_token_expires_in: number | null
  }

  export type AccountMaxAggregateOutputType = {
    id: string | null
    userId: string | null
    type: string | null
    provider: string | null
    providerAccountId: string | null
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    refresh_token_expires_in: number | null
  }

  export type AccountCountAggregateOutputType = {
    id: number
    userId: number
    type: number
    provider: number
    providerAccountId: number
    refresh_token: number
    access_token: number
    expires_at: number
    token_type: number
    scope: number
    id_token: number
    session_state: number
    refresh_token_expires_in: number
    _all: number
  }


  export type AccountAvgAggregateInputType = {
    expires_at?: true
    refresh_token_expires_in?: true
  }

  export type AccountSumAggregateInputType = {
    expires_at?: true
    refresh_token_expires_in?: true
  }

  export type AccountMinAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    refresh_token_expires_in?: true
  }

  export type AccountMaxAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    refresh_token_expires_in?: true
  }

  export type AccountCountAggregateInputType = {
    id?: true
    userId?: true
    type?: true
    provider?: true
    providerAccountId?: true
    refresh_token?: true
    access_token?: true
    expires_at?: true
    token_type?: true
    scope?: true
    id_token?: true
    session_state?: true
    refresh_token_expires_in?: true
    _all?: true
  }

  export type AccountAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Account to aggregate.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Accounts
    **/
    _count?: true | AccountCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AccountAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AccountSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AccountMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AccountMaxAggregateInputType
  }

  export type GetAccountAggregateType<T extends AccountAggregateArgs> = {
        [P in keyof T & keyof AggregateAccount]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAccount[P]>
      : GetScalarType<T[P], AggregateAccount[P]>
  }




  export type AccountGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithAggregationInput | AccountOrderByWithAggregationInput[]
    by: AccountScalarFieldEnum[] | AccountScalarFieldEnum
    having?: AccountScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AccountCountAggregateInputType | true
    _avg?: AccountAvgAggregateInputType
    _sum?: AccountSumAggregateInputType
    _min?: AccountMinAggregateInputType
    _max?: AccountMaxAggregateInputType
  }

  export type AccountGroupByOutputType = {
    id: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token: string | null
    access_token: string | null
    expires_at: number | null
    token_type: string | null
    scope: string | null
    id_token: string | null
    session_state: string | null
    refresh_token_expires_in: number | null
    _count: AccountCountAggregateOutputType | null
    _avg: AccountAvgAggregateOutputType | null
    _sum: AccountSumAggregateOutputType | null
    _min: AccountMinAggregateOutputType | null
    _max: AccountMaxAggregateOutputType | null
  }

  type GetAccountGroupByPayload<T extends AccountGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AccountGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AccountGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AccountGroupByOutputType[P]>
            : GetScalarType<T[P], AccountGroupByOutputType[P]>
        }
      >
    >


  export type AccountSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    refresh_token_expires_in?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["account"]>

  export type AccountSelectScalar = {
    id?: boolean
    userId?: boolean
    type?: boolean
    provider?: boolean
    providerAccountId?: boolean
    refresh_token?: boolean
    access_token?: boolean
    expires_at?: boolean
    token_type?: boolean
    scope?: boolean
    id_token?: boolean
    session_state?: boolean
    refresh_token_expires_in?: boolean
  }


  export type AccountInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $AccountPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Account"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      userId: string
      type: string
      provider: string
      providerAccountId: string
      refresh_token: string | null
      access_token: string | null
      expires_at: number | null
      token_type: string | null
      scope: string | null
      id_token: string | null
      session_state: string | null
      refresh_token_expires_in: number | null
    }, ExtArgs["result"]["account"]>
    composites: {}
  }


  type AccountGetPayload<S extends boolean | null | undefined | AccountDefaultArgs> = $Result.GetResult<Prisma.$AccountPayload, S>

  type AccountCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AccountFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AccountCountAggregateInputType | true
    }

  export interface AccountDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Account'], meta: { name: 'Account' } }
    /**
     * Find zero or one Account that matches the filter.
     * @param {AccountFindUniqueArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AccountFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AccountFindUniqueArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Account that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AccountFindUniqueOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AccountFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Account that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AccountFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Account that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindFirstOrThrowArgs} args - Arguments to find a Account
     * @example
     * // Get one Account
     * const account = await prisma.account.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AccountFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Accounts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Accounts
     * const accounts = await prisma.account.findMany()
     * 
     * // Get first 10 Accounts
     * const accounts = await prisma.account.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const accountWithIdOnly = await prisma.account.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends AccountFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Account.
     * @param {AccountCreateArgs} args - Arguments to create a Account.
     * @example
     * // Create one Account
     * const Account = await prisma.account.create({
     *   data: {
     *     // ... data to create a Account
     *   }
     * })
     * 
    **/
    create<T extends AccountCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountCreateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Accounts.
     *     @param {AccountCreateManyArgs} args - Arguments to create many Accounts.
     *     @example
     *     // Create many Accounts
     *     const account = await prisma.account.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AccountCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Account.
     * @param {AccountDeleteArgs} args - Arguments to delete one Account.
     * @example
     * // Delete one Account
     * const Account = await prisma.account.delete({
     *   where: {
     *     // ... filter to delete one Account
     *   }
     * })
     * 
    **/
    delete<T extends AccountDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AccountDeleteArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Account.
     * @param {AccountUpdateArgs} args - Arguments to update one Account.
     * @example
     * // Update one Account
     * const account = await prisma.account.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AccountUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Accounts.
     * @param {AccountDeleteManyArgs} args - Arguments to filter Accounts to delete.
     * @example
     * // Delete a few Accounts
     * const { count } = await prisma.account.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AccountDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AccountDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Accounts
     * const account = await prisma.account.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AccountUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Account.
     * @param {AccountUpsertArgs} args - Arguments to update or create a Account.
     * @example
     * // Update or create a Account
     * const account = await prisma.account.upsert({
     *   create: {
     *     // ... data to create a Account
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Account we want to update
     *   }
     * })
    **/
    upsert<T extends AccountUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AccountUpsertArgs<ExtArgs>>
    ): Prisma__AccountClient<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Accounts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountCountArgs} args - Arguments to filter Accounts to count.
     * @example
     * // Count the number of Accounts
     * const count = await prisma.account.count({
     *   where: {
     *     // ... the filter for the Accounts we want to count
     *   }
     * })
    **/
    count<T extends AccountCountArgs>(
      args?: Subset<T, AccountCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AccountCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AccountAggregateArgs>(args: Subset<T, AccountAggregateArgs>): Prisma.PrismaPromise<GetAccountAggregateType<T>>

    /**
     * Group by Account.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AccountGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AccountGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AccountGroupByArgs['orderBy'] }
        : { orderBy?: AccountGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AccountGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAccountGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Account model
   */
  readonly fields: AccountFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Account.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AccountClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Account model
   */ 
  interface AccountFieldRefs {
    readonly id: FieldRef<"Account", 'String'>
    readonly userId: FieldRef<"Account", 'String'>
    readonly type: FieldRef<"Account", 'String'>
    readonly provider: FieldRef<"Account", 'String'>
    readonly providerAccountId: FieldRef<"Account", 'String'>
    readonly refresh_token: FieldRef<"Account", 'String'>
    readonly access_token: FieldRef<"Account", 'String'>
    readonly expires_at: FieldRef<"Account", 'Int'>
    readonly token_type: FieldRef<"Account", 'String'>
    readonly scope: FieldRef<"Account", 'String'>
    readonly id_token: FieldRef<"Account", 'String'>
    readonly session_state: FieldRef<"Account", 'String'>
    readonly refresh_token_expires_in: FieldRef<"Account", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Account findUnique
   */
  export type AccountFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findUniqueOrThrow
   */
  export type AccountFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account findFirst
   */
  export type AccountFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findFirstOrThrow
   */
  export type AccountFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Account to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Accounts.
     */
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account findMany
   */
  export type AccountFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter, which Accounts to fetch.
     */
    where?: AccountWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Accounts to fetch.
     */
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Accounts.
     */
    cursor?: AccountWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Accounts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Accounts.
     */
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * Account create
   */
  export type AccountCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to create a Account.
     */
    data: XOR<AccountCreateInput, AccountUncheckedCreateInput>
  }

  /**
   * Account createMany
   */
  export type AccountCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Accounts.
     */
    data: AccountCreateManyInput | AccountCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Account update
   */
  export type AccountUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The data needed to update a Account.
     */
    data: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
    /**
     * Choose, which Account to update.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account updateMany
   */
  export type AccountUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Accounts.
     */
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyInput>
    /**
     * Filter which Accounts to update
     */
    where?: AccountWhereInput
  }

  /**
   * Account upsert
   */
  export type AccountUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * The filter to search for the Account to update in case it exists.
     */
    where: AccountWhereUniqueInput
    /**
     * In case the Account found by the `where` argument doesn't exist, create a new Account with this data.
     */
    create: XOR<AccountCreateInput, AccountUncheckedCreateInput>
    /**
     * In case the Account was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AccountUpdateInput, AccountUncheckedUpdateInput>
  }

  /**
   * Account delete
   */
  export type AccountDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    /**
     * Filter which Account to delete.
     */
    where: AccountWhereUniqueInput
  }

  /**
   * Account deleteMany
   */
  export type AccountDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Accounts to delete
     */
    where?: AccountWhereInput
  }

  /**
   * Account without action
   */
  export type AccountDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
  }


  /**
   * Model Session
   */

  export type AggregateSession = {
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  export type SessionMinAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionMaxAggregateOutputType = {
    id: string | null
    sessionToken: string | null
    userId: string | null
    expires: Date | null
  }

  export type SessionCountAggregateOutputType = {
    id: number
    sessionToken: number
    userId: number
    expires: number
    _all: number
  }


  export type SessionMinAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionMaxAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
  }

  export type SessionCountAggregateInputType = {
    id?: true
    sessionToken?: true
    userId?: true
    expires?: true
    _all?: true
  }

  export type SessionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Session to aggregate.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Sessions
    **/
    _count?: true | SessionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SessionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SessionMaxAggregateInputType
  }

  export type GetSessionAggregateType<T extends SessionAggregateArgs> = {
        [P in keyof T & keyof AggregateSession]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSession[P]>
      : GetScalarType<T[P], AggregateSession[P]>
  }




  export type SessionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithAggregationInput | SessionOrderByWithAggregationInput[]
    by: SessionScalarFieldEnum[] | SessionScalarFieldEnum
    having?: SessionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SessionCountAggregateInputType | true
    _min?: SessionMinAggregateInputType
    _max?: SessionMaxAggregateInputType
  }

  export type SessionGroupByOutputType = {
    id: string
    sessionToken: string
    userId: string
    expires: Date
    _count: SessionCountAggregateOutputType | null
    _min: SessionMinAggregateOutputType | null
    _max: SessionMaxAggregateOutputType | null
  }

  type GetSessionGroupByPayload<T extends SessionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SessionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SessionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SessionGroupByOutputType[P]>
            : GetScalarType<T[P], SessionGroupByOutputType[P]>
        }
      >
    >


  export type SessionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["session"]>

  export type SessionSelectScalar = {
    id?: boolean
    sessionToken?: boolean
    userId?: boolean
    expires?: boolean
  }


  export type SessionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $SessionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Session"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      sessionToken: string
      userId: string
      expires: Date
    }, ExtArgs["result"]["session"]>
    composites: {}
  }


  type SessionGetPayload<S extends boolean | null | undefined | SessionDefaultArgs> = $Result.GetResult<Prisma.$SessionPayload, S>

  type SessionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SessionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SessionCountAggregateInputType | true
    }

  export interface SessionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Session'], meta: { name: 'Session' } }
    /**
     * Find zero or one Session that matches the filter.
     * @param {SessionFindUniqueArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SessionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SessionFindUniqueArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Session that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SessionFindUniqueOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SessionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Session that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SessionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Session that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindFirstOrThrowArgs} args - Arguments to find a Session
     * @example
     * // Get one Session
     * const session = await prisma.session.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SessionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Sessions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Sessions
     * const sessions = await prisma.session.findMany()
     * 
     * // Get first 10 Sessions
     * const sessions = await prisma.session.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const sessionWithIdOnly = await prisma.session.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends SessionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Session.
     * @param {SessionCreateArgs} args - Arguments to create a Session.
     * @example
     * // Create one Session
     * const Session = await prisma.session.create({
     *   data: {
     *     // ... data to create a Session
     *   }
     * })
     * 
    **/
    create<T extends SessionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionCreateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Sessions.
     *     @param {SessionCreateManyArgs} args - Arguments to create many Sessions.
     *     @example
     *     // Create many Sessions
     *     const session = await prisma.session.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SessionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Session.
     * @param {SessionDeleteArgs} args - Arguments to delete one Session.
     * @example
     * // Delete one Session
     * const Session = await prisma.session.delete({
     *   where: {
     *     // ... filter to delete one Session
     *   }
     * })
     * 
    **/
    delete<T extends SessionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SessionDeleteArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Session.
     * @param {SessionUpdateArgs} args - Arguments to update one Session.
     * @example
     * // Update one Session
     * const session = await prisma.session.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SessionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Sessions.
     * @param {SessionDeleteManyArgs} args - Arguments to filter Sessions to delete.
     * @example
     * // Delete a few Sessions
     * const { count } = await prisma.session.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SessionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SessionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Sessions
     * const session = await prisma.session.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SessionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Session.
     * @param {SessionUpsertArgs} args - Arguments to update or create a Session.
     * @example
     * // Update or create a Session
     * const session = await prisma.session.upsert({
     *   create: {
     *     // ... data to create a Session
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Session we want to update
     *   }
     * })
    **/
    upsert<T extends SessionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SessionUpsertArgs<ExtArgs>>
    ): Prisma__SessionClient<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Sessions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionCountArgs} args - Arguments to filter Sessions to count.
     * @example
     * // Count the number of Sessions
     * const count = await prisma.session.count({
     *   where: {
     *     // ... the filter for the Sessions we want to count
     *   }
     * })
    **/
    count<T extends SessionCountArgs>(
      args?: Subset<T, SessionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SessionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SessionAggregateArgs>(args: Subset<T, SessionAggregateArgs>): Prisma.PrismaPromise<GetSessionAggregateType<T>>

    /**
     * Group by Session.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SessionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SessionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SessionGroupByArgs['orderBy'] }
        : { orderBy?: SessionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SessionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSessionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Session model
   */
  readonly fields: SessionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Session.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SessionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Session model
   */ 
  interface SessionFieldRefs {
    readonly id: FieldRef<"Session", 'String'>
    readonly sessionToken: FieldRef<"Session", 'String'>
    readonly userId: FieldRef<"Session", 'String'>
    readonly expires: FieldRef<"Session", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * Session findUnique
   */
  export type SessionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findUniqueOrThrow
   */
  export type SessionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session findFirst
   */
  export type SessionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findFirstOrThrow
   */
  export type SessionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Session to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Sessions.
     */
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session findMany
   */
  export type SessionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter, which Sessions to fetch.
     */
    where?: SessionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Sessions to fetch.
     */
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Sessions.
     */
    cursor?: SessionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Sessions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Sessions.
     */
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * Session create
   */
  export type SessionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to create a Session.
     */
    data: XOR<SessionCreateInput, SessionUncheckedCreateInput>
  }

  /**
   * Session createMany
   */
  export type SessionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Sessions.
     */
    data: SessionCreateManyInput | SessionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Session update
   */
  export type SessionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The data needed to update a Session.
     */
    data: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
    /**
     * Choose, which Session to update.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session updateMany
   */
  export type SessionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Sessions.
     */
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyInput>
    /**
     * Filter which Sessions to update
     */
    where?: SessionWhereInput
  }

  /**
   * Session upsert
   */
  export type SessionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * The filter to search for the Session to update in case it exists.
     */
    where: SessionWhereUniqueInput
    /**
     * In case the Session found by the `where` argument doesn't exist, create a new Session with this data.
     */
    create: XOR<SessionCreateInput, SessionUncheckedCreateInput>
    /**
     * In case the Session was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SessionUpdateInput, SessionUncheckedUpdateInput>
  }

  /**
   * Session delete
   */
  export type SessionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    /**
     * Filter which Session to delete.
     */
    where: SessionWhereUniqueInput
  }

  /**
   * Session deleteMany
   */
  export type SessionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Sessions to delete
     */
    where?: SessionWhereInput
  }

  /**
   * Session without action
   */
  export type SessionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
  }


  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserMinAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    bannerImage: string | null
    bio: string | null
    facebook: string | null
    instagram: string | null
    twitter: string | null
    whatsapp: string | null
  }

  export type UserMaxAggregateOutputType = {
    id: string | null
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    bannerImage: string | null
    bio: string | null
    facebook: string | null
    instagram: string | null
    twitter: string | null
    whatsapp: string | null
  }

  export type UserCountAggregateOutputType = {
    id: number
    name: number
    email: number
    emailVerified: number
    image: number
    bannerImage: number
    bio: number
    facebook: number
    instagram: number
    twitter: number
    whatsapp: number
    _all: number
  }


  export type UserMinAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    bannerImage?: true
    bio?: true
    facebook?: true
    instagram?: true
    twitter?: true
    whatsapp?: true
  }

  export type UserMaxAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    bannerImage?: true
    bio?: true
    facebook?: true
    instagram?: true
    twitter?: true
    whatsapp?: true
  }

  export type UserCountAggregateInputType = {
    id?: true
    name?: true
    email?: true
    emailVerified?: true
    image?: true
    bannerImage?: true
    bio?: true
    facebook?: true
    instagram?: true
    twitter?: true
    whatsapp?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    id: string
    name: string | null
    email: string | null
    emailVerified: Date | null
    image: string | null
    bannerImage: string | null
    bio: string
    facebook: string | null
    instagram: string | null
    twitter: string | null
    whatsapp: string | null
    _count: UserCountAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    bannerImage?: boolean
    bio?: boolean
    facebook?: boolean
    instagram?: boolean
    twitter?: boolean
    whatsapp?: boolean
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    followedBy?: boolean | User$followedByArgs<ExtArgs>
    following?: boolean | User$followingArgs<ExtArgs>
    posts?: boolean | User$postsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    likedPosts?: boolean | User$likedPostsArgs<ExtArgs>
    likedComments?: boolean | User$likedCommentsArgs<ExtArgs>
    bookmarks?: boolean | User$bookmarksArgs<ExtArgs>
    communities?: boolean | User$communitiesArgs<ExtArgs>
    mentions?: boolean | User$mentionsArgs<ExtArgs>
    favouriteCommunities?: boolean | User$favouriteCommunitiesArgs<ExtArgs>
    sharedPost?: boolean | User$sharedPostArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    notificationStartFollow?: boolean | User$notificationStartFollowArgs<ExtArgs>
    notificationCommunityNewMember?: boolean | User$notificationCommunityNewMemberArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    id?: boolean
    name?: boolean
    email?: boolean
    emailVerified?: boolean
    image?: boolean
    bannerImage?: boolean
    bio?: boolean
    facebook?: boolean
    instagram?: boolean
    twitter?: boolean
    whatsapp?: boolean
  }


  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    accounts?: boolean | User$accountsArgs<ExtArgs>
    sessions?: boolean | User$sessionsArgs<ExtArgs>
    followedBy?: boolean | User$followedByArgs<ExtArgs>
    following?: boolean | User$followingArgs<ExtArgs>
    posts?: boolean | User$postsArgs<ExtArgs>
    comments?: boolean | User$commentsArgs<ExtArgs>
    likedPosts?: boolean | User$likedPostsArgs<ExtArgs>
    likedComments?: boolean | User$likedCommentsArgs<ExtArgs>
    bookmarks?: boolean | User$bookmarksArgs<ExtArgs>
    communities?: boolean | User$communitiesArgs<ExtArgs>
    mentions?: boolean | User$mentionsArgs<ExtArgs>
    favouriteCommunities?: boolean | User$favouriteCommunitiesArgs<ExtArgs>
    sharedPost?: boolean | User$sharedPostArgs<ExtArgs>
    notifications?: boolean | User$notificationsArgs<ExtArgs>
    notificationStartFollow?: boolean | User$notificationStartFollowArgs<ExtArgs>
    notificationCommunityNewMember?: boolean | User$notificationCommunityNewMemberArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      accounts: Prisma.$AccountPayload<ExtArgs>[]
      sessions: Prisma.$SessionPayload<ExtArgs>[]
      followedBy: Prisma.$UserPayload<ExtArgs>[]
      following: Prisma.$UserPayload<ExtArgs>[]
      posts: Prisma.$PostPayload<ExtArgs>[]
      comments: Prisma.$CommentPayload<ExtArgs>[]
      likedPosts: Prisma.$PostLikePayload<ExtArgs>[]
      likedComments: Prisma.$CommentLikePayload<ExtArgs>[]
      bookmarks: Prisma.$BookmarkPayload<ExtArgs>[]
      communities: Prisma.$UserCommunityPayload<ExtArgs>[]
      mentions: Prisma.$MentionPayload<ExtArgs>[]
      favouriteCommunities: Prisma.$FavouriteCommunityPayload<ExtArgs>[]
      sharedPost: Prisma.$UserSharePayload<ExtArgs>[]
      notifications: Prisma.$NotificationPayload<ExtArgs>[]
      notificationStartFollow: Prisma.$NotificationStartFollowPayload<ExtArgs>[]
      notificationCommunityNewMember: Prisma.$NotificationCommunityNewMemberPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string | null
      email: string | null
      emailVerified: Date | null
      image: string | null
      bannerImage: string | null
      bio: string
      facebook: string | null
      instagram: string | null
      twitter: string | null
      whatsapp: string | null
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const userWithIdOnly = await prisma.user.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    accounts<T extends User$accountsArgs<ExtArgs> = {}>(args?: Subset<T, User$accountsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AccountPayload<ExtArgs>, T, 'findMany'> | Null>;

    sessions<T extends User$sessionsArgs<ExtArgs> = {}>(args?: Subset<T, User$sessionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SessionPayload<ExtArgs>, T, 'findMany'> | Null>;

    followedBy<T extends User$followedByArgs<ExtArgs> = {}>(args?: Subset<T, User$followedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    following<T extends User$followingArgs<ExtArgs> = {}>(args?: Subset<T, User$followingArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'> | Null>;

    posts<T extends User$postsArgs<ExtArgs> = {}>(args?: Subset<T, User$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findMany'> | Null>;

    comments<T extends User$commentsArgs<ExtArgs> = {}>(args?: Subset<T, User$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'> | Null>;

    likedPosts<T extends User$likedPostsArgs<ExtArgs> = {}>(args?: Subset<T, User$likedPostsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, 'findMany'> | Null>;

    likedComments<T extends User$likedCommentsArgs<ExtArgs> = {}>(args?: Subset<T, User$likedCommentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, 'findMany'> | Null>;

    bookmarks<T extends User$bookmarksArgs<ExtArgs> = {}>(args?: Subset<T, User$bookmarksArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'findMany'> | Null>;

    communities<T extends User$communitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$communitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, 'findMany'> | Null>;

    mentions<T extends User$mentionsArgs<ExtArgs> = {}>(args?: Subset<T, User$mentionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MentionPayload<ExtArgs>, T, 'findMany'> | Null>;

    favouriteCommunities<T extends User$favouriteCommunitiesArgs<ExtArgs> = {}>(args?: Subset<T, User$favouriteCommunitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavouriteCommunityPayload<ExtArgs>, T, 'findMany'> | Null>;

    sharedPost<T extends User$sharedPostArgs<ExtArgs> = {}>(args?: Subset<T, User$sharedPostArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSharePayload<ExtArgs>, T, 'findMany'> | Null>;

    notifications<T extends User$notificationsArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'> | Null>;

    notificationStartFollow<T extends User$notificationStartFollowArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationStartFollowArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationStartFollowPayload<ExtArgs>, T, 'findMany'> | Null>;

    notificationCommunityNewMember<T extends User$notificationCommunityNewMemberArgs<ExtArgs> = {}>(args?: Subset<T, User$notificationCommunityNewMemberArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationCommunityNewMemberPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly id: FieldRef<"User", 'String'>
    readonly name: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly emailVerified: FieldRef<"User", 'DateTime'>
    readonly image: FieldRef<"User", 'String'>
    readonly bannerImage: FieldRef<"User", 'String'>
    readonly bio: FieldRef<"User", 'String'>
    readonly facebook: FieldRef<"User", 'String'>
    readonly instagram: FieldRef<"User", 'String'>
    readonly twitter: FieldRef<"User", 'String'>
    readonly whatsapp: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes
  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data?: XOR<UserCreateInput, UserUncheckedCreateInput>
  }

  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }

  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }

  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }

  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }

  /**
   * User.accounts
   */
  export type User$accountsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Account
     */
    select?: AccountSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: AccountInclude<ExtArgs> | null
    where?: AccountWhereInput
    orderBy?: AccountOrderByWithRelationInput | AccountOrderByWithRelationInput[]
    cursor?: AccountWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AccountScalarFieldEnum | AccountScalarFieldEnum[]
  }

  /**
   * User.sessions
   */
  export type User$sessionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Session
     */
    select?: SessionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: SessionInclude<ExtArgs> | null
    where?: SessionWhereInput
    orderBy?: SessionOrderByWithRelationInput | SessionOrderByWithRelationInput[]
    cursor?: SessionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SessionScalarFieldEnum | SessionScalarFieldEnum[]
  }

  /**
   * User.followedBy
   */
  export type User$followedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User.following
   */
  export type User$followingArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    cursor?: UserWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }

  /**
   * User.posts
   */
  export type User$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * User.comments
   */
  export type User$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * User.likedPosts
   */
  export type User$likedPostsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    where?: PostLikeWhereInput
    orderBy?: PostLikeOrderByWithRelationInput | PostLikeOrderByWithRelationInput[]
    cursor?: PostLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostLikeScalarFieldEnum | PostLikeScalarFieldEnum[]
  }

  /**
   * User.likedComments
   */
  export type User$likedCommentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    where?: CommentLikeWhereInput
    orderBy?: CommentLikeOrderByWithRelationInput | CommentLikeOrderByWithRelationInput[]
    cursor?: CommentLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentLikeScalarFieldEnum | CommentLikeScalarFieldEnum[]
  }

  /**
   * User.bookmarks
   */
  export type User$bookmarksArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    where?: BookmarkWhereInput
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    cursor?: BookmarkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * User.communities
   */
  export type User$communitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    where?: UserCommunityWhereInput
    orderBy?: UserCommunityOrderByWithRelationInput | UserCommunityOrderByWithRelationInput[]
    cursor?: UserCommunityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCommunityScalarFieldEnum | UserCommunityScalarFieldEnum[]
  }

  /**
   * User.mentions
   */
  export type User$mentionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mention
     */
    select?: MentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MentionInclude<ExtArgs> | null
    where?: MentionWhereInput
    orderBy?: MentionOrderByWithRelationInput | MentionOrderByWithRelationInput[]
    cursor?: MentionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MentionScalarFieldEnum | MentionScalarFieldEnum[]
  }

  /**
   * User.favouriteCommunities
   */
  export type User$favouriteCommunitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteCommunity
     */
    select?: FavouriteCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavouriteCommunityInclude<ExtArgs> | null
    where?: FavouriteCommunityWhereInput
    orderBy?: FavouriteCommunityOrderByWithRelationInput | FavouriteCommunityOrderByWithRelationInput[]
    cursor?: FavouriteCommunityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavouriteCommunityScalarFieldEnum | FavouriteCommunityScalarFieldEnum[]
  }

  /**
   * User.sharedPost
   */
  export type User$sharedPostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShare
     */
    select?: UserShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShareInclude<ExtArgs> | null
    where?: UserShareWhereInput
    orderBy?: UserShareOrderByWithRelationInput | UserShareOrderByWithRelationInput[]
    cursor?: UserShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserShareScalarFieldEnum | UserShareScalarFieldEnum[]
  }

  /**
   * User.notifications
   */
  export type User$notificationsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    cursor?: NotificationWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * User.notificationStartFollow
   */
  export type User$notificationStartFollowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationStartFollow
     */
    select?: NotificationStartFollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationStartFollowInclude<ExtArgs> | null
    where?: NotificationStartFollowWhereInput
    orderBy?: NotificationStartFollowOrderByWithRelationInput | NotificationStartFollowOrderByWithRelationInput[]
    cursor?: NotificationStartFollowWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationStartFollowScalarFieldEnum | NotificationStartFollowScalarFieldEnum[]
  }

  /**
   * User.notificationCommunityNewMember
   */
  export type User$notificationCommunityNewMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommunityNewMember
     */
    select?: NotificationCommunityNewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommunityNewMemberInclude<ExtArgs> | null
    where?: NotificationCommunityNewMemberWhereInput
    orderBy?: NotificationCommunityNewMemberOrderByWithRelationInput | NotificationCommunityNewMemberOrderByWithRelationInput[]
    cursor?: NotificationCommunityNewMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationCommunityNewMemberScalarFieldEnum | NotificationCommunityNewMemberScalarFieldEnum[]
  }

  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserInclude<ExtArgs> | null
  }


  /**
   * Model VerificationToken
   */

  export type AggregateVerificationToken = {
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  export type VerificationTokenMinAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenMaxAggregateOutputType = {
    identifier: string | null
    token: string | null
    expires: Date | null
  }

  export type VerificationTokenCountAggregateOutputType = {
    identifier: number
    token: number
    expires: number
    _all: number
  }


  export type VerificationTokenMinAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenMaxAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
  }

  export type VerificationTokenCountAggregateInputType = {
    identifier?: true
    token?: true
    expires?: true
    _all?: true
  }

  export type VerificationTokenAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationToken to aggregate.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned VerificationTokens
    **/
    _count?: true | VerificationTokenCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: VerificationTokenMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type GetVerificationTokenAggregateType<T extends VerificationTokenAggregateArgs> = {
        [P in keyof T & keyof AggregateVerificationToken]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateVerificationToken[P]>
      : GetScalarType<T[P], AggregateVerificationToken[P]>
  }




  export type VerificationTokenGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: VerificationTokenWhereInput
    orderBy?: VerificationTokenOrderByWithAggregationInput | VerificationTokenOrderByWithAggregationInput[]
    by: VerificationTokenScalarFieldEnum[] | VerificationTokenScalarFieldEnum
    having?: VerificationTokenScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: VerificationTokenCountAggregateInputType | true
    _min?: VerificationTokenMinAggregateInputType
    _max?: VerificationTokenMaxAggregateInputType
  }

  export type VerificationTokenGroupByOutputType = {
    identifier: string
    token: string
    expires: Date
    _count: VerificationTokenCountAggregateOutputType | null
    _min: VerificationTokenMinAggregateOutputType | null
    _max: VerificationTokenMaxAggregateOutputType | null
  }

  type GetVerificationTokenGroupByPayload<T extends VerificationTokenGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<VerificationTokenGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof VerificationTokenGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
            : GetScalarType<T[P], VerificationTokenGroupByOutputType[P]>
        }
      >
    >


  export type VerificationTokenSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }, ExtArgs["result"]["verificationToken"]>

  export type VerificationTokenSelectScalar = {
    identifier?: boolean
    token?: boolean
    expires?: boolean
  }



  export type $VerificationTokenPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "VerificationToken"
    objects: {}
    scalars: $Extensions.GetPayloadResult<{
      identifier: string
      token: string
      expires: Date
    }, ExtArgs["result"]["verificationToken"]>
    composites: {}
  }


  type VerificationTokenGetPayload<S extends boolean | null | undefined | VerificationTokenDefaultArgs> = $Result.GetResult<Prisma.$VerificationTokenPayload, S>

  type VerificationTokenCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<VerificationTokenFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: VerificationTokenCountAggregateInputType | true
    }

  export interface VerificationTokenDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['VerificationToken'], meta: { name: 'VerificationToken' } }
    /**
     * Find zero or one VerificationToken that matches the filter.
     * @param {VerificationTokenFindUniqueArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends VerificationTokenFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenFindUniqueArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one VerificationToken that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {VerificationTokenFindUniqueOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends VerificationTokenFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindFirstArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first VerificationToken that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindFirstOrThrowArgs} args - Arguments to find a VerificationToken
     * @example
     * // Get one VerificationToken
     * const verificationToken = await prisma.verificationToken.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends VerificationTokenFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more VerificationTokens that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany()
     * 
     * // Get first 10 VerificationTokens
     * const verificationTokens = await prisma.verificationToken.findMany({ take: 10 })
     * 
     * // Only select the `identifier`
     * const verificationTokenWithIdentifierOnly = await prisma.verificationToken.findMany({ select: { identifier: true } })
     * 
    **/
    findMany<T extends VerificationTokenFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a VerificationToken.
     * @param {VerificationTokenCreateArgs} args - Arguments to create a VerificationToken.
     * @example
     * // Create one VerificationToken
     * const VerificationToken = await prisma.verificationToken.create({
     *   data: {
     *     // ... data to create a VerificationToken
     *   }
     * })
     * 
    **/
    create<T extends VerificationTokenCreateArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenCreateArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many VerificationTokens.
     *     @param {VerificationTokenCreateManyArgs} args - Arguments to create many VerificationTokens.
     *     @example
     *     // Create many VerificationTokens
     *     const verificationToken = await prisma.verificationToken.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends VerificationTokenCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a VerificationToken.
     * @param {VerificationTokenDeleteArgs} args - Arguments to delete one VerificationToken.
     * @example
     * // Delete one VerificationToken
     * const VerificationToken = await prisma.verificationToken.delete({
     *   where: {
     *     // ... filter to delete one VerificationToken
     *   }
     * })
     * 
    **/
    delete<T extends VerificationTokenDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenDeleteArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one VerificationToken.
     * @param {VerificationTokenUpdateArgs} args - Arguments to update one VerificationToken.
     * @example
     * // Update one VerificationToken
     * const verificationToken = await prisma.verificationToken.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends VerificationTokenUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpdateArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more VerificationTokens.
     * @param {VerificationTokenDeleteManyArgs} args - Arguments to filter VerificationTokens to delete.
     * @example
     * // Delete a few VerificationTokens
     * const { count } = await prisma.verificationToken.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends VerificationTokenDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, VerificationTokenDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many VerificationTokens
     * const verificationToken = await prisma.verificationToken.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends VerificationTokenUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one VerificationToken.
     * @param {VerificationTokenUpsertArgs} args - Arguments to update or create a VerificationToken.
     * @example
     * // Update or create a VerificationToken
     * const verificationToken = await prisma.verificationToken.upsert({
     *   create: {
     *     // ... data to create a VerificationToken
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the VerificationToken we want to update
     *   }
     * })
    **/
    upsert<T extends VerificationTokenUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, VerificationTokenUpsertArgs<ExtArgs>>
    ): Prisma__VerificationTokenClient<$Result.GetResult<Prisma.$VerificationTokenPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of VerificationTokens.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenCountArgs} args - Arguments to filter VerificationTokens to count.
     * @example
     * // Count the number of VerificationTokens
     * const count = await prisma.verificationToken.count({
     *   where: {
     *     // ... the filter for the VerificationTokens we want to count
     *   }
     * })
    **/
    count<T extends VerificationTokenCountArgs>(
      args?: Subset<T, VerificationTokenCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], VerificationTokenCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends VerificationTokenAggregateArgs>(args: Subset<T, VerificationTokenAggregateArgs>): Prisma.PrismaPromise<GetVerificationTokenAggregateType<T>>

    /**
     * Group by VerificationToken.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {VerificationTokenGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends VerificationTokenGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: VerificationTokenGroupByArgs['orderBy'] }
        : { orderBy?: VerificationTokenGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, VerificationTokenGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetVerificationTokenGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the VerificationToken model
   */
  readonly fields: VerificationTokenFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for VerificationToken.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__VerificationTokenClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';


    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the VerificationToken model
   */ 
  interface VerificationTokenFieldRefs {
    readonly identifier: FieldRef<"VerificationToken", 'String'>
    readonly token: FieldRef<"VerificationToken", 'String'>
    readonly expires: FieldRef<"VerificationToken", 'DateTime'>
  }
    

  // Custom InputTypes
  /**
   * VerificationToken findUnique
   */
  export type VerificationTokenFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findUniqueOrThrow
   */
  export type VerificationTokenFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken findFirst
   */
  export type VerificationTokenFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findFirstOrThrow
   */
  export type VerificationTokenFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationToken to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of VerificationTokens.
     */
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken findMany
   */
  export type VerificationTokenFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter, which VerificationTokens to fetch.
     */
    where?: VerificationTokenWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of VerificationTokens to fetch.
     */
    orderBy?: VerificationTokenOrderByWithRelationInput | VerificationTokenOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing VerificationTokens.
     */
    cursor?: VerificationTokenWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` VerificationTokens from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` VerificationTokens.
     */
    skip?: number
    distinct?: VerificationTokenScalarFieldEnum | VerificationTokenScalarFieldEnum[]
  }

  /**
   * VerificationToken create
   */
  export type VerificationTokenCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to create a VerificationToken.
     */
    data: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
  }

  /**
   * VerificationToken createMany
   */
  export type VerificationTokenCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many VerificationTokens.
     */
    data: VerificationTokenCreateManyInput | VerificationTokenCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * VerificationToken update
   */
  export type VerificationTokenUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The data needed to update a VerificationToken.
     */
    data: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
    /**
     * Choose, which VerificationToken to update.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken updateMany
   */
  export type VerificationTokenUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update VerificationTokens.
     */
    data: XOR<VerificationTokenUpdateManyMutationInput, VerificationTokenUncheckedUpdateManyInput>
    /**
     * Filter which VerificationTokens to update
     */
    where?: VerificationTokenWhereInput
  }

  /**
   * VerificationToken upsert
   */
  export type VerificationTokenUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * The filter to search for the VerificationToken to update in case it exists.
     */
    where: VerificationTokenWhereUniqueInput
    /**
     * In case the VerificationToken found by the `where` argument doesn't exist, create a new VerificationToken with this data.
     */
    create: XOR<VerificationTokenCreateInput, VerificationTokenUncheckedCreateInput>
    /**
     * In case the VerificationToken was found with the provided `where` argument, update it with this data.
     */
    update: XOR<VerificationTokenUpdateInput, VerificationTokenUncheckedUpdateInput>
  }

  /**
   * VerificationToken delete
   */
  export type VerificationTokenDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
    /**
     * Filter which VerificationToken to delete.
     */
    where: VerificationTokenWhereUniqueInput
  }

  /**
   * VerificationToken deleteMany
   */
  export type VerificationTokenDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which VerificationTokens to delete
     */
    where?: VerificationTokenWhereInput
  }

  /**
   * VerificationToken without action
   */
  export type VerificationTokenDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the VerificationToken
     */
    select?: VerificationTokenSelect<ExtArgs> | null
  }


  /**
   * Model Post
   */

  export type AggregatePost = {
    _count: PostCountAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  export type PostMinAggregateOutputType = {
    id: string | null
    content: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    shareParentId: string | null
    communityId: string | null
    link: string | null
  }

  export type PostMaxAggregateOutputType = {
    id: string | null
    content: string | null
    userId: string | null
    createdAt: Date | null
    updatedAt: Date | null
    isDeleted: boolean | null
    shareParentId: string | null
    communityId: string | null
    link: string | null
  }

  export type PostCountAggregateOutputType = {
    id: number
    content: number
    userId: number
    createdAt: number
    updatedAt: number
    isDeleted: number
    shareParentId: number
    communityId: number
    link: number
    _all: number
  }


  export type PostMinAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    shareParentId?: true
    communityId?: true
    link?: true
  }

  export type PostMaxAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    shareParentId?: true
    communityId?: true
    link?: true
  }

  export type PostCountAggregateInputType = {
    id?: true
    content?: true
    userId?: true
    createdAt?: true
    updatedAt?: true
    isDeleted?: true
    shareParentId?: true
    communityId?: true
    link?: true
    _all?: true
  }

  export type PostAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Post to aggregate.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Posts
    **/
    _count?: true | PostCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostMaxAggregateInputType
  }

  export type GetPostAggregateType<T extends PostAggregateArgs> = {
        [P in keyof T & keyof AggregatePost]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePost[P]>
      : GetScalarType<T[P], AggregatePost[P]>
  }




  export type PostGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostWhereInput
    orderBy?: PostOrderByWithAggregationInput | PostOrderByWithAggregationInput[]
    by: PostScalarFieldEnum[] | PostScalarFieldEnum
    having?: PostScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostCountAggregateInputType | true
    _min?: PostMinAggregateInputType
    _max?: PostMaxAggregateInputType
  }

  export type PostGroupByOutputType = {
    id: string
    content: string | null
    userId: string
    createdAt: Date
    updatedAt: Date
    isDeleted: boolean
    shareParentId: string | null
    communityId: string | null
    link: string | null
    _count: PostCountAggregateOutputType | null
    _min: PostMinAggregateOutputType | null
    _max: PostMaxAggregateOutputType | null
  }

  type GetPostGroupByPayload<T extends PostGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostGroupByOutputType[P]>
            : GetScalarType<T[P], PostGroupByOutputType[P]>
        }
      >
    >


  export type PostSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    content?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    shareParentId?: boolean
    communityId?: boolean
    link?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    comments?: boolean | Post$commentsArgs<ExtArgs>
    likes?: boolean | Post$likesArgs<ExtArgs>
    bookmarkedBy?: boolean | Post$bookmarkedByArgs<ExtArgs>
    images?: boolean | Post$imagesArgs<ExtArgs>
    tags?: boolean | Post$tagsArgs<ExtArgs>
    shareParent?: boolean | Post$shareParentArgs<ExtArgs>
    shares?: boolean | Post$sharesArgs<ExtArgs>
    community?: boolean | Post$communityArgs<ExtArgs>
    mentions?: boolean | Post$mentionsArgs<ExtArgs>
    sharedBy?: boolean | Post$sharedByArgs<ExtArgs>
    NotificationMention?: boolean | Post$NotificationMentionArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["post"]>

  export type PostSelectScalar = {
    id?: boolean
    content?: boolean
    userId?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    isDeleted?: boolean
    shareParentId?: boolean
    communityId?: boolean
    link?: boolean
  }


  export type PostInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    comments?: boolean | Post$commentsArgs<ExtArgs>
    likes?: boolean | Post$likesArgs<ExtArgs>
    bookmarkedBy?: boolean | Post$bookmarkedByArgs<ExtArgs>
    images?: boolean | Post$imagesArgs<ExtArgs>
    tags?: boolean | Post$tagsArgs<ExtArgs>
    shareParent?: boolean | Post$shareParentArgs<ExtArgs>
    shares?: boolean | Post$sharesArgs<ExtArgs>
    community?: boolean | Post$communityArgs<ExtArgs>
    mentions?: boolean | Post$mentionsArgs<ExtArgs>
    sharedBy?: boolean | Post$sharedByArgs<ExtArgs>
    NotificationMention?: boolean | Post$NotificationMentionArgs<ExtArgs>
    _count?: boolean | PostCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $PostPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Post"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      comments: Prisma.$CommentPayload<ExtArgs>[]
      likes: Prisma.$PostLikePayload<ExtArgs>[]
      bookmarkedBy: Prisma.$BookmarkPayload<ExtArgs>[]
      images: Prisma.$ImagePayload<ExtArgs>[]
      tags: Prisma.$PostTagPayload<ExtArgs>[]
      shareParent: Prisma.$PostPayload<ExtArgs> | null
      shares: Prisma.$PostPayload<ExtArgs>[]
      community: Prisma.$CommunityPayload<ExtArgs> | null
      mentions: Prisma.$MentionPayload<ExtArgs>[]
      sharedBy: Prisma.$UserSharePayload<ExtArgs>[]
      NotificationMention: Prisma.$NotificationMentionPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      content: string | null
      userId: string
      createdAt: Date
      updatedAt: Date
      isDeleted: boolean
      shareParentId: string | null
      communityId: string | null
      link: string | null
    }, ExtArgs["result"]["post"]>
    composites: {}
  }


  type PostGetPayload<S extends boolean | null | undefined | PostDefaultArgs> = $Result.GetResult<Prisma.$PostPayload, S>

  type PostCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PostFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PostCountAggregateInputType | true
    }

  export interface PostDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Post'], meta: { name: 'Post' } }
    /**
     * Find zero or one Post that matches the filter.
     * @param {PostFindUniqueArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PostFindUniqueArgs<ExtArgs>>
    ): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Post that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PostFindUniqueOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PostFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PostFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Post that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PostFindFirstArgs<ExtArgs>>
    ): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Post that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindFirstOrThrowArgs} args - Arguments to find a Post
     * @example
     * // Get one Post
     * const post = await prisma.post.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PostFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PostFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Posts that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Posts
     * const posts = await prisma.post.findMany()
     * 
     * // Get first 10 Posts
     * const posts = await prisma.post.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const postWithIdOnly = await prisma.post.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends PostFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PostFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Post.
     * @param {PostCreateArgs} args - Arguments to create a Post.
     * @example
     * // Create one Post
     * const Post = await prisma.post.create({
     *   data: {
     *     // ... data to create a Post
     *   }
     * })
     * 
    **/
    create<T extends PostCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PostCreateArgs<ExtArgs>>
    ): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Posts.
     *     @param {PostCreateManyArgs} args - Arguments to create many Posts.
     *     @example
     *     // Create many Posts
     *     const post = await prisma.post.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PostCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PostCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Post.
     * @param {PostDeleteArgs} args - Arguments to delete one Post.
     * @example
     * // Delete one Post
     * const Post = await prisma.post.delete({
     *   where: {
     *     // ... filter to delete one Post
     *   }
     * })
     * 
    **/
    delete<T extends PostDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PostDeleteArgs<ExtArgs>>
    ): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Post.
     * @param {PostUpdateArgs} args - Arguments to update one Post.
     * @example
     * // Update one Post
     * const post = await prisma.post.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PostUpdateArgs<ExtArgs>>
    ): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Posts.
     * @param {PostDeleteManyArgs} args - Arguments to filter Posts to delete.
     * @example
     * // Delete a few Posts
     * const { count } = await prisma.post.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PostDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Posts
     * const post = await prisma.post.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PostUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Post.
     * @param {PostUpsertArgs} args - Arguments to update or create a Post.
     * @example
     * // Update or create a Post
     * const post = await prisma.post.upsert({
     *   create: {
     *     // ... data to create a Post
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Post we want to update
     *   }
     * })
    **/
    upsert<T extends PostUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PostUpsertArgs<ExtArgs>>
    ): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Posts.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostCountArgs} args - Arguments to filter Posts to count.
     * @example
     * // Count the number of Posts
     * const count = await prisma.post.count({
     *   where: {
     *     // ... the filter for the Posts we want to count
     *   }
     * })
    **/
    count<T extends PostCountArgs>(
      args?: Subset<T, PostCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostAggregateArgs>(args: Subset<T, PostAggregateArgs>): Prisma.PrismaPromise<GetPostAggregateType<T>>

    /**
     * Group by Post.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostGroupByArgs['orderBy'] }
        : { orderBy?: PostGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Post model
   */
  readonly fields: PostFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Post.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    comments<T extends Post$commentsArgs<ExtArgs> = {}>(args?: Subset<T, Post$commentsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'> | Null>;

    likes<T extends Post$likesArgs<ExtArgs> = {}>(args?: Subset<T, Post$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, 'findMany'> | Null>;

    bookmarkedBy<T extends Post$bookmarkedByArgs<ExtArgs> = {}>(args?: Subset<T, Post$bookmarkedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'findMany'> | Null>;

    images<T extends Post$imagesArgs<ExtArgs> = {}>(args?: Subset<T, Post$imagesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findMany'> | Null>;

    tags<T extends Post$tagsArgs<ExtArgs> = {}>(args?: Subset<T, Post$tagsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'findMany'> | Null>;

    shareParent<T extends Post$shareParentArgs<ExtArgs> = {}>(args?: Subset<T, Post$shareParentArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    shares<T extends Post$sharesArgs<ExtArgs> = {}>(args?: Subset<T, Post$sharesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findMany'> | Null>;

    community<T extends Post$communityArgs<ExtArgs> = {}>(args?: Subset<T, Post$communityArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    mentions<T extends Post$mentionsArgs<ExtArgs> = {}>(args?: Subset<T, Post$mentionsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MentionPayload<ExtArgs>, T, 'findMany'> | Null>;

    sharedBy<T extends Post$sharedByArgs<ExtArgs> = {}>(args?: Subset<T, Post$sharedByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSharePayload<ExtArgs>, T, 'findMany'> | Null>;

    NotificationMention<T extends Post$NotificationMentionArgs<ExtArgs> = {}>(args?: Subset<T, Post$NotificationMentionArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationMentionPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Post model
   */ 
  interface PostFieldRefs {
    readonly id: FieldRef<"Post", 'String'>
    readonly content: FieldRef<"Post", 'String'>
    readonly userId: FieldRef<"Post", 'String'>
    readonly createdAt: FieldRef<"Post", 'DateTime'>
    readonly updatedAt: FieldRef<"Post", 'DateTime'>
    readonly isDeleted: FieldRef<"Post", 'Boolean'>
    readonly shareParentId: FieldRef<"Post", 'String'>
    readonly communityId: FieldRef<"Post", 'String'>
    readonly link: FieldRef<"Post", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Post findUnique
   */
  export type PostFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findUniqueOrThrow
   */
  export type PostFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post findFirst
   */
  export type PostFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findFirstOrThrow
   */
  export type PostFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Post to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Posts.
     */
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post findMany
   */
  export type PostFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter, which Posts to fetch.
     */
    where?: PostWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Posts to fetch.
     */
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Posts.
     */
    cursor?: PostWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Posts from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Posts.
     */
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post create
   */
  export type PostCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to create a Post.
     */
    data: XOR<PostCreateInput, PostUncheckedCreateInput>
  }

  /**
   * Post createMany
   */
  export type PostCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Posts.
     */
    data: PostCreateManyInput | PostCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Post update
   */
  export type PostUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The data needed to update a Post.
     */
    data: XOR<PostUpdateInput, PostUncheckedUpdateInput>
    /**
     * Choose, which Post to update.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post updateMany
   */
  export type PostUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Posts.
     */
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyInput>
    /**
     * Filter which Posts to update
     */
    where?: PostWhereInput
  }

  /**
   * Post upsert
   */
  export type PostUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * The filter to search for the Post to update in case it exists.
     */
    where: PostWhereUniqueInput
    /**
     * In case the Post found by the `where` argument doesn't exist, create a new Post with this data.
     */
    create: XOR<PostCreateInput, PostUncheckedCreateInput>
    /**
     * In case the Post was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostUpdateInput, PostUncheckedUpdateInput>
  }

  /**
   * Post delete
   */
  export type PostDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    /**
     * Filter which Post to delete.
     */
    where: PostWhereUniqueInput
  }

  /**
   * Post deleteMany
   */
  export type PostDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Posts to delete
     */
    where?: PostWhereInput
  }

  /**
   * Post.comments
   */
  export type Post$commentsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Post.likes
   */
  export type Post$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    where?: PostLikeWhereInput
    orderBy?: PostLikeOrderByWithRelationInput | PostLikeOrderByWithRelationInput[]
    cursor?: PostLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostLikeScalarFieldEnum | PostLikeScalarFieldEnum[]
  }

  /**
   * Post.bookmarkedBy
   */
  export type Post$bookmarkedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    where?: BookmarkWhereInput
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    cursor?: BookmarkWhereUniqueInput
    take?: number
    skip?: number
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * Post.images
   */
  export type Post$imagesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    cursor?: ImageWhereUniqueInput
    take?: number
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Post.tags
   */
  export type Post$tagsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null
    where?: PostTagWhereInput
    orderBy?: PostTagOrderByWithRelationInput | PostTagOrderByWithRelationInput[]
    cursor?: PostTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostTagScalarFieldEnum | PostTagScalarFieldEnum[]
  }

  /**
   * Post.shareParent
   */
  export type Post$shareParentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
  }

  /**
   * Post.shares
   */
  export type Post$sharesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Post.community
   */
  export type Post$communityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    where?: CommunityWhereInput
  }

  /**
   * Post.mentions
   */
  export type Post$mentionsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mention
     */
    select?: MentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MentionInclude<ExtArgs> | null
    where?: MentionWhereInput
    orderBy?: MentionOrderByWithRelationInput | MentionOrderByWithRelationInput[]
    cursor?: MentionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: MentionScalarFieldEnum | MentionScalarFieldEnum[]
  }

  /**
   * Post.sharedBy
   */
  export type Post$sharedByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShare
     */
    select?: UserShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShareInclude<ExtArgs> | null
    where?: UserShareWhereInput
    orderBy?: UserShareOrderByWithRelationInput | UserShareOrderByWithRelationInput[]
    cursor?: UserShareWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserShareScalarFieldEnum | UserShareScalarFieldEnum[]
  }

  /**
   * Post.NotificationMention
   */
  export type Post$NotificationMentionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationMention
     */
    select?: NotificationMentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationMentionInclude<ExtArgs> | null
    where?: NotificationMentionWhereInput
    orderBy?: NotificationMentionOrderByWithRelationInput | NotificationMentionOrderByWithRelationInput[]
    cursor?: NotificationMentionWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationMentionScalarFieldEnum | NotificationMentionScalarFieldEnum[]
  }

  /**
   * Post without action
   */
  export type PostDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
  }


  /**
   * Model Mention
   */

  export type AggregateMention = {
    _count: MentionCountAggregateOutputType | null
    _min: MentionMinAggregateOutputType | null
    _max: MentionMaxAggregateOutputType | null
  }

  export type MentionMinAggregateOutputType = {
    userId: string | null
    postId: string | null
  }

  export type MentionMaxAggregateOutputType = {
    userId: string | null
    postId: string | null
  }

  export type MentionCountAggregateOutputType = {
    userId: number
    postId: number
    _all: number
  }


  export type MentionMinAggregateInputType = {
    userId?: true
    postId?: true
  }

  export type MentionMaxAggregateInputType = {
    userId?: true
    postId?: true
  }

  export type MentionCountAggregateInputType = {
    userId?: true
    postId?: true
    _all?: true
  }

  export type MentionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mention to aggregate.
     */
    where?: MentionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mentions to fetch.
     */
    orderBy?: MentionOrderByWithRelationInput | MentionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: MentionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mentions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mentions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Mentions
    **/
    _count?: true | MentionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: MentionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: MentionMaxAggregateInputType
  }

  export type GetMentionAggregateType<T extends MentionAggregateArgs> = {
        [P in keyof T & keyof AggregateMention]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateMention[P]>
      : GetScalarType<T[P], AggregateMention[P]>
  }




  export type MentionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: MentionWhereInput
    orderBy?: MentionOrderByWithAggregationInput | MentionOrderByWithAggregationInput[]
    by: MentionScalarFieldEnum[] | MentionScalarFieldEnum
    having?: MentionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: MentionCountAggregateInputType | true
    _min?: MentionMinAggregateInputType
    _max?: MentionMaxAggregateInputType
  }

  export type MentionGroupByOutputType = {
    userId: string
    postId: string
    _count: MentionCountAggregateOutputType | null
    _min: MentionMinAggregateOutputType | null
    _max: MentionMaxAggregateOutputType | null
  }

  type GetMentionGroupByPayload<T extends MentionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<MentionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof MentionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], MentionGroupByOutputType[P]>
            : GetScalarType<T[P], MentionGroupByOutputType[P]>
        }
      >
    >


  export type MentionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    postId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["mention"]>

  export type MentionSelectScalar = {
    userId?: boolean
    postId?: boolean
  }


  export type MentionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }


  export type $MentionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Mention"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      postId: string
    }, ExtArgs["result"]["mention"]>
    composites: {}
  }


  type MentionGetPayload<S extends boolean | null | undefined | MentionDefaultArgs> = $Result.GetResult<Prisma.$MentionPayload, S>

  type MentionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<MentionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: MentionCountAggregateInputType | true
    }

  export interface MentionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Mention'], meta: { name: 'Mention' } }
    /**
     * Find zero or one Mention that matches the filter.
     * @param {MentionFindUniqueArgs} args - Arguments to find a Mention
     * @example
     * // Get one Mention
     * const mention = await prisma.mention.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends MentionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, MentionFindUniqueArgs<ExtArgs>>
    ): Prisma__MentionClient<$Result.GetResult<Prisma.$MentionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Mention that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {MentionFindUniqueOrThrowArgs} args - Arguments to find a Mention
     * @example
     * // Get one Mention
     * const mention = await prisma.mention.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends MentionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MentionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__MentionClient<$Result.GetResult<Prisma.$MentionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Mention that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MentionFindFirstArgs} args - Arguments to find a Mention
     * @example
     * // Get one Mention
     * const mention = await prisma.mention.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends MentionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, MentionFindFirstArgs<ExtArgs>>
    ): Prisma__MentionClient<$Result.GetResult<Prisma.$MentionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Mention that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MentionFindFirstOrThrowArgs} args - Arguments to find a Mention
     * @example
     * // Get one Mention
     * const mention = await prisma.mention.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends MentionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, MentionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__MentionClient<$Result.GetResult<Prisma.$MentionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Mentions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MentionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Mentions
     * const mentions = await prisma.mention.findMany()
     * 
     * // Get first 10 Mentions
     * const mentions = await prisma.mention.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const mentionWithUserIdOnly = await prisma.mention.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends MentionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MentionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$MentionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Mention.
     * @param {MentionCreateArgs} args - Arguments to create a Mention.
     * @example
     * // Create one Mention
     * const Mention = await prisma.mention.create({
     *   data: {
     *     // ... data to create a Mention
     *   }
     * })
     * 
    **/
    create<T extends MentionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, MentionCreateArgs<ExtArgs>>
    ): Prisma__MentionClient<$Result.GetResult<Prisma.$MentionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Mentions.
     *     @param {MentionCreateManyArgs} args - Arguments to create many Mentions.
     *     @example
     *     // Create many Mentions
     *     const mention = await prisma.mention.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends MentionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MentionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Mention.
     * @param {MentionDeleteArgs} args - Arguments to delete one Mention.
     * @example
     * // Delete one Mention
     * const Mention = await prisma.mention.delete({
     *   where: {
     *     // ... filter to delete one Mention
     *   }
     * })
     * 
    **/
    delete<T extends MentionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, MentionDeleteArgs<ExtArgs>>
    ): Prisma__MentionClient<$Result.GetResult<Prisma.$MentionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Mention.
     * @param {MentionUpdateArgs} args - Arguments to update one Mention.
     * @example
     * // Update one Mention
     * const mention = await prisma.mention.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends MentionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, MentionUpdateArgs<ExtArgs>>
    ): Prisma__MentionClient<$Result.GetResult<Prisma.$MentionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Mentions.
     * @param {MentionDeleteManyArgs} args - Arguments to filter Mentions to delete.
     * @example
     * // Delete a few Mentions
     * const { count } = await prisma.mention.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends MentionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, MentionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Mentions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MentionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Mentions
     * const mention = await prisma.mention.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends MentionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, MentionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Mention.
     * @param {MentionUpsertArgs} args - Arguments to update or create a Mention.
     * @example
     * // Update or create a Mention
     * const mention = await prisma.mention.upsert({
     *   create: {
     *     // ... data to create a Mention
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Mention we want to update
     *   }
     * })
    **/
    upsert<T extends MentionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, MentionUpsertArgs<ExtArgs>>
    ): Prisma__MentionClient<$Result.GetResult<Prisma.$MentionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Mentions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MentionCountArgs} args - Arguments to filter Mentions to count.
     * @example
     * // Count the number of Mentions
     * const count = await prisma.mention.count({
     *   where: {
     *     // ... the filter for the Mentions we want to count
     *   }
     * })
    **/
    count<T extends MentionCountArgs>(
      args?: Subset<T, MentionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], MentionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Mention.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MentionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends MentionAggregateArgs>(args: Subset<T, MentionAggregateArgs>): Prisma.PrismaPromise<GetMentionAggregateType<T>>

    /**
     * Group by Mention.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {MentionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends MentionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: MentionGroupByArgs['orderBy'] }
        : { orderBy?: MentionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, MentionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetMentionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Mention model
   */
  readonly fields: MentionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Mention.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__MentionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Mention model
   */ 
  interface MentionFieldRefs {
    readonly userId: FieldRef<"Mention", 'String'>
    readonly postId: FieldRef<"Mention", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Mention findUnique
   */
  export type MentionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mention
     */
    select?: MentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MentionInclude<ExtArgs> | null
    /**
     * Filter, which Mention to fetch.
     */
    where: MentionWhereUniqueInput
  }

  /**
   * Mention findUniqueOrThrow
   */
  export type MentionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mention
     */
    select?: MentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MentionInclude<ExtArgs> | null
    /**
     * Filter, which Mention to fetch.
     */
    where: MentionWhereUniqueInput
  }

  /**
   * Mention findFirst
   */
  export type MentionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mention
     */
    select?: MentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MentionInclude<ExtArgs> | null
    /**
     * Filter, which Mention to fetch.
     */
    where?: MentionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mentions to fetch.
     */
    orderBy?: MentionOrderByWithRelationInput | MentionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mentions.
     */
    cursor?: MentionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mentions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mentions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mentions.
     */
    distinct?: MentionScalarFieldEnum | MentionScalarFieldEnum[]
  }

  /**
   * Mention findFirstOrThrow
   */
  export type MentionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mention
     */
    select?: MentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MentionInclude<ExtArgs> | null
    /**
     * Filter, which Mention to fetch.
     */
    where?: MentionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mentions to fetch.
     */
    orderBy?: MentionOrderByWithRelationInput | MentionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Mentions.
     */
    cursor?: MentionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mentions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mentions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Mentions.
     */
    distinct?: MentionScalarFieldEnum | MentionScalarFieldEnum[]
  }

  /**
   * Mention findMany
   */
  export type MentionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mention
     */
    select?: MentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MentionInclude<ExtArgs> | null
    /**
     * Filter, which Mentions to fetch.
     */
    where?: MentionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Mentions to fetch.
     */
    orderBy?: MentionOrderByWithRelationInput | MentionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Mentions.
     */
    cursor?: MentionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Mentions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Mentions.
     */
    skip?: number
    distinct?: MentionScalarFieldEnum | MentionScalarFieldEnum[]
  }

  /**
   * Mention create
   */
  export type MentionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mention
     */
    select?: MentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MentionInclude<ExtArgs> | null
    /**
     * The data needed to create a Mention.
     */
    data: XOR<MentionCreateInput, MentionUncheckedCreateInput>
  }

  /**
   * Mention createMany
   */
  export type MentionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Mentions.
     */
    data: MentionCreateManyInput | MentionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Mention update
   */
  export type MentionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mention
     */
    select?: MentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MentionInclude<ExtArgs> | null
    /**
     * The data needed to update a Mention.
     */
    data: XOR<MentionUpdateInput, MentionUncheckedUpdateInput>
    /**
     * Choose, which Mention to update.
     */
    where: MentionWhereUniqueInput
  }

  /**
   * Mention updateMany
   */
  export type MentionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Mentions.
     */
    data: XOR<MentionUpdateManyMutationInput, MentionUncheckedUpdateManyInput>
    /**
     * Filter which Mentions to update
     */
    where?: MentionWhereInput
  }

  /**
   * Mention upsert
   */
  export type MentionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mention
     */
    select?: MentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MentionInclude<ExtArgs> | null
    /**
     * The filter to search for the Mention to update in case it exists.
     */
    where: MentionWhereUniqueInput
    /**
     * In case the Mention found by the `where` argument doesn't exist, create a new Mention with this data.
     */
    create: XOR<MentionCreateInput, MentionUncheckedCreateInput>
    /**
     * In case the Mention was found with the provided `where` argument, update it with this data.
     */
    update: XOR<MentionUpdateInput, MentionUncheckedUpdateInput>
  }

  /**
   * Mention delete
   */
  export type MentionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mention
     */
    select?: MentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MentionInclude<ExtArgs> | null
    /**
     * Filter which Mention to delete.
     */
    where: MentionWhereUniqueInput
  }

  /**
   * Mention deleteMany
   */
  export type MentionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Mentions to delete
     */
    where?: MentionWhereInput
  }

  /**
   * Mention without action
   */
  export type MentionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Mention
     */
    select?: MentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: MentionInclude<ExtArgs> | null
  }


  /**
   * Model Notification
   */

  export type AggregateNotification = {
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  export type NotificationMinAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    isRead: boolean | null
    userId: string | null
  }

  export type NotificationMaxAggregateOutputType = {
    id: string | null
    createdAt: Date | null
    isRead: boolean | null
    userId: string | null
  }

  export type NotificationCountAggregateOutputType = {
    id: number
    createdAt: number
    isRead: number
    userId: number
    _all: number
  }


  export type NotificationMinAggregateInputType = {
    id?: true
    createdAt?: true
    isRead?: true
    userId?: true
  }

  export type NotificationMaxAggregateInputType = {
    id?: true
    createdAt?: true
    isRead?: true
    userId?: true
  }

  export type NotificationCountAggregateInputType = {
    id?: true
    createdAt?: true
    isRead?: true
    userId?: true
    _all?: true
  }

  export type NotificationAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notification to aggregate.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Notifications
    **/
    _count?: true | NotificationCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMaxAggregateInputType
  }

  export type GetNotificationAggregateType<T extends NotificationAggregateArgs> = {
        [P in keyof T & keyof AggregateNotification]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotification[P]>
      : GetScalarType<T[P], AggregateNotification[P]>
  }




  export type NotificationGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationWhereInput
    orderBy?: NotificationOrderByWithAggregationInput | NotificationOrderByWithAggregationInput[]
    by: NotificationScalarFieldEnum[] | NotificationScalarFieldEnum
    having?: NotificationScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCountAggregateInputType | true
    _min?: NotificationMinAggregateInputType
    _max?: NotificationMaxAggregateInputType
  }

  export type NotificationGroupByOutputType = {
    id: string
    createdAt: Date
    isRead: boolean
    userId: string
    _count: NotificationCountAggregateOutputType | null
    _min: NotificationMinAggregateOutputType | null
    _max: NotificationMaxAggregateOutputType | null
  }

  type GetNotificationGroupByPayload<T extends NotificationGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationGroupByOutputType[P]>
        }
      >
    >


  export type NotificationSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    createdAt?: boolean
    isRead?: boolean
    userId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    notificationMention?: boolean | Notification$notificationMentionArgs<ExtArgs>
    notificationStartFollow?: boolean | Notification$notificationStartFollowArgs<ExtArgs>
    notificationCommunityNewMember?: boolean | Notification$notificationCommunityNewMemberArgs<ExtArgs>
    notificationPostComment?: boolean | Notification$notificationPostCommentArgs<ExtArgs>
    notificationCommentReply?: boolean | Notification$notificationCommentReplyArgs<ExtArgs>
  }, ExtArgs["result"]["notification"]>

  export type NotificationSelectScalar = {
    id?: boolean
    createdAt?: boolean
    isRead?: boolean
    userId?: boolean
  }


  export type NotificationInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    notificationMention?: boolean | Notification$notificationMentionArgs<ExtArgs>
    notificationStartFollow?: boolean | Notification$notificationStartFollowArgs<ExtArgs>
    notificationCommunityNewMember?: boolean | Notification$notificationCommunityNewMemberArgs<ExtArgs>
    notificationPostComment?: boolean | Notification$notificationPostCommentArgs<ExtArgs>
    notificationCommentReply?: boolean | Notification$notificationCommentReplyArgs<ExtArgs>
  }


  export type $NotificationPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Notification"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      notificationMention: Prisma.$NotificationMentionPayload<ExtArgs> | null
      notificationStartFollow: Prisma.$NotificationStartFollowPayload<ExtArgs> | null
      notificationCommunityNewMember: Prisma.$NotificationCommunityNewMemberPayload<ExtArgs> | null
      notificationPostComment: Prisma.$NotificationPostCommentPayload<ExtArgs> | null
      notificationCommentReply: Prisma.$NotificationCommentReplyPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      createdAt: Date
      isRead: boolean
      userId: string
    }, ExtArgs["result"]["notification"]>
    composites: {}
  }


  type NotificationGetPayload<S extends boolean | null | undefined | NotificationDefaultArgs> = $Result.GetResult<Prisma.$NotificationPayload, S>

  type NotificationCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCountAggregateInputType | true
    }

  export interface NotificationDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Notification'], meta: { name: 'Notification' } }
    /**
     * Find zero or one Notification that matches the filter.
     * @param {NotificationFindUniqueArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationFindUniqueArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Notification that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationFindUniqueOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Notification that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindFirstArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Notification that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindFirstOrThrowArgs} args - Arguments to find a Notification
     * @example
     * // Get one Notification
     * const notification = await prisma.notification.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Notifications that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Notifications
     * const notifications = await prisma.notification.findMany()
     * 
     * // Get first 10 Notifications
     * const notifications = await prisma.notification.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationWithIdOnly = await prisma.notification.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificationFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Notification.
     * @param {NotificationCreateArgs} args - Arguments to create a Notification.
     * @example
     * // Create one Notification
     * const Notification = await prisma.notification.create({
     *   data: {
     *     // ... data to create a Notification
     *   }
     * })
     * 
    **/
    create<T extends NotificationCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCreateArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Notifications.
     *     @param {NotificationCreateManyArgs} args - Arguments to create many Notifications.
     *     @example
     *     // Create many Notifications
     *     const notification = await prisma.notification.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Notification.
     * @param {NotificationDeleteArgs} args - Arguments to delete one Notification.
     * @example
     * // Delete one Notification
     * const Notification = await prisma.notification.delete({
     *   where: {
     *     // ... filter to delete one Notification
     *   }
     * })
     * 
    **/
    delete<T extends NotificationDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationDeleteArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Notification.
     * @param {NotificationUpdateArgs} args - Arguments to update one Notification.
     * @example
     * // Update one Notification
     * const notification = await prisma.notification.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpdateArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Notifications.
     * @param {NotificationDeleteManyArgs} args - Arguments to filter Notifications to delete.
     * @example
     * // Delete a few Notifications
     * const { count } = await prisma.notification.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Notifications
     * const notification = await prisma.notification.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Notification.
     * @param {NotificationUpsertArgs} args - Arguments to update or create a Notification.
     * @example
     * // Update or create a Notification
     * const notification = await prisma.notification.upsert({
     *   create: {
     *     // ... data to create a Notification
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Notification we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationUpsertArgs<ExtArgs>>
    ): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Notifications.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCountArgs} args - Arguments to filter Notifications to count.
     * @example
     * // Count the number of Notifications
     * const count = await prisma.notification.count({
     *   where: {
     *     // ... the filter for the Notifications we want to count
     *   }
     * })
    **/
    count<T extends NotificationCountArgs>(
      args?: Subset<T, NotificationCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationAggregateArgs>(args: Subset<T, NotificationAggregateArgs>): Prisma.PrismaPromise<GetNotificationAggregateType<T>>

    /**
     * Group by Notification.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationGroupByArgs['orderBy'] }
        : { orderBy?: NotificationGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Notification model
   */
  readonly fields: NotificationFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Notification.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    notificationMention<T extends Notification$notificationMentionArgs<ExtArgs> = {}>(args?: Subset<T, Notification$notificationMentionArgs<ExtArgs>>): Prisma__NotificationMentionClient<$Result.GetResult<Prisma.$NotificationMentionPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    notificationStartFollow<T extends Notification$notificationStartFollowArgs<ExtArgs> = {}>(args?: Subset<T, Notification$notificationStartFollowArgs<ExtArgs>>): Prisma__NotificationStartFollowClient<$Result.GetResult<Prisma.$NotificationStartFollowPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    notificationCommunityNewMember<T extends Notification$notificationCommunityNewMemberArgs<ExtArgs> = {}>(args?: Subset<T, Notification$notificationCommunityNewMemberArgs<ExtArgs>>): Prisma__NotificationCommunityNewMemberClient<$Result.GetResult<Prisma.$NotificationCommunityNewMemberPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    notificationPostComment<T extends Notification$notificationPostCommentArgs<ExtArgs> = {}>(args?: Subset<T, Notification$notificationPostCommentArgs<ExtArgs>>): Prisma__NotificationPostCommentClient<$Result.GetResult<Prisma.$NotificationPostCommentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    notificationCommentReply<T extends Notification$notificationCommentReplyArgs<ExtArgs> = {}>(args?: Subset<T, Notification$notificationCommentReplyArgs<ExtArgs>>): Prisma__NotificationCommentReplyClient<$Result.GetResult<Prisma.$NotificationCommentReplyPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Notification model
   */ 
  interface NotificationFieldRefs {
    readonly id: FieldRef<"Notification", 'String'>
    readonly createdAt: FieldRef<"Notification", 'DateTime'>
    readonly isRead: FieldRef<"Notification", 'Boolean'>
    readonly userId: FieldRef<"Notification", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Notification findUnique
   */
  export type NotificationFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findUniqueOrThrow
   */
  export type NotificationFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification findFirst
   */
  export type NotificationFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findFirstOrThrow
   */
  export type NotificationFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notification to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Notifications.
     */
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification findMany
   */
  export type NotificationFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter, which Notifications to fetch.
     */
    where?: NotificationWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Notifications to fetch.
     */
    orderBy?: NotificationOrderByWithRelationInput | NotificationOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Notifications.
     */
    cursor?: NotificationWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Notifications from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Notifications.
     */
    skip?: number
    distinct?: NotificationScalarFieldEnum | NotificationScalarFieldEnum[]
  }

  /**
   * Notification create
   */
  export type NotificationCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to create a Notification.
     */
    data: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
  }

  /**
   * Notification createMany
   */
  export type NotificationCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Notifications.
     */
    data: NotificationCreateManyInput | NotificationCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Notification update
   */
  export type NotificationUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The data needed to update a Notification.
     */
    data: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
    /**
     * Choose, which Notification to update.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification updateMany
   */
  export type NotificationUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Notifications.
     */
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyInput>
    /**
     * Filter which Notifications to update
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification upsert
   */
  export type NotificationUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * The filter to search for the Notification to update in case it exists.
     */
    where: NotificationWhereUniqueInput
    /**
     * In case the Notification found by the `where` argument doesn't exist, create a new Notification with this data.
     */
    create: XOR<NotificationCreateInput, NotificationUncheckedCreateInput>
    /**
     * In case the Notification was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationUpdateInput, NotificationUncheckedUpdateInput>
  }

  /**
   * Notification delete
   */
  export type NotificationDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
    /**
     * Filter which Notification to delete.
     */
    where: NotificationWhereUniqueInput
  }

  /**
   * Notification deleteMany
   */
  export type NotificationDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Notifications to delete
     */
    where?: NotificationWhereInput
  }

  /**
   * Notification.notificationMention
   */
  export type Notification$notificationMentionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationMention
     */
    select?: NotificationMentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationMentionInclude<ExtArgs> | null
    where?: NotificationMentionWhereInput
  }

  /**
   * Notification.notificationStartFollow
   */
  export type Notification$notificationStartFollowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationStartFollow
     */
    select?: NotificationStartFollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationStartFollowInclude<ExtArgs> | null
    where?: NotificationStartFollowWhereInput
  }

  /**
   * Notification.notificationCommunityNewMember
   */
  export type Notification$notificationCommunityNewMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommunityNewMember
     */
    select?: NotificationCommunityNewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommunityNewMemberInclude<ExtArgs> | null
    where?: NotificationCommunityNewMemberWhereInput
  }

  /**
   * Notification.notificationPostComment
   */
  export type Notification$notificationPostCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPostComment
     */
    select?: NotificationPostCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPostCommentInclude<ExtArgs> | null
    where?: NotificationPostCommentWhereInput
  }

  /**
   * Notification.notificationCommentReply
   */
  export type Notification$notificationCommentReplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommentReply
     */
    select?: NotificationCommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommentReplyInclude<ExtArgs> | null
    where?: NotificationCommentReplyWhereInput
  }

  /**
   * Notification without action
   */
  export type NotificationDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Notification
     */
    select?: NotificationSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationInclude<ExtArgs> | null
  }


  /**
   * Model NotificationMention
   */

  export type AggregateNotificationMention = {
    _count: NotificationMentionCountAggregateOutputType | null
    _min: NotificationMentionMinAggregateOutputType | null
    _max: NotificationMentionMaxAggregateOutputType | null
  }

  export type NotificationMentionMinAggregateOutputType = {
    id: string | null
    notificationId: string | null
    postId: string | null
  }

  export type NotificationMentionMaxAggregateOutputType = {
    id: string | null
    notificationId: string | null
    postId: string | null
  }

  export type NotificationMentionCountAggregateOutputType = {
    id: number
    notificationId: number
    postId: number
    _all: number
  }


  export type NotificationMentionMinAggregateInputType = {
    id?: true
    notificationId?: true
    postId?: true
  }

  export type NotificationMentionMaxAggregateInputType = {
    id?: true
    notificationId?: true
    postId?: true
  }

  export type NotificationMentionCountAggregateInputType = {
    id?: true
    notificationId?: true
    postId?: true
    _all?: true
  }

  export type NotificationMentionAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationMention to aggregate.
     */
    where?: NotificationMentionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationMentions to fetch.
     */
    orderBy?: NotificationMentionOrderByWithRelationInput | NotificationMentionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationMentionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationMentions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationMentions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationMentions
    **/
    _count?: true | NotificationMentionCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationMentionMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationMentionMaxAggregateInputType
  }

  export type GetNotificationMentionAggregateType<T extends NotificationMentionAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationMention]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationMention[P]>
      : GetScalarType<T[P], AggregateNotificationMention[P]>
  }




  export type NotificationMentionGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationMentionWhereInput
    orderBy?: NotificationMentionOrderByWithAggregationInput | NotificationMentionOrderByWithAggregationInput[]
    by: NotificationMentionScalarFieldEnum[] | NotificationMentionScalarFieldEnum
    having?: NotificationMentionScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationMentionCountAggregateInputType | true
    _min?: NotificationMentionMinAggregateInputType
    _max?: NotificationMentionMaxAggregateInputType
  }

  export type NotificationMentionGroupByOutputType = {
    id: string
    notificationId: string
    postId: string
    _count: NotificationMentionCountAggregateOutputType | null
    _min: NotificationMentionMinAggregateOutputType | null
    _max: NotificationMentionMaxAggregateOutputType | null
  }

  type GetNotificationMentionGroupByPayload<T extends NotificationMentionGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationMentionGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationMentionGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationMentionGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationMentionGroupByOutputType[P]>
        }
      >
    >


  export type NotificationMentionSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    notificationId?: boolean
    postId?: boolean
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationMention"]>

  export type NotificationMentionSelectScalar = {
    id?: boolean
    notificationId?: boolean
    postId?: boolean
  }


  export type NotificationMentionInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }


  export type $NotificationMentionPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationMention"
    objects: {
      notification: Prisma.$NotificationPayload<ExtArgs>
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      notificationId: string
      postId: string
    }, ExtArgs["result"]["notificationMention"]>
    composites: {}
  }


  type NotificationMentionGetPayload<S extends boolean | null | undefined | NotificationMentionDefaultArgs> = $Result.GetResult<Prisma.$NotificationMentionPayload, S>

  type NotificationMentionCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationMentionFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationMentionCountAggregateInputType | true
    }

  export interface NotificationMentionDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationMention'], meta: { name: 'NotificationMention' } }
    /**
     * Find zero or one NotificationMention that matches the filter.
     * @param {NotificationMentionFindUniqueArgs} args - Arguments to find a NotificationMention
     * @example
     * // Get one NotificationMention
     * const notificationMention = await prisma.notificationMention.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationMentionFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationMentionFindUniqueArgs<ExtArgs>>
    ): Prisma__NotificationMentionClient<$Result.GetResult<Prisma.$NotificationMentionPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one NotificationMention that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationMentionFindUniqueOrThrowArgs} args - Arguments to find a NotificationMention
     * @example
     * // Get one NotificationMention
     * const notificationMention = await prisma.notificationMention.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationMentionFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationMentionFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationMentionClient<$Result.GetResult<Prisma.$NotificationMentionPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first NotificationMention that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationMentionFindFirstArgs} args - Arguments to find a NotificationMention
     * @example
     * // Get one NotificationMention
     * const notificationMention = await prisma.notificationMention.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationMentionFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationMentionFindFirstArgs<ExtArgs>>
    ): Prisma__NotificationMentionClient<$Result.GetResult<Prisma.$NotificationMentionPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first NotificationMention that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationMentionFindFirstOrThrowArgs} args - Arguments to find a NotificationMention
     * @example
     * // Get one NotificationMention
     * const notificationMention = await prisma.notificationMention.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationMentionFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationMentionFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationMentionClient<$Result.GetResult<Prisma.$NotificationMentionPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more NotificationMentions that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationMentionFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationMentions
     * const notificationMentions = await prisma.notificationMention.findMany()
     * 
     * // Get first 10 NotificationMentions
     * const notificationMentions = await prisma.notificationMention.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationMentionWithIdOnly = await prisma.notificationMention.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificationMentionFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationMentionFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationMentionPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a NotificationMention.
     * @param {NotificationMentionCreateArgs} args - Arguments to create a NotificationMention.
     * @example
     * // Create one NotificationMention
     * const NotificationMention = await prisma.notificationMention.create({
     *   data: {
     *     // ... data to create a NotificationMention
     *   }
     * })
     * 
    **/
    create<T extends NotificationMentionCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationMentionCreateArgs<ExtArgs>>
    ): Prisma__NotificationMentionClient<$Result.GetResult<Prisma.$NotificationMentionPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many NotificationMentions.
     *     @param {NotificationMentionCreateManyArgs} args - Arguments to create many NotificationMentions.
     *     @example
     *     // Create many NotificationMentions
     *     const notificationMention = await prisma.notificationMention.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationMentionCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationMentionCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NotificationMention.
     * @param {NotificationMentionDeleteArgs} args - Arguments to delete one NotificationMention.
     * @example
     * // Delete one NotificationMention
     * const NotificationMention = await prisma.notificationMention.delete({
     *   where: {
     *     // ... filter to delete one NotificationMention
     *   }
     * })
     * 
    **/
    delete<T extends NotificationMentionDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationMentionDeleteArgs<ExtArgs>>
    ): Prisma__NotificationMentionClient<$Result.GetResult<Prisma.$NotificationMentionPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one NotificationMention.
     * @param {NotificationMentionUpdateArgs} args - Arguments to update one NotificationMention.
     * @example
     * // Update one NotificationMention
     * const notificationMention = await prisma.notificationMention.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationMentionUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationMentionUpdateArgs<ExtArgs>>
    ): Prisma__NotificationMentionClient<$Result.GetResult<Prisma.$NotificationMentionPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more NotificationMentions.
     * @param {NotificationMentionDeleteManyArgs} args - Arguments to filter NotificationMentions to delete.
     * @example
     * // Delete a few NotificationMentions
     * const { count } = await prisma.notificationMention.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationMentionDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationMentionDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationMentions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationMentionUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationMentions
     * const notificationMention = await prisma.notificationMention.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationMentionUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationMentionUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NotificationMention.
     * @param {NotificationMentionUpsertArgs} args - Arguments to update or create a NotificationMention.
     * @example
     * // Update or create a NotificationMention
     * const notificationMention = await prisma.notificationMention.upsert({
     *   create: {
     *     // ... data to create a NotificationMention
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationMention we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationMentionUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationMentionUpsertArgs<ExtArgs>>
    ): Prisma__NotificationMentionClient<$Result.GetResult<Prisma.$NotificationMentionPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of NotificationMentions.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationMentionCountArgs} args - Arguments to filter NotificationMentions to count.
     * @example
     * // Count the number of NotificationMentions
     * const count = await prisma.notificationMention.count({
     *   where: {
     *     // ... the filter for the NotificationMentions we want to count
     *   }
     * })
    **/
    count<T extends NotificationMentionCountArgs>(
      args?: Subset<T, NotificationMentionCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationMentionCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationMention.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationMentionAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationMentionAggregateArgs>(args: Subset<T, NotificationMentionAggregateArgs>): Prisma.PrismaPromise<GetNotificationMentionAggregateType<T>>

    /**
     * Group by NotificationMention.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationMentionGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationMentionGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationMentionGroupByArgs['orderBy'] }
        : { orderBy?: NotificationMentionGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationMentionGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationMentionGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationMention model
   */
  readonly fields: NotificationMentionFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationMention.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationMentionClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    notification<T extends NotificationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificationDefaultArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the NotificationMention model
   */ 
  interface NotificationMentionFieldRefs {
    readonly id: FieldRef<"NotificationMention", 'String'>
    readonly notificationId: FieldRef<"NotificationMention", 'String'>
    readonly postId: FieldRef<"NotificationMention", 'String'>
  }
    

  // Custom InputTypes
  /**
   * NotificationMention findUnique
   */
  export type NotificationMentionFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationMention
     */
    select?: NotificationMentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationMentionInclude<ExtArgs> | null
    /**
     * Filter, which NotificationMention to fetch.
     */
    where: NotificationMentionWhereUniqueInput
  }

  /**
   * NotificationMention findUniqueOrThrow
   */
  export type NotificationMentionFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationMention
     */
    select?: NotificationMentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationMentionInclude<ExtArgs> | null
    /**
     * Filter, which NotificationMention to fetch.
     */
    where: NotificationMentionWhereUniqueInput
  }

  /**
   * NotificationMention findFirst
   */
  export type NotificationMentionFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationMention
     */
    select?: NotificationMentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationMentionInclude<ExtArgs> | null
    /**
     * Filter, which NotificationMention to fetch.
     */
    where?: NotificationMentionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationMentions to fetch.
     */
    orderBy?: NotificationMentionOrderByWithRelationInput | NotificationMentionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationMentions.
     */
    cursor?: NotificationMentionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationMentions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationMentions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationMentions.
     */
    distinct?: NotificationMentionScalarFieldEnum | NotificationMentionScalarFieldEnum[]
  }

  /**
   * NotificationMention findFirstOrThrow
   */
  export type NotificationMentionFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationMention
     */
    select?: NotificationMentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationMentionInclude<ExtArgs> | null
    /**
     * Filter, which NotificationMention to fetch.
     */
    where?: NotificationMentionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationMentions to fetch.
     */
    orderBy?: NotificationMentionOrderByWithRelationInput | NotificationMentionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationMentions.
     */
    cursor?: NotificationMentionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationMentions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationMentions.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationMentions.
     */
    distinct?: NotificationMentionScalarFieldEnum | NotificationMentionScalarFieldEnum[]
  }

  /**
   * NotificationMention findMany
   */
  export type NotificationMentionFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationMention
     */
    select?: NotificationMentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationMentionInclude<ExtArgs> | null
    /**
     * Filter, which NotificationMentions to fetch.
     */
    where?: NotificationMentionWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationMentions to fetch.
     */
    orderBy?: NotificationMentionOrderByWithRelationInput | NotificationMentionOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationMentions.
     */
    cursor?: NotificationMentionWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationMentions from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationMentions.
     */
    skip?: number
    distinct?: NotificationMentionScalarFieldEnum | NotificationMentionScalarFieldEnum[]
  }

  /**
   * NotificationMention create
   */
  export type NotificationMentionCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationMention
     */
    select?: NotificationMentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationMentionInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationMention.
     */
    data: XOR<NotificationMentionCreateInput, NotificationMentionUncheckedCreateInput>
  }

  /**
   * NotificationMention createMany
   */
  export type NotificationMentionCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationMentions.
     */
    data: NotificationMentionCreateManyInput | NotificationMentionCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationMention update
   */
  export type NotificationMentionUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationMention
     */
    select?: NotificationMentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationMentionInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationMention.
     */
    data: XOR<NotificationMentionUpdateInput, NotificationMentionUncheckedUpdateInput>
    /**
     * Choose, which NotificationMention to update.
     */
    where: NotificationMentionWhereUniqueInput
  }

  /**
   * NotificationMention updateMany
   */
  export type NotificationMentionUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationMentions.
     */
    data: XOR<NotificationMentionUpdateManyMutationInput, NotificationMentionUncheckedUpdateManyInput>
    /**
     * Filter which NotificationMentions to update
     */
    where?: NotificationMentionWhereInput
  }

  /**
   * NotificationMention upsert
   */
  export type NotificationMentionUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationMention
     */
    select?: NotificationMentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationMentionInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationMention to update in case it exists.
     */
    where: NotificationMentionWhereUniqueInput
    /**
     * In case the NotificationMention found by the `where` argument doesn't exist, create a new NotificationMention with this data.
     */
    create: XOR<NotificationMentionCreateInput, NotificationMentionUncheckedCreateInput>
    /**
     * In case the NotificationMention was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationMentionUpdateInput, NotificationMentionUncheckedUpdateInput>
  }

  /**
   * NotificationMention delete
   */
  export type NotificationMentionDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationMention
     */
    select?: NotificationMentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationMentionInclude<ExtArgs> | null
    /**
     * Filter which NotificationMention to delete.
     */
    where: NotificationMentionWhereUniqueInput
  }

  /**
   * NotificationMention deleteMany
   */
  export type NotificationMentionDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationMentions to delete
     */
    where?: NotificationMentionWhereInput
  }

  /**
   * NotificationMention without action
   */
  export type NotificationMentionDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationMention
     */
    select?: NotificationMentionSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationMentionInclude<ExtArgs> | null
  }


  /**
   * Model NotificationStartFollow
   */

  export type AggregateNotificationStartFollow = {
    _count: NotificationStartFollowCountAggregateOutputType | null
    _min: NotificationStartFollowMinAggregateOutputType | null
    _max: NotificationStartFollowMaxAggregateOutputType | null
  }

  export type NotificationStartFollowMinAggregateOutputType = {
    id: string | null
    notificationId: string | null
    userIdNotificationStartFollow: string | null
  }

  export type NotificationStartFollowMaxAggregateOutputType = {
    id: string | null
    notificationId: string | null
    userIdNotificationStartFollow: string | null
  }

  export type NotificationStartFollowCountAggregateOutputType = {
    id: number
    notificationId: number
    userIdNotificationStartFollow: number
    _all: number
  }


  export type NotificationStartFollowMinAggregateInputType = {
    id?: true
    notificationId?: true
    userIdNotificationStartFollow?: true
  }

  export type NotificationStartFollowMaxAggregateInputType = {
    id?: true
    notificationId?: true
    userIdNotificationStartFollow?: true
  }

  export type NotificationStartFollowCountAggregateInputType = {
    id?: true
    notificationId?: true
    userIdNotificationStartFollow?: true
    _all?: true
  }

  export type NotificationStartFollowAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationStartFollow to aggregate.
     */
    where?: NotificationStartFollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationStartFollows to fetch.
     */
    orderBy?: NotificationStartFollowOrderByWithRelationInput | NotificationStartFollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationStartFollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationStartFollows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationStartFollows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationStartFollows
    **/
    _count?: true | NotificationStartFollowCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationStartFollowMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationStartFollowMaxAggregateInputType
  }

  export type GetNotificationStartFollowAggregateType<T extends NotificationStartFollowAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationStartFollow]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationStartFollow[P]>
      : GetScalarType<T[P], AggregateNotificationStartFollow[P]>
  }




  export type NotificationStartFollowGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationStartFollowWhereInput
    orderBy?: NotificationStartFollowOrderByWithAggregationInput | NotificationStartFollowOrderByWithAggregationInput[]
    by: NotificationStartFollowScalarFieldEnum[] | NotificationStartFollowScalarFieldEnum
    having?: NotificationStartFollowScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationStartFollowCountAggregateInputType | true
    _min?: NotificationStartFollowMinAggregateInputType
    _max?: NotificationStartFollowMaxAggregateInputType
  }

  export type NotificationStartFollowGroupByOutputType = {
    id: string
    notificationId: string
    userIdNotificationStartFollow: string
    _count: NotificationStartFollowCountAggregateOutputType | null
    _min: NotificationStartFollowMinAggregateOutputType | null
    _max: NotificationStartFollowMaxAggregateOutputType | null
  }

  type GetNotificationStartFollowGroupByPayload<T extends NotificationStartFollowGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationStartFollowGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationStartFollowGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationStartFollowGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationStartFollowGroupByOutputType[P]>
        }
      >
    >


  export type NotificationStartFollowSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    notificationId?: boolean
    userIdNotificationStartFollow?: boolean
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
    userNotificationStartFollow?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationStartFollow"]>

  export type NotificationStartFollowSelectScalar = {
    id?: boolean
    notificationId?: boolean
    userIdNotificationStartFollow?: boolean
  }


  export type NotificationStartFollowInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
    userNotificationStartFollow?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $NotificationStartFollowPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationStartFollow"
    objects: {
      notification: Prisma.$NotificationPayload<ExtArgs>
      userNotificationStartFollow: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      notificationId: string
      userIdNotificationStartFollow: string
    }, ExtArgs["result"]["notificationStartFollow"]>
    composites: {}
  }


  type NotificationStartFollowGetPayload<S extends boolean | null | undefined | NotificationStartFollowDefaultArgs> = $Result.GetResult<Prisma.$NotificationStartFollowPayload, S>

  type NotificationStartFollowCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationStartFollowFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationStartFollowCountAggregateInputType | true
    }

  export interface NotificationStartFollowDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationStartFollow'], meta: { name: 'NotificationStartFollow' } }
    /**
     * Find zero or one NotificationStartFollow that matches the filter.
     * @param {NotificationStartFollowFindUniqueArgs} args - Arguments to find a NotificationStartFollow
     * @example
     * // Get one NotificationStartFollow
     * const notificationStartFollow = await prisma.notificationStartFollow.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationStartFollowFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationStartFollowFindUniqueArgs<ExtArgs>>
    ): Prisma__NotificationStartFollowClient<$Result.GetResult<Prisma.$NotificationStartFollowPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one NotificationStartFollow that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationStartFollowFindUniqueOrThrowArgs} args - Arguments to find a NotificationStartFollow
     * @example
     * // Get one NotificationStartFollow
     * const notificationStartFollow = await prisma.notificationStartFollow.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationStartFollowFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationStartFollowFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationStartFollowClient<$Result.GetResult<Prisma.$NotificationStartFollowPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first NotificationStartFollow that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationStartFollowFindFirstArgs} args - Arguments to find a NotificationStartFollow
     * @example
     * // Get one NotificationStartFollow
     * const notificationStartFollow = await prisma.notificationStartFollow.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationStartFollowFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationStartFollowFindFirstArgs<ExtArgs>>
    ): Prisma__NotificationStartFollowClient<$Result.GetResult<Prisma.$NotificationStartFollowPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first NotificationStartFollow that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationStartFollowFindFirstOrThrowArgs} args - Arguments to find a NotificationStartFollow
     * @example
     * // Get one NotificationStartFollow
     * const notificationStartFollow = await prisma.notificationStartFollow.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationStartFollowFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationStartFollowFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationStartFollowClient<$Result.GetResult<Prisma.$NotificationStartFollowPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more NotificationStartFollows that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationStartFollowFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationStartFollows
     * const notificationStartFollows = await prisma.notificationStartFollow.findMany()
     * 
     * // Get first 10 NotificationStartFollows
     * const notificationStartFollows = await prisma.notificationStartFollow.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationStartFollowWithIdOnly = await prisma.notificationStartFollow.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificationStartFollowFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationStartFollowFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationStartFollowPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a NotificationStartFollow.
     * @param {NotificationStartFollowCreateArgs} args - Arguments to create a NotificationStartFollow.
     * @example
     * // Create one NotificationStartFollow
     * const NotificationStartFollow = await prisma.notificationStartFollow.create({
     *   data: {
     *     // ... data to create a NotificationStartFollow
     *   }
     * })
     * 
    **/
    create<T extends NotificationStartFollowCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationStartFollowCreateArgs<ExtArgs>>
    ): Prisma__NotificationStartFollowClient<$Result.GetResult<Prisma.$NotificationStartFollowPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many NotificationStartFollows.
     *     @param {NotificationStartFollowCreateManyArgs} args - Arguments to create many NotificationStartFollows.
     *     @example
     *     // Create many NotificationStartFollows
     *     const notificationStartFollow = await prisma.notificationStartFollow.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationStartFollowCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationStartFollowCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NotificationStartFollow.
     * @param {NotificationStartFollowDeleteArgs} args - Arguments to delete one NotificationStartFollow.
     * @example
     * // Delete one NotificationStartFollow
     * const NotificationStartFollow = await prisma.notificationStartFollow.delete({
     *   where: {
     *     // ... filter to delete one NotificationStartFollow
     *   }
     * })
     * 
    **/
    delete<T extends NotificationStartFollowDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationStartFollowDeleteArgs<ExtArgs>>
    ): Prisma__NotificationStartFollowClient<$Result.GetResult<Prisma.$NotificationStartFollowPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one NotificationStartFollow.
     * @param {NotificationStartFollowUpdateArgs} args - Arguments to update one NotificationStartFollow.
     * @example
     * // Update one NotificationStartFollow
     * const notificationStartFollow = await prisma.notificationStartFollow.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationStartFollowUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationStartFollowUpdateArgs<ExtArgs>>
    ): Prisma__NotificationStartFollowClient<$Result.GetResult<Prisma.$NotificationStartFollowPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more NotificationStartFollows.
     * @param {NotificationStartFollowDeleteManyArgs} args - Arguments to filter NotificationStartFollows to delete.
     * @example
     * // Delete a few NotificationStartFollows
     * const { count } = await prisma.notificationStartFollow.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationStartFollowDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationStartFollowDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationStartFollows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationStartFollowUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationStartFollows
     * const notificationStartFollow = await prisma.notificationStartFollow.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationStartFollowUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationStartFollowUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NotificationStartFollow.
     * @param {NotificationStartFollowUpsertArgs} args - Arguments to update or create a NotificationStartFollow.
     * @example
     * // Update or create a NotificationStartFollow
     * const notificationStartFollow = await prisma.notificationStartFollow.upsert({
     *   create: {
     *     // ... data to create a NotificationStartFollow
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationStartFollow we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationStartFollowUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationStartFollowUpsertArgs<ExtArgs>>
    ): Prisma__NotificationStartFollowClient<$Result.GetResult<Prisma.$NotificationStartFollowPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of NotificationStartFollows.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationStartFollowCountArgs} args - Arguments to filter NotificationStartFollows to count.
     * @example
     * // Count the number of NotificationStartFollows
     * const count = await prisma.notificationStartFollow.count({
     *   where: {
     *     // ... the filter for the NotificationStartFollows we want to count
     *   }
     * })
    **/
    count<T extends NotificationStartFollowCountArgs>(
      args?: Subset<T, NotificationStartFollowCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationStartFollowCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationStartFollow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationStartFollowAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationStartFollowAggregateArgs>(args: Subset<T, NotificationStartFollowAggregateArgs>): Prisma.PrismaPromise<GetNotificationStartFollowAggregateType<T>>

    /**
     * Group by NotificationStartFollow.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationStartFollowGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationStartFollowGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationStartFollowGroupByArgs['orderBy'] }
        : { orderBy?: NotificationStartFollowGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationStartFollowGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationStartFollowGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationStartFollow model
   */
  readonly fields: NotificationStartFollowFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationStartFollow.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationStartFollowClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    notification<T extends NotificationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificationDefaultArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    userNotificationStartFollow<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the NotificationStartFollow model
   */ 
  interface NotificationStartFollowFieldRefs {
    readonly id: FieldRef<"NotificationStartFollow", 'String'>
    readonly notificationId: FieldRef<"NotificationStartFollow", 'String'>
    readonly userIdNotificationStartFollow: FieldRef<"NotificationStartFollow", 'String'>
  }
    

  // Custom InputTypes
  /**
   * NotificationStartFollow findUnique
   */
  export type NotificationStartFollowFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationStartFollow
     */
    select?: NotificationStartFollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationStartFollowInclude<ExtArgs> | null
    /**
     * Filter, which NotificationStartFollow to fetch.
     */
    where: NotificationStartFollowWhereUniqueInput
  }

  /**
   * NotificationStartFollow findUniqueOrThrow
   */
  export type NotificationStartFollowFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationStartFollow
     */
    select?: NotificationStartFollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationStartFollowInclude<ExtArgs> | null
    /**
     * Filter, which NotificationStartFollow to fetch.
     */
    where: NotificationStartFollowWhereUniqueInput
  }

  /**
   * NotificationStartFollow findFirst
   */
  export type NotificationStartFollowFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationStartFollow
     */
    select?: NotificationStartFollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationStartFollowInclude<ExtArgs> | null
    /**
     * Filter, which NotificationStartFollow to fetch.
     */
    where?: NotificationStartFollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationStartFollows to fetch.
     */
    orderBy?: NotificationStartFollowOrderByWithRelationInput | NotificationStartFollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationStartFollows.
     */
    cursor?: NotificationStartFollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationStartFollows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationStartFollows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationStartFollows.
     */
    distinct?: NotificationStartFollowScalarFieldEnum | NotificationStartFollowScalarFieldEnum[]
  }

  /**
   * NotificationStartFollow findFirstOrThrow
   */
  export type NotificationStartFollowFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationStartFollow
     */
    select?: NotificationStartFollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationStartFollowInclude<ExtArgs> | null
    /**
     * Filter, which NotificationStartFollow to fetch.
     */
    where?: NotificationStartFollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationStartFollows to fetch.
     */
    orderBy?: NotificationStartFollowOrderByWithRelationInput | NotificationStartFollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationStartFollows.
     */
    cursor?: NotificationStartFollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationStartFollows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationStartFollows.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationStartFollows.
     */
    distinct?: NotificationStartFollowScalarFieldEnum | NotificationStartFollowScalarFieldEnum[]
  }

  /**
   * NotificationStartFollow findMany
   */
  export type NotificationStartFollowFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationStartFollow
     */
    select?: NotificationStartFollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationStartFollowInclude<ExtArgs> | null
    /**
     * Filter, which NotificationStartFollows to fetch.
     */
    where?: NotificationStartFollowWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationStartFollows to fetch.
     */
    orderBy?: NotificationStartFollowOrderByWithRelationInput | NotificationStartFollowOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationStartFollows.
     */
    cursor?: NotificationStartFollowWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationStartFollows from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationStartFollows.
     */
    skip?: number
    distinct?: NotificationStartFollowScalarFieldEnum | NotificationStartFollowScalarFieldEnum[]
  }

  /**
   * NotificationStartFollow create
   */
  export type NotificationStartFollowCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationStartFollow
     */
    select?: NotificationStartFollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationStartFollowInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationStartFollow.
     */
    data: XOR<NotificationStartFollowCreateInput, NotificationStartFollowUncheckedCreateInput>
  }

  /**
   * NotificationStartFollow createMany
   */
  export type NotificationStartFollowCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationStartFollows.
     */
    data: NotificationStartFollowCreateManyInput | NotificationStartFollowCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationStartFollow update
   */
  export type NotificationStartFollowUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationStartFollow
     */
    select?: NotificationStartFollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationStartFollowInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationStartFollow.
     */
    data: XOR<NotificationStartFollowUpdateInput, NotificationStartFollowUncheckedUpdateInput>
    /**
     * Choose, which NotificationStartFollow to update.
     */
    where: NotificationStartFollowWhereUniqueInput
  }

  /**
   * NotificationStartFollow updateMany
   */
  export type NotificationStartFollowUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationStartFollows.
     */
    data: XOR<NotificationStartFollowUpdateManyMutationInput, NotificationStartFollowUncheckedUpdateManyInput>
    /**
     * Filter which NotificationStartFollows to update
     */
    where?: NotificationStartFollowWhereInput
  }

  /**
   * NotificationStartFollow upsert
   */
  export type NotificationStartFollowUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationStartFollow
     */
    select?: NotificationStartFollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationStartFollowInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationStartFollow to update in case it exists.
     */
    where: NotificationStartFollowWhereUniqueInput
    /**
     * In case the NotificationStartFollow found by the `where` argument doesn't exist, create a new NotificationStartFollow with this data.
     */
    create: XOR<NotificationStartFollowCreateInput, NotificationStartFollowUncheckedCreateInput>
    /**
     * In case the NotificationStartFollow was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationStartFollowUpdateInput, NotificationStartFollowUncheckedUpdateInput>
  }

  /**
   * NotificationStartFollow delete
   */
  export type NotificationStartFollowDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationStartFollow
     */
    select?: NotificationStartFollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationStartFollowInclude<ExtArgs> | null
    /**
     * Filter which NotificationStartFollow to delete.
     */
    where: NotificationStartFollowWhereUniqueInput
  }

  /**
   * NotificationStartFollow deleteMany
   */
  export type NotificationStartFollowDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationStartFollows to delete
     */
    where?: NotificationStartFollowWhereInput
  }

  /**
   * NotificationStartFollow without action
   */
  export type NotificationStartFollowDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationStartFollow
     */
    select?: NotificationStartFollowSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationStartFollowInclude<ExtArgs> | null
  }


  /**
   * Model NotificationCommunityNewMember
   */

  export type AggregateNotificationCommunityNewMember = {
    _count: NotificationCommunityNewMemberCountAggregateOutputType | null
    _min: NotificationCommunityNewMemberMinAggregateOutputType | null
    _max: NotificationCommunityNewMemberMaxAggregateOutputType | null
  }

  export type NotificationCommunityNewMemberMinAggregateOutputType = {
    id: string | null
    notificationId: string | null
    communityId: string | null
    userId: string | null
  }

  export type NotificationCommunityNewMemberMaxAggregateOutputType = {
    id: string | null
    notificationId: string | null
    communityId: string | null
    userId: string | null
  }

  export type NotificationCommunityNewMemberCountAggregateOutputType = {
    id: number
    notificationId: number
    communityId: number
    userId: number
    _all: number
  }


  export type NotificationCommunityNewMemberMinAggregateInputType = {
    id?: true
    notificationId?: true
    communityId?: true
    userId?: true
  }

  export type NotificationCommunityNewMemberMaxAggregateInputType = {
    id?: true
    notificationId?: true
    communityId?: true
    userId?: true
  }

  export type NotificationCommunityNewMemberCountAggregateInputType = {
    id?: true
    notificationId?: true
    communityId?: true
    userId?: true
    _all?: true
  }

  export type NotificationCommunityNewMemberAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationCommunityNewMember to aggregate.
     */
    where?: NotificationCommunityNewMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationCommunityNewMembers to fetch.
     */
    orderBy?: NotificationCommunityNewMemberOrderByWithRelationInput | NotificationCommunityNewMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationCommunityNewMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationCommunityNewMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationCommunityNewMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationCommunityNewMembers
    **/
    _count?: true | NotificationCommunityNewMemberCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationCommunityNewMemberMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationCommunityNewMemberMaxAggregateInputType
  }

  export type GetNotificationCommunityNewMemberAggregateType<T extends NotificationCommunityNewMemberAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationCommunityNewMember]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationCommunityNewMember[P]>
      : GetScalarType<T[P], AggregateNotificationCommunityNewMember[P]>
  }




  export type NotificationCommunityNewMemberGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationCommunityNewMemberWhereInput
    orderBy?: NotificationCommunityNewMemberOrderByWithAggregationInput | NotificationCommunityNewMemberOrderByWithAggregationInput[]
    by: NotificationCommunityNewMemberScalarFieldEnum[] | NotificationCommunityNewMemberScalarFieldEnum
    having?: NotificationCommunityNewMemberScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCommunityNewMemberCountAggregateInputType | true
    _min?: NotificationCommunityNewMemberMinAggregateInputType
    _max?: NotificationCommunityNewMemberMaxAggregateInputType
  }

  export type NotificationCommunityNewMemberGroupByOutputType = {
    id: string
    notificationId: string
    communityId: string
    userId: string
    _count: NotificationCommunityNewMemberCountAggregateOutputType | null
    _min: NotificationCommunityNewMemberMinAggregateOutputType | null
    _max: NotificationCommunityNewMemberMaxAggregateOutputType | null
  }

  type GetNotificationCommunityNewMemberGroupByPayload<T extends NotificationCommunityNewMemberGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationCommunityNewMemberGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationCommunityNewMemberGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationCommunityNewMemberGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationCommunityNewMemberGroupByOutputType[P]>
        }
      >
    >


  export type NotificationCommunityNewMemberSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    notificationId?: boolean
    communityId?: boolean
    userId?: boolean
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationCommunityNewMember"]>

  export type NotificationCommunityNewMemberSelectScalar = {
    id?: boolean
    notificationId?: boolean
    communityId?: boolean
    userId?: boolean
  }


  export type NotificationCommunityNewMemberInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
    community?: boolean | CommunityDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $NotificationCommunityNewMemberPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationCommunityNewMember"
    objects: {
      notification: Prisma.$NotificationPayload<ExtArgs>
      community: Prisma.$CommunityPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      notificationId: string
      communityId: string
      userId: string
    }, ExtArgs["result"]["notificationCommunityNewMember"]>
    composites: {}
  }


  type NotificationCommunityNewMemberGetPayload<S extends boolean | null | undefined | NotificationCommunityNewMemberDefaultArgs> = $Result.GetResult<Prisma.$NotificationCommunityNewMemberPayload, S>

  type NotificationCommunityNewMemberCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationCommunityNewMemberFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCommunityNewMemberCountAggregateInputType | true
    }

  export interface NotificationCommunityNewMemberDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationCommunityNewMember'], meta: { name: 'NotificationCommunityNewMember' } }
    /**
     * Find zero or one NotificationCommunityNewMember that matches the filter.
     * @param {NotificationCommunityNewMemberFindUniqueArgs} args - Arguments to find a NotificationCommunityNewMember
     * @example
     * // Get one NotificationCommunityNewMember
     * const notificationCommunityNewMember = await prisma.notificationCommunityNewMember.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationCommunityNewMemberFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCommunityNewMemberFindUniqueArgs<ExtArgs>>
    ): Prisma__NotificationCommunityNewMemberClient<$Result.GetResult<Prisma.$NotificationCommunityNewMemberPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one NotificationCommunityNewMember that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationCommunityNewMemberFindUniqueOrThrowArgs} args - Arguments to find a NotificationCommunityNewMember
     * @example
     * // Get one NotificationCommunityNewMember
     * const notificationCommunityNewMember = await prisma.notificationCommunityNewMember.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationCommunityNewMemberFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCommunityNewMemberFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationCommunityNewMemberClient<$Result.GetResult<Prisma.$NotificationCommunityNewMemberPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first NotificationCommunityNewMember that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCommunityNewMemberFindFirstArgs} args - Arguments to find a NotificationCommunityNewMember
     * @example
     * // Get one NotificationCommunityNewMember
     * const notificationCommunityNewMember = await prisma.notificationCommunityNewMember.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationCommunityNewMemberFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCommunityNewMemberFindFirstArgs<ExtArgs>>
    ): Prisma__NotificationCommunityNewMemberClient<$Result.GetResult<Prisma.$NotificationCommunityNewMemberPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first NotificationCommunityNewMember that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCommunityNewMemberFindFirstOrThrowArgs} args - Arguments to find a NotificationCommunityNewMember
     * @example
     * // Get one NotificationCommunityNewMember
     * const notificationCommunityNewMember = await prisma.notificationCommunityNewMember.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationCommunityNewMemberFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCommunityNewMemberFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationCommunityNewMemberClient<$Result.GetResult<Prisma.$NotificationCommunityNewMemberPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more NotificationCommunityNewMembers that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCommunityNewMemberFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationCommunityNewMembers
     * const notificationCommunityNewMembers = await prisma.notificationCommunityNewMember.findMany()
     * 
     * // Get first 10 NotificationCommunityNewMembers
     * const notificationCommunityNewMembers = await prisma.notificationCommunityNewMember.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationCommunityNewMemberWithIdOnly = await prisma.notificationCommunityNewMember.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificationCommunityNewMemberFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCommunityNewMemberFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationCommunityNewMemberPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a NotificationCommunityNewMember.
     * @param {NotificationCommunityNewMemberCreateArgs} args - Arguments to create a NotificationCommunityNewMember.
     * @example
     * // Create one NotificationCommunityNewMember
     * const NotificationCommunityNewMember = await prisma.notificationCommunityNewMember.create({
     *   data: {
     *     // ... data to create a NotificationCommunityNewMember
     *   }
     * })
     * 
    **/
    create<T extends NotificationCommunityNewMemberCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCommunityNewMemberCreateArgs<ExtArgs>>
    ): Prisma__NotificationCommunityNewMemberClient<$Result.GetResult<Prisma.$NotificationCommunityNewMemberPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many NotificationCommunityNewMembers.
     *     @param {NotificationCommunityNewMemberCreateManyArgs} args - Arguments to create many NotificationCommunityNewMembers.
     *     @example
     *     // Create many NotificationCommunityNewMembers
     *     const notificationCommunityNewMember = await prisma.notificationCommunityNewMember.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationCommunityNewMemberCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCommunityNewMemberCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NotificationCommunityNewMember.
     * @param {NotificationCommunityNewMemberDeleteArgs} args - Arguments to delete one NotificationCommunityNewMember.
     * @example
     * // Delete one NotificationCommunityNewMember
     * const NotificationCommunityNewMember = await prisma.notificationCommunityNewMember.delete({
     *   where: {
     *     // ... filter to delete one NotificationCommunityNewMember
     *   }
     * })
     * 
    **/
    delete<T extends NotificationCommunityNewMemberDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCommunityNewMemberDeleteArgs<ExtArgs>>
    ): Prisma__NotificationCommunityNewMemberClient<$Result.GetResult<Prisma.$NotificationCommunityNewMemberPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one NotificationCommunityNewMember.
     * @param {NotificationCommunityNewMemberUpdateArgs} args - Arguments to update one NotificationCommunityNewMember.
     * @example
     * // Update one NotificationCommunityNewMember
     * const notificationCommunityNewMember = await prisma.notificationCommunityNewMember.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationCommunityNewMemberUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCommunityNewMemberUpdateArgs<ExtArgs>>
    ): Prisma__NotificationCommunityNewMemberClient<$Result.GetResult<Prisma.$NotificationCommunityNewMemberPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more NotificationCommunityNewMembers.
     * @param {NotificationCommunityNewMemberDeleteManyArgs} args - Arguments to filter NotificationCommunityNewMembers to delete.
     * @example
     * // Delete a few NotificationCommunityNewMembers
     * const { count } = await prisma.notificationCommunityNewMember.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationCommunityNewMemberDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCommunityNewMemberDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationCommunityNewMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCommunityNewMemberUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationCommunityNewMembers
     * const notificationCommunityNewMember = await prisma.notificationCommunityNewMember.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationCommunityNewMemberUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCommunityNewMemberUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NotificationCommunityNewMember.
     * @param {NotificationCommunityNewMemberUpsertArgs} args - Arguments to update or create a NotificationCommunityNewMember.
     * @example
     * // Update or create a NotificationCommunityNewMember
     * const notificationCommunityNewMember = await prisma.notificationCommunityNewMember.upsert({
     *   create: {
     *     // ... data to create a NotificationCommunityNewMember
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationCommunityNewMember we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationCommunityNewMemberUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCommunityNewMemberUpsertArgs<ExtArgs>>
    ): Prisma__NotificationCommunityNewMemberClient<$Result.GetResult<Prisma.$NotificationCommunityNewMemberPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of NotificationCommunityNewMembers.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCommunityNewMemberCountArgs} args - Arguments to filter NotificationCommunityNewMembers to count.
     * @example
     * // Count the number of NotificationCommunityNewMembers
     * const count = await prisma.notificationCommunityNewMember.count({
     *   where: {
     *     // ... the filter for the NotificationCommunityNewMembers we want to count
     *   }
     * })
    **/
    count<T extends NotificationCommunityNewMemberCountArgs>(
      args?: Subset<T, NotificationCommunityNewMemberCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCommunityNewMemberCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationCommunityNewMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCommunityNewMemberAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationCommunityNewMemberAggregateArgs>(args: Subset<T, NotificationCommunityNewMemberAggregateArgs>): Prisma.PrismaPromise<GetNotificationCommunityNewMemberAggregateType<T>>

    /**
     * Group by NotificationCommunityNewMember.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCommunityNewMemberGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationCommunityNewMemberGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationCommunityNewMemberGroupByArgs['orderBy'] }
        : { orderBy?: NotificationCommunityNewMemberGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationCommunityNewMemberGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationCommunityNewMemberGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationCommunityNewMember model
   */
  readonly fields: NotificationCommunityNewMemberFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationCommunityNewMember.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationCommunityNewMemberClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    notification<T extends NotificationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificationDefaultArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    community<T extends CommunityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommunityDefaultArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the NotificationCommunityNewMember model
   */ 
  interface NotificationCommunityNewMemberFieldRefs {
    readonly id: FieldRef<"NotificationCommunityNewMember", 'String'>
    readonly notificationId: FieldRef<"NotificationCommunityNewMember", 'String'>
    readonly communityId: FieldRef<"NotificationCommunityNewMember", 'String'>
    readonly userId: FieldRef<"NotificationCommunityNewMember", 'String'>
  }
    

  // Custom InputTypes
  /**
   * NotificationCommunityNewMember findUnique
   */
  export type NotificationCommunityNewMemberFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommunityNewMember
     */
    select?: NotificationCommunityNewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommunityNewMemberInclude<ExtArgs> | null
    /**
     * Filter, which NotificationCommunityNewMember to fetch.
     */
    where: NotificationCommunityNewMemberWhereUniqueInput
  }

  /**
   * NotificationCommunityNewMember findUniqueOrThrow
   */
  export type NotificationCommunityNewMemberFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommunityNewMember
     */
    select?: NotificationCommunityNewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommunityNewMemberInclude<ExtArgs> | null
    /**
     * Filter, which NotificationCommunityNewMember to fetch.
     */
    where: NotificationCommunityNewMemberWhereUniqueInput
  }

  /**
   * NotificationCommunityNewMember findFirst
   */
  export type NotificationCommunityNewMemberFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommunityNewMember
     */
    select?: NotificationCommunityNewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommunityNewMemberInclude<ExtArgs> | null
    /**
     * Filter, which NotificationCommunityNewMember to fetch.
     */
    where?: NotificationCommunityNewMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationCommunityNewMembers to fetch.
     */
    orderBy?: NotificationCommunityNewMemberOrderByWithRelationInput | NotificationCommunityNewMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationCommunityNewMembers.
     */
    cursor?: NotificationCommunityNewMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationCommunityNewMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationCommunityNewMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationCommunityNewMembers.
     */
    distinct?: NotificationCommunityNewMemberScalarFieldEnum | NotificationCommunityNewMemberScalarFieldEnum[]
  }

  /**
   * NotificationCommunityNewMember findFirstOrThrow
   */
  export type NotificationCommunityNewMemberFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommunityNewMember
     */
    select?: NotificationCommunityNewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommunityNewMemberInclude<ExtArgs> | null
    /**
     * Filter, which NotificationCommunityNewMember to fetch.
     */
    where?: NotificationCommunityNewMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationCommunityNewMembers to fetch.
     */
    orderBy?: NotificationCommunityNewMemberOrderByWithRelationInput | NotificationCommunityNewMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationCommunityNewMembers.
     */
    cursor?: NotificationCommunityNewMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationCommunityNewMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationCommunityNewMembers.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationCommunityNewMembers.
     */
    distinct?: NotificationCommunityNewMemberScalarFieldEnum | NotificationCommunityNewMemberScalarFieldEnum[]
  }

  /**
   * NotificationCommunityNewMember findMany
   */
  export type NotificationCommunityNewMemberFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommunityNewMember
     */
    select?: NotificationCommunityNewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommunityNewMemberInclude<ExtArgs> | null
    /**
     * Filter, which NotificationCommunityNewMembers to fetch.
     */
    where?: NotificationCommunityNewMemberWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationCommunityNewMembers to fetch.
     */
    orderBy?: NotificationCommunityNewMemberOrderByWithRelationInput | NotificationCommunityNewMemberOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationCommunityNewMembers.
     */
    cursor?: NotificationCommunityNewMemberWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationCommunityNewMembers from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationCommunityNewMembers.
     */
    skip?: number
    distinct?: NotificationCommunityNewMemberScalarFieldEnum | NotificationCommunityNewMemberScalarFieldEnum[]
  }

  /**
   * NotificationCommunityNewMember create
   */
  export type NotificationCommunityNewMemberCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommunityNewMember
     */
    select?: NotificationCommunityNewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommunityNewMemberInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationCommunityNewMember.
     */
    data: XOR<NotificationCommunityNewMemberCreateInput, NotificationCommunityNewMemberUncheckedCreateInput>
  }

  /**
   * NotificationCommunityNewMember createMany
   */
  export type NotificationCommunityNewMemberCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationCommunityNewMembers.
     */
    data: NotificationCommunityNewMemberCreateManyInput | NotificationCommunityNewMemberCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationCommunityNewMember update
   */
  export type NotificationCommunityNewMemberUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommunityNewMember
     */
    select?: NotificationCommunityNewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommunityNewMemberInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationCommunityNewMember.
     */
    data: XOR<NotificationCommunityNewMemberUpdateInput, NotificationCommunityNewMemberUncheckedUpdateInput>
    /**
     * Choose, which NotificationCommunityNewMember to update.
     */
    where: NotificationCommunityNewMemberWhereUniqueInput
  }

  /**
   * NotificationCommunityNewMember updateMany
   */
  export type NotificationCommunityNewMemberUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationCommunityNewMembers.
     */
    data: XOR<NotificationCommunityNewMemberUpdateManyMutationInput, NotificationCommunityNewMemberUncheckedUpdateManyInput>
    /**
     * Filter which NotificationCommunityNewMembers to update
     */
    where?: NotificationCommunityNewMemberWhereInput
  }

  /**
   * NotificationCommunityNewMember upsert
   */
  export type NotificationCommunityNewMemberUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommunityNewMember
     */
    select?: NotificationCommunityNewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommunityNewMemberInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationCommunityNewMember to update in case it exists.
     */
    where: NotificationCommunityNewMemberWhereUniqueInput
    /**
     * In case the NotificationCommunityNewMember found by the `where` argument doesn't exist, create a new NotificationCommunityNewMember with this data.
     */
    create: XOR<NotificationCommunityNewMemberCreateInput, NotificationCommunityNewMemberUncheckedCreateInput>
    /**
     * In case the NotificationCommunityNewMember was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationCommunityNewMemberUpdateInput, NotificationCommunityNewMemberUncheckedUpdateInput>
  }

  /**
   * NotificationCommunityNewMember delete
   */
  export type NotificationCommunityNewMemberDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommunityNewMember
     */
    select?: NotificationCommunityNewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommunityNewMemberInclude<ExtArgs> | null
    /**
     * Filter which NotificationCommunityNewMember to delete.
     */
    where: NotificationCommunityNewMemberWhereUniqueInput
  }

  /**
   * NotificationCommunityNewMember deleteMany
   */
  export type NotificationCommunityNewMemberDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationCommunityNewMembers to delete
     */
    where?: NotificationCommunityNewMemberWhereInput
  }

  /**
   * NotificationCommunityNewMember without action
   */
  export type NotificationCommunityNewMemberDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommunityNewMember
     */
    select?: NotificationCommunityNewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommunityNewMemberInclude<ExtArgs> | null
  }


  /**
   * Model NotificationPostComment
   */

  export type AggregateNotificationPostComment = {
    _count: NotificationPostCommentCountAggregateOutputType | null
    _min: NotificationPostCommentMinAggregateOutputType | null
    _max: NotificationPostCommentMaxAggregateOutputType | null
  }

  export type NotificationPostCommentMinAggregateOutputType = {
    id: string | null
    notificationId: string | null
    commentId: string | null
  }

  export type NotificationPostCommentMaxAggregateOutputType = {
    id: string | null
    notificationId: string | null
    commentId: string | null
  }

  export type NotificationPostCommentCountAggregateOutputType = {
    id: number
    notificationId: number
    commentId: number
    _all: number
  }


  export type NotificationPostCommentMinAggregateInputType = {
    id?: true
    notificationId?: true
    commentId?: true
  }

  export type NotificationPostCommentMaxAggregateInputType = {
    id?: true
    notificationId?: true
    commentId?: true
  }

  export type NotificationPostCommentCountAggregateInputType = {
    id?: true
    notificationId?: true
    commentId?: true
    _all?: true
  }

  export type NotificationPostCommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationPostComment to aggregate.
     */
    where?: NotificationPostCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationPostComments to fetch.
     */
    orderBy?: NotificationPostCommentOrderByWithRelationInput | NotificationPostCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationPostCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationPostComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationPostComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationPostComments
    **/
    _count?: true | NotificationPostCommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationPostCommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationPostCommentMaxAggregateInputType
  }

  export type GetNotificationPostCommentAggregateType<T extends NotificationPostCommentAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationPostComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationPostComment[P]>
      : GetScalarType<T[P], AggregateNotificationPostComment[P]>
  }




  export type NotificationPostCommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationPostCommentWhereInput
    orderBy?: NotificationPostCommentOrderByWithAggregationInput | NotificationPostCommentOrderByWithAggregationInput[]
    by: NotificationPostCommentScalarFieldEnum[] | NotificationPostCommentScalarFieldEnum
    having?: NotificationPostCommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationPostCommentCountAggregateInputType | true
    _min?: NotificationPostCommentMinAggregateInputType
    _max?: NotificationPostCommentMaxAggregateInputType
  }

  export type NotificationPostCommentGroupByOutputType = {
    id: string
    notificationId: string
    commentId: string
    _count: NotificationPostCommentCountAggregateOutputType | null
    _min: NotificationPostCommentMinAggregateOutputType | null
    _max: NotificationPostCommentMaxAggregateOutputType | null
  }

  type GetNotificationPostCommentGroupByPayload<T extends NotificationPostCommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationPostCommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationPostCommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationPostCommentGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationPostCommentGroupByOutputType[P]>
        }
      >
    >


  export type NotificationPostCommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    notificationId?: boolean
    commentId?: boolean
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationPostComment"]>

  export type NotificationPostCommentSelectScalar = {
    id?: boolean
    notificationId?: boolean
    commentId?: boolean
  }


  export type NotificationPostCommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }


  export type $NotificationPostCommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationPostComment"
    objects: {
      notification: Prisma.$NotificationPayload<ExtArgs>
      comment: Prisma.$CommentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      notificationId: string
      commentId: string
    }, ExtArgs["result"]["notificationPostComment"]>
    composites: {}
  }


  type NotificationPostCommentGetPayload<S extends boolean | null | undefined | NotificationPostCommentDefaultArgs> = $Result.GetResult<Prisma.$NotificationPostCommentPayload, S>

  type NotificationPostCommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationPostCommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationPostCommentCountAggregateInputType | true
    }

  export interface NotificationPostCommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationPostComment'], meta: { name: 'NotificationPostComment' } }
    /**
     * Find zero or one NotificationPostComment that matches the filter.
     * @param {NotificationPostCommentFindUniqueArgs} args - Arguments to find a NotificationPostComment
     * @example
     * // Get one NotificationPostComment
     * const notificationPostComment = await prisma.notificationPostComment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationPostCommentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationPostCommentFindUniqueArgs<ExtArgs>>
    ): Prisma__NotificationPostCommentClient<$Result.GetResult<Prisma.$NotificationPostCommentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one NotificationPostComment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationPostCommentFindUniqueOrThrowArgs} args - Arguments to find a NotificationPostComment
     * @example
     * // Get one NotificationPostComment
     * const notificationPostComment = await prisma.notificationPostComment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationPostCommentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationPostCommentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationPostCommentClient<$Result.GetResult<Prisma.$NotificationPostCommentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first NotificationPostComment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPostCommentFindFirstArgs} args - Arguments to find a NotificationPostComment
     * @example
     * // Get one NotificationPostComment
     * const notificationPostComment = await prisma.notificationPostComment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationPostCommentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationPostCommentFindFirstArgs<ExtArgs>>
    ): Prisma__NotificationPostCommentClient<$Result.GetResult<Prisma.$NotificationPostCommentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first NotificationPostComment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPostCommentFindFirstOrThrowArgs} args - Arguments to find a NotificationPostComment
     * @example
     * // Get one NotificationPostComment
     * const notificationPostComment = await prisma.notificationPostComment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationPostCommentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationPostCommentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationPostCommentClient<$Result.GetResult<Prisma.$NotificationPostCommentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more NotificationPostComments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPostCommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationPostComments
     * const notificationPostComments = await prisma.notificationPostComment.findMany()
     * 
     * // Get first 10 NotificationPostComments
     * const notificationPostComments = await prisma.notificationPostComment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationPostCommentWithIdOnly = await prisma.notificationPostComment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificationPostCommentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationPostCommentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPostCommentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a NotificationPostComment.
     * @param {NotificationPostCommentCreateArgs} args - Arguments to create a NotificationPostComment.
     * @example
     * // Create one NotificationPostComment
     * const NotificationPostComment = await prisma.notificationPostComment.create({
     *   data: {
     *     // ... data to create a NotificationPostComment
     *   }
     * })
     * 
    **/
    create<T extends NotificationPostCommentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationPostCommentCreateArgs<ExtArgs>>
    ): Prisma__NotificationPostCommentClient<$Result.GetResult<Prisma.$NotificationPostCommentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many NotificationPostComments.
     *     @param {NotificationPostCommentCreateManyArgs} args - Arguments to create many NotificationPostComments.
     *     @example
     *     // Create many NotificationPostComments
     *     const notificationPostComment = await prisma.notificationPostComment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationPostCommentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationPostCommentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NotificationPostComment.
     * @param {NotificationPostCommentDeleteArgs} args - Arguments to delete one NotificationPostComment.
     * @example
     * // Delete one NotificationPostComment
     * const NotificationPostComment = await prisma.notificationPostComment.delete({
     *   where: {
     *     // ... filter to delete one NotificationPostComment
     *   }
     * })
     * 
    **/
    delete<T extends NotificationPostCommentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationPostCommentDeleteArgs<ExtArgs>>
    ): Prisma__NotificationPostCommentClient<$Result.GetResult<Prisma.$NotificationPostCommentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one NotificationPostComment.
     * @param {NotificationPostCommentUpdateArgs} args - Arguments to update one NotificationPostComment.
     * @example
     * // Update one NotificationPostComment
     * const notificationPostComment = await prisma.notificationPostComment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationPostCommentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationPostCommentUpdateArgs<ExtArgs>>
    ): Prisma__NotificationPostCommentClient<$Result.GetResult<Prisma.$NotificationPostCommentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more NotificationPostComments.
     * @param {NotificationPostCommentDeleteManyArgs} args - Arguments to filter NotificationPostComments to delete.
     * @example
     * // Delete a few NotificationPostComments
     * const { count } = await prisma.notificationPostComment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationPostCommentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationPostCommentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationPostComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPostCommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationPostComments
     * const notificationPostComment = await prisma.notificationPostComment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationPostCommentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationPostCommentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NotificationPostComment.
     * @param {NotificationPostCommentUpsertArgs} args - Arguments to update or create a NotificationPostComment.
     * @example
     * // Update or create a NotificationPostComment
     * const notificationPostComment = await prisma.notificationPostComment.upsert({
     *   create: {
     *     // ... data to create a NotificationPostComment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationPostComment we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationPostCommentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationPostCommentUpsertArgs<ExtArgs>>
    ): Prisma__NotificationPostCommentClient<$Result.GetResult<Prisma.$NotificationPostCommentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of NotificationPostComments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPostCommentCountArgs} args - Arguments to filter NotificationPostComments to count.
     * @example
     * // Count the number of NotificationPostComments
     * const count = await prisma.notificationPostComment.count({
     *   where: {
     *     // ... the filter for the NotificationPostComments we want to count
     *   }
     * })
    **/
    count<T extends NotificationPostCommentCountArgs>(
      args?: Subset<T, NotificationPostCommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationPostCommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationPostComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPostCommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationPostCommentAggregateArgs>(args: Subset<T, NotificationPostCommentAggregateArgs>): Prisma.PrismaPromise<GetNotificationPostCommentAggregateType<T>>

    /**
     * Group by NotificationPostComment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationPostCommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationPostCommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationPostCommentGroupByArgs['orderBy'] }
        : { orderBy?: NotificationPostCommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationPostCommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationPostCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationPostComment model
   */
  readonly fields: NotificationPostCommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationPostComment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationPostCommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    notification<T extends NotificationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificationDefaultArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    comment<T extends CommentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommentDefaultArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the NotificationPostComment model
   */ 
  interface NotificationPostCommentFieldRefs {
    readonly id: FieldRef<"NotificationPostComment", 'String'>
    readonly notificationId: FieldRef<"NotificationPostComment", 'String'>
    readonly commentId: FieldRef<"NotificationPostComment", 'String'>
  }
    

  // Custom InputTypes
  /**
   * NotificationPostComment findUnique
   */
  export type NotificationPostCommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPostComment
     */
    select?: NotificationPostCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPostCommentInclude<ExtArgs> | null
    /**
     * Filter, which NotificationPostComment to fetch.
     */
    where: NotificationPostCommentWhereUniqueInput
  }

  /**
   * NotificationPostComment findUniqueOrThrow
   */
  export type NotificationPostCommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPostComment
     */
    select?: NotificationPostCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPostCommentInclude<ExtArgs> | null
    /**
     * Filter, which NotificationPostComment to fetch.
     */
    where: NotificationPostCommentWhereUniqueInput
  }

  /**
   * NotificationPostComment findFirst
   */
  export type NotificationPostCommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPostComment
     */
    select?: NotificationPostCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPostCommentInclude<ExtArgs> | null
    /**
     * Filter, which NotificationPostComment to fetch.
     */
    where?: NotificationPostCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationPostComments to fetch.
     */
    orderBy?: NotificationPostCommentOrderByWithRelationInput | NotificationPostCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationPostComments.
     */
    cursor?: NotificationPostCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationPostComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationPostComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationPostComments.
     */
    distinct?: NotificationPostCommentScalarFieldEnum | NotificationPostCommentScalarFieldEnum[]
  }

  /**
   * NotificationPostComment findFirstOrThrow
   */
  export type NotificationPostCommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPostComment
     */
    select?: NotificationPostCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPostCommentInclude<ExtArgs> | null
    /**
     * Filter, which NotificationPostComment to fetch.
     */
    where?: NotificationPostCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationPostComments to fetch.
     */
    orderBy?: NotificationPostCommentOrderByWithRelationInput | NotificationPostCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationPostComments.
     */
    cursor?: NotificationPostCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationPostComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationPostComments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationPostComments.
     */
    distinct?: NotificationPostCommentScalarFieldEnum | NotificationPostCommentScalarFieldEnum[]
  }

  /**
   * NotificationPostComment findMany
   */
  export type NotificationPostCommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPostComment
     */
    select?: NotificationPostCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPostCommentInclude<ExtArgs> | null
    /**
     * Filter, which NotificationPostComments to fetch.
     */
    where?: NotificationPostCommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationPostComments to fetch.
     */
    orderBy?: NotificationPostCommentOrderByWithRelationInput | NotificationPostCommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationPostComments.
     */
    cursor?: NotificationPostCommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationPostComments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationPostComments.
     */
    skip?: number
    distinct?: NotificationPostCommentScalarFieldEnum | NotificationPostCommentScalarFieldEnum[]
  }

  /**
   * NotificationPostComment create
   */
  export type NotificationPostCommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPostComment
     */
    select?: NotificationPostCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPostCommentInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationPostComment.
     */
    data: XOR<NotificationPostCommentCreateInput, NotificationPostCommentUncheckedCreateInput>
  }

  /**
   * NotificationPostComment createMany
   */
  export type NotificationPostCommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationPostComments.
     */
    data: NotificationPostCommentCreateManyInput | NotificationPostCommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationPostComment update
   */
  export type NotificationPostCommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPostComment
     */
    select?: NotificationPostCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPostCommentInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationPostComment.
     */
    data: XOR<NotificationPostCommentUpdateInput, NotificationPostCommentUncheckedUpdateInput>
    /**
     * Choose, which NotificationPostComment to update.
     */
    where: NotificationPostCommentWhereUniqueInput
  }

  /**
   * NotificationPostComment updateMany
   */
  export type NotificationPostCommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationPostComments.
     */
    data: XOR<NotificationPostCommentUpdateManyMutationInput, NotificationPostCommentUncheckedUpdateManyInput>
    /**
     * Filter which NotificationPostComments to update
     */
    where?: NotificationPostCommentWhereInput
  }

  /**
   * NotificationPostComment upsert
   */
  export type NotificationPostCommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPostComment
     */
    select?: NotificationPostCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPostCommentInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationPostComment to update in case it exists.
     */
    where: NotificationPostCommentWhereUniqueInput
    /**
     * In case the NotificationPostComment found by the `where` argument doesn't exist, create a new NotificationPostComment with this data.
     */
    create: XOR<NotificationPostCommentCreateInput, NotificationPostCommentUncheckedCreateInput>
    /**
     * In case the NotificationPostComment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationPostCommentUpdateInput, NotificationPostCommentUncheckedUpdateInput>
  }

  /**
   * NotificationPostComment delete
   */
  export type NotificationPostCommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPostComment
     */
    select?: NotificationPostCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPostCommentInclude<ExtArgs> | null
    /**
     * Filter which NotificationPostComment to delete.
     */
    where: NotificationPostCommentWhereUniqueInput
  }

  /**
   * NotificationPostComment deleteMany
   */
  export type NotificationPostCommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationPostComments to delete
     */
    where?: NotificationPostCommentWhereInput
  }

  /**
   * NotificationPostComment without action
   */
  export type NotificationPostCommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPostComment
     */
    select?: NotificationPostCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPostCommentInclude<ExtArgs> | null
  }


  /**
   * Model NotificationCommentReply
   */

  export type AggregateNotificationCommentReply = {
    _count: NotificationCommentReplyCountAggregateOutputType | null
    _min: NotificationCommentReplyMinAggregateOutputType | null
    _max: NotificationCommentReplyMaxAggregateOutputType | null
  }

  export type NotificationCommentReplyMinAggregateOutputType = {
    id: string | null
    notificationId: string | null
    commentId: string | null
  }

  export type NotificationCommentReplyMaxAggregateOutputType = {
    id: string | null
    notificationId: string | null
    commentId: string | null
  }

  export type NotificationCommentReplyCountAggregateOutputType = {
    id: number
    notificationId: number
    commentId: number
    _all: number
  }


  export type NotificationCommentReplyMinAggregateInputType = {
    id?: true
    notificationId?: true
    commentId?: true
  }

  export type NotificationCommentReplyMaxAggregateInputType = {
    id?: true
    notificationId?: true
    commentId?: true
  }

  export type NotificationCommentReplyCountAggregateInputType = {
    id?: true
    notificationId?: true
    commentId?: true
    _all?: true
  }

  export type NotificationCommentReplyAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationCommentReply to aggregate.
     */
    where?: NotificationCommentReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationCommentReplies to fetch.
     */
    orderBy?: NotificationCommentReplyOrderByWithRelationInput | NotificationCommentReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: NotificationCommentReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationCommentReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationCommentReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned NotificationCommentReplies
    **/
    _count?: true | NotificationCommentReplyCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: NotificationCommentReplyMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: NotificationCommentReplyMaxAggregateInputType
  }

  export type GetNotificationCommentReplyAggregateType<T extends NotificationCommentReplyAggregateArgs> = {
        [P in keyof T & keyof AggregateNotificationCommentReply]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateNotificationCommentReply[P]>
      : GetScalarType<T[P], AggregateNotificationCommentReply[P]>
  }




  export type NotificationCommentReplyGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: NotificationCommentReplyWhereInput
    orderBy?: NotificationCommentReplyOrderByWithAggregationInput | NotificationCommentReplyOrderByWithAggregationInput[]
    by: NotificationCommentReplyScalarFieldEnum[] | NotificationCommentReplyScalarFieldEnum
    having?: NotificationCommentReplyScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: NotificationCommentReplyCountAggregateInputType | true
    _min?: NotificationCommentReplyMinAggregateInputType
    _max?: NotificationCommentReplyMaxAggregateInputType
  }

  export type NotificationCommentReplyGroupByOutputType = {
    id: string
    notificationId: string
    commentId: string
    _count: NotificationCommentReplyCountAggregateOutputType | null
    _min: NotificationCommentReplyMinAggregateOutputType | null
    _max: NotificationCommentReplyMaxAggregateOutputType | null
  }

  type GetNotificationCommentReplyGroupByPayload<T extends NotificationCommentReplyGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<NotificationCommentReplyGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof NotificationCommentReplyGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], NotificationCommentReplyGroupByOutputType[P]>
            : GetScalarType<T[P], NotificationCommentReplyGroupByOutputType[P]>
        }
      >
    >


  export type NotificationCommentReplySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    notificationId?: boolean
    commentId?: boolean
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["notificationCommentReply"]>

  export type NotificationCommentReplySelectScalar = {
    id?: boolean
    notificationId?: boolean
    commentId?: boolean
  }


  export type NotificationCommentReplyInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    notification?: boolean | NotificationDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }


  export type $NotificationCommentReplyPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "NotificationCommentReply"
    objects: {
      notification: Prisma.$NotificationPayload<ExtArgs>
      comment: Prisma.$CommentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      notificationId: string
      commentId: string
    }, ExtArgs["result"]["notificationCommentReply"]>
    composites: {}
  }


  type NotificationCommentReplyGetPayload<S extends boolean | null | undefined | NotificationCommentReplyDefaultArgs> = $Result.GetResult<Prisma.$NotificationCommentReplyPayload, S>

  type NotificationCommentReplyCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<NotificationCommentReplyFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: NotificationCommentReplyCountAggregateInputType | true
    }

  export interface NotificationCommentReplyDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['NotificationCommentReply'], meta: { name: 'NotificationCommentReply' } }
    /**
     * Find zero or one NotificationCommentReply that matches the filter.
     * @param {NotificationCommentReplyFindUniqueArgs} args - Arguments to find a NotificationCommentReply
     * @example
     * // Get one NotificationCommentReply
     * const notificationCommentReply = await prisma.notificationCommentReply.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends NotificationCommentReplyFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCommentReplyFindUniqueArgs<ExtArgs>>
    ): Prisma__NotificationCommentReplyClient<$Result.GetResult<Prisma.$NotificationCommentReplyPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one NotificationCommentReply that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {NotificationCommentReplyFindUniqueOrThrowArgs} args - Arguments to find a NotificationCommentReply
     * @example
     * // Get one NotificationCommentReply
     * const notificationCommentReply = await prisma.notificationCommentReply.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends NotificationCommentReplyFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCommentReplyFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationCommentReplyClient<$Result.GetResult<Prisma.$NotificationCommentReplyPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first NotificationCommentReply that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCommentReplyFindFirstArgs} args - Arguments to find a NotificationCommentReply
     * @example
     * // Get one NotificationCommentReply
     * const notificationCommentReply = await prisma.notificationCommentReply.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends NotificationCommentReplyFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCommentReplyFindFirstArgs<ExtArgs>>
    ): Prisma__NotificationCommentReplyClient<$Result.GetResult<Prisma.$NotificationCommentReplyPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first NotificationCommentReply that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCommentReplyFindFirstOrThrowArgs} args - Arguments to find a NotificationCommentReply
     * @example
     * // Get one NotificationCommentReply
     * const notificationCommentReply = await prisma.notificationCommentReply.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends NotificationCommentReplyFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCommentReplyFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__NotificationCommentReplyClient<$Result.GetResult<Prisma.$NotificationCommentReplyPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more NotificationCommentReplies that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCommentReplyFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all NotificationCommentReplies
     * const notificationCommentReplies = await prisma.notificationCommentReply.findMany()
     * 
     * // Get first 10 NotificationCommentReplies
     * const notificationCommentReplies = await prisma.notificationCommentReply.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const notificationCommentReplyWithIdOnly = await prisma.notificationCommentReply.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends NotificationCommentReplyFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCommentReplyFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationCommentReplyPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a NotificationCommentReply.
     * @param {NotificationCommentReplyCreateArgs} args - Arguments to create a NotificationCommentReply.
     * @example
     * // Create one NotificationCommentReply
     * const NotificationCommentReply = await prisma.notificationCommentReply.create({
     *   data: {
     *     // ... data to create a NotificationCommentReply
     *   }
     * })
     * 
    **/
    create<T extends NotificationCommentReplyCreateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCommentReplyCreateArgs<ExtArgs>>
    ): Prisma__NotificationCommentReplyClient<$Result.GetResult<Prisma.$NotificationCommentReplyPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many NotificationCommentReplies.
     *     @param {NotificationCommentReplyCreateManyArgs} args - Arguments to create many NotificationCommentReplies.
     *     @example
     *     // Create many NotificationCommentReplies
     *     const notificationCommentReply = await prisma.notificationCommentReply.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends NotificationCommentReplyCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCommentReplyCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a NotificationCommentReply.
     * @param {NotificationCommentReplyDeleteArgs} args - Arguments to delete one NotificationCommentReply.
     * @example
     * // Delete one NotificationCommentReply
     * const NotificationCommentReply = await prisma.notificationCommentReply.delete({
     *   where: {
     *     // ... filter to delete one NotificationCommentReply
     *   }
     * })
     * 
    **/
    delete<T extends NotificationCommentReplyDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCommentReplyDeleteArgs<ExtArgs>>
    ): Prisma__NotificationCommentReplyClient<$Result.GetResult<Prisma.$NotificationCommentReplyPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one NotificationCommentReply.
     * @param {NotificationCommentReplyUpdateArgs} args - Arguments to update one NotificationCommentReply.
     * @example
     * // Update one NotificationCommentReply
     * const notificationCommentReply = await prisma.notificationCommentReply.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends NotificationCommentReplyUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCommentReplyUpdateArgs<ExtArgs>>
    ): Prisma__NotificationCommentReplyClient<$Result.GetResult<Prisma.$NotificationCommentReplyPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more NotificationCommentReplies.
     * @param {NotificationCommentReplyDeleteManyArgs} args - Arguments to filter NotificationCommentReplies to delete.
     * @example
     * // Delete a few NotificationCommentReplies
     * const { count } = await prisma.notificationCommentReply.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends NotificationCommentReplyDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, NotificationCommentReplyDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more NotificationCommentReplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCommentReplyUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many NotificationCommentReplies
     * const notificationCommentReply = await prisma.notificationCommentReply.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends NotificationCommentReplyUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCommentReplyUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one NotificationCommentReply.
     * @param {NotificationCommentReplyUpsertArgs} args - Arguments to update or create a NotificationCommentReply.
     * @example
     * // Update or create a NotificationCommentReply
     * const notificationCommentReply = await prisma.notificationCommentReply.upsert({
     *   create: {
     *     // ... data to create a NotificationCommentReply
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the NotificationCommentReply we want to update
     *   }
     * })
    **/
    upsert<T extends NotificationCommentReplyUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, NotificationCommentReplyUpsertArgs<ExtArgs>>
    ): Prisma__NotificationCommentReplyClient<$Result.GetResult<Prisma.$NotificationCommentReplyPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of NotificationCommentReplies.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCommentReplyCountArgs} args - Arguments to filter NotificationCommentReplies to count.
     * @example
     * // Count the number of NotificationCommentReplies
     * const count = await prisma.notificationCommentReply.count({
     *   where: {
     *     // ... the filter for the NotificationCommentReplies we want to count
     *   }
     * })
    **/
    count<T extends NotificationCommentReplyCountArgs>(
      args?: Subset<T, NotificationCommentReplyCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], NotificationCommentReplyCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a NotificationCommentReply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCommentReplyAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends NotificationCommentReplyAggregateArgs>(args: Subset<T, NotificationCommentReplyAggregateArgs>): Prisma.PrismaPromise<GetNotificationCommentReplyAggregateType<T>>

    /**
     * Group by NotificationCommentReply.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {NotificationCommentReplyGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends NotificationCommentReplyGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: NotificationCommentReplyGroupByArgs['orderBy'] }
        : { orderBy?: NotificationCommentReplyGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, NotificationCommentReplyGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetNotificationCommentReplyGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the NotificationCommentReply model
   */
  readonly fields: NotificationCommentReplyFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for NotificationCommentReply.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__NotificationCommentReplyClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    notification<T extends NotificationDefaultArgs<ExtArgs> = {}>(args?: Subset<T, NotificationDefaultArgs<ExtArgs>>): Prisma__NotificationClient<$Result.GetResult<Prisma.$NotificationPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    comment<T extends CommentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommentDefaultArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the NotificationCommentReply model
   */ 
  interface NotificationCommentReplyFieldRefs {
    readonly id: FieldRef<"NotificationCommentReply", 'String'>
    readonly notificationId: FieldRef<"NotificationCommentReply", 'String'>
    readonly commentId: FieldRef<"NotificationCommentReply", 'String'>
  }
    

  // Custom InputTypes
  /**
   * NotificationCommentReply findUnique
   */
  export type NotificationCommentReplyFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommentReply
     */
    select?: NotificationCommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommentReplyInclude<ExtArgs> | null
    /**
     * Filter, which NotificationCommentReply to fetch.
     */
    where: NotificationCommentReplyWhereUniqueInput
  }

  /**
   * NotificationCommentReply findUniqueOrThrow
   */
  export type NotificationCommentReplyFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommentReply
     */
    select?: NotificationCommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommentReplyInclude<ExtArgs> | null
    /**
     * Filter, which NotificationCommentReply to fetch.
     */
    where: NotificationCommentReplyWhereUniqueInput
  }

  /**
   * NotificationCommentReply findFirst
   */
  export type NotificationCommentReplyFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommentReply
     */
    select?: NotificationCommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommentReplyInclude<ExtArgs> | null
    /**
     * Filter, which NotificationCommentReply to fetch.
     */
    where?: NotificationCommentReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationCommentReplies to fetch.
     */
    orderBy?: NotificationCommentReplyOrderByWithRelationInput | NotificationCommentReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationCommentReplies.
     */
    cursor?: NotificationCommentReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationCommentReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationCommentReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationCommentReplies.
     */
    distinct?: NotificationCommentReplyScalarFieldEnum | NotificationCommentReplyScalarFieldEnum[]
  }

  /**
   * NotificationCommentReply findFirstOrThrow
   */
  export type NotificationCommentReplyFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommentReply
     */
    select?: NotificationCommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommentReplyInclude<ExtArgs> | null
    /**
     * Filter, which NotificationCommentReply to fetch.
     */
    where?: NotificationCommentReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationCommentReplies to fetch.
     */
    orderBy?: NotificationCommentReplyOrderByWithRelationInput | NotificationCommentReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for NotificationCommentReplies.
     */
    cursor?: NotificationCommentReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationCommentReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationCommentReplies.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of NotificationCommentReplies.
     */
    distinct?: NotificationCommentReplyScalarFieldEnum | NotificationCommentReplyScalarFieldEnum[]
  }

  /**
   * NotificationCommentReply findMany
   */
  export type NotificationCommentReplyFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommentReply
     */
    select?: NotificationCommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommentReplyInclude<ExtArgs> | null
    /**
     * Filter, which NotificationCommentReplies to fetch.
     */
    where?: NotificationCommentReplyWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of NotificationCommentReplies to fetch.
     */
    orderBy?: NotificationCommentReplyOrderByWithRelationInput | NotificationCommentReplyOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing NotificationCommentReplies.
     */
    cursor?: NotificationCommentReplyWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` NotificationCommentReplies from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` NotificationCommentReplies.
     */
    skip?: number
    distinct?: NotificationCommentReplyScalarFieldEnum | NotificationCommentReplyScalarFieldEnum[]
  }

  /**
   * NotificationCommentReply create
   */
  export type NotificationCommentReplyCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommentReply
     */
    select?: NotificationCommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommentReplyInclude<ExtArgs> | null
    /**
     * The data needed to create a NotificationCommentReply.
     */
    data: XOR<NotificationCommentReplyCreateInput, NotificationCommentReplyUncheckedCreateInput>
  }

  /**
   * NotificationCommentReply createMany
   */
  export type NotificationCommentReplyCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many NotificationCommentReplies.
     */
    data: NotificationCommentReplyCreateManyInput | NotificationCommentReplyCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * NotificationCommentReply update
   */
  export type NotificationCommentReplyUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommentReply
     */
    select?: NotificationCommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommentReplyInclude<ExtArgs> | null
    /**
     * The data needed to update a NotificationCommentReply.
     */
    data: XOR<NotificationCommentReplyUpdateInput, NotificationCommentReplyUncheckedUpdateInput>
    /**
     * Choose, which NotificationCommentReply to update.
     */
    where: NotificationCommentReplyWhereUniqueInput
  }

  /**
   * NotificationCommentReply updateMany
   */
  export type NotificationCommentReplyUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update NotificationCommentReplies.
     */
    data: XOR<NotificationCommentReplyUpdateManyMutationInput, NotificationCommentReplyUncheckedUpdateManyInput>
    /**
     * Filter which NotificationCommentReplies to update
     */
    where?: NotificationCommentReplyWhereInput
  }

  /**
   * NotificationCommentReply upsert
   */
  export type NotificationCommentReplyUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommentReply
     */
    select?: NotificationCommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommentReplyInclude<ExtArgs> | null
    /**
     * The filter to search for the NotificationCommentReply to update in case it exists.
     */
    where: NotificationCommentReplyWhereUniqueInput
    /**
     * In case the NotificationCommentReply found by the `where` argument doesn't exist, create a new NotificationCommentReply with this data.
     */
    create: XOR<NotificationCommentReplyCreateInput, NotificationCommentReplyUncheckedCreateInput>
    /**
     * In case the NotificationCommentReply was found with the provided `where` argument, update it with this data.
     */
    update: XOR<NotificationCommentReplyUpdateInput, NotificationCommentReplyUncheckedUpdateInput>
  }

  /**
   * NotificationCommentReply delete
   */
  export type NotificationCommentReplyDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommentReply
     */
    select?: NotificationCommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommentReplyInclude<ExtArgs> | null
    /**
     * Filter which NotificationCommentReply to delete.
     */
    where: NotificationCommentReplyWhereUniqueInput
  }

  /**
   * NotificationCommentReply deleteMany
   */
  export type NotificationCommentReplyDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which NotificationCommentReplies to delete
     */
    where?: NotificationCommentReplyWhereInput
  }

  /**
   * NotificationCommentReply without action
   */
  export type NotificationCommentReplyDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommentReply
     */
    select?: NotificationCommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommentReplyInclude<ExtArgs> | null
  }


  /**
   * Model UserShare
   */

  export type AggregateUserShare = {
    _count: UserShareCountAggregateOutputType | null
    _min: UserShareMinAggregateOutputType | null
    _max: UserShareMaxAggregateOutputType | null
  }

  export type UserShareMinAggregateOutputType = {
    userId: string | null
    postId: string | null
  }

  export type UserShareMaxAggregateOutputType = {
    userId: string | null
    postId: string | null
  }

  export type UserShareCountAggregateOutputType = {
    userId: number
    postId: number
    _all: number
  }


  export type UserShareMinAggregateInputType = {
    userId?: true
    postId?: true
  }

  export type UserShareMaxAggregateInputType = {
    userId?: true
    postId?: true
  }

  export type UserShareCountAggregateInputType = {
    userId?: true
    postId?: true
    _all?: true
  }

  export type UserShareAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserShare to aggregate.
     */
    where?: UserShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserShares to fetch.
     */
    orderBy?: UserShareOrderByWithRelationInput | UserShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserShares
    **/
    _count?: true | UserShareCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserShareMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserShareMaxAggregateInputType
  }

  export type GetUserShareAggregateType<T extends UserShareAggregateArgs> = {
        [P in keyof T & keyof AggregateUserShare]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserShare[P]>
      : GetScalarType<T[P], AggregateUserShare[P]>
  }




  export type UserShareGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserShareWhereInput
    orderBy?: UserShareOrderByWithAggregationInput | UserShareOrderByWithAggregationInput[]
    by: UserShareScalarFieldEnum[] | UserShareScalarFieldEnum
    having?: UserShareScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserShareCountAggregateInputType | true
    _min?: UserShareMinAggregateInputType
    _max?: UserShareMaxAggregateInputType
  }

  export type UserShareGroupByOutputType = {
    userId: string
    postId: string
    _count: UserShareCountAggregateOutputType | null
    _min: UserShareMinAggregateOutputType | null
    _max: UserShareMaxAggregateOutputType | null
  }

  type GetUserShareGroupByPayload<T extends UserShareGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserShareGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserShareGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserShareGroupByOutputType[P]>
            : GetScalarType<T[P], UserShareGroupByOutputType[P]>
        }
      >
    >


  export type UserShareSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    postId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userShare"]>

  export type UserShareSelectScalar = {
    userId?: boolean
    postId?: boolean
  }


  export type UserShareInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }


  export type $UserSharePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserShare"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      postId: string
    }, ExtArgs["result"]["userShare"]>
    composites: {}
  }


  type UserShareGetPayload<S extends boolean | null | undefined | UserShareDefaultArgs> = $Result.GetResult<Prisma.$UserSharePayload, S>

  type UserShareCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserShareFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserShareCountAggregateInputType | true
    }

  export interface UserShareDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserShare'], meta: { name: 'UserShare' } }
    /**
     * Find zero or one UserShare that matches the filter.
     * @param {UserShareFindUniqueArgs} args - Arguments to find a UserShare
     * @example
     * // Get one UserShare
     * const userShare = await prisma.userShare.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserShareFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserShareFindUniqueArgs<ExtArgs>>
    ): Prisma__UserShareClient<$Result.GetResult<Prisma.$UserSharePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserShare that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserShareFindUniqueOrThrowArgs} args - Arguments to find a UserShare
     * @example
     * // Get one UserShare
     * const userShare = await prisma.userShare.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserShareFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserShareFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserShareClient<$Result.GetResult<Prisma.$UserSharePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserShare that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserShareFindFirstArgs} args - Arguments to find a UserShare
     * @example
     * // Get one UserShare
     * const userShare = await prisma.userShare.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserShareFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserShareFindFirstArgs<ExtArgs>>
    ): Prisma__UserShareClient<$Result.GetResult<Prisma.$UserSharePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserShare that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserShareFindFirstOrThrowArgs} args - Arguments to find a UserShare
     * @example
     * // Get one UserShare
     * const userShare = await prisma.userShare.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserShareFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserShareFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserShareClient<$Result.GetResult<Prisma.$UserSharePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserShares that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserShareFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserShares
     * const userShares = await prisma.userShare.findMany()
     * 
     * // Get first 10 UserShares
     * const userShares = await prisma.userShare.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const userShareWithUserIdOnly = await prisma.userShare.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends UserShareFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserShareFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserSharePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserShare.
     * @param {UserShareCreateArgs} args - Arguments to create a UserShare.
     * @example
     * // Create one UserShare
     * const UserShare = await prisma.userShare.create({
     *   data: {
     *     // ... data to create a UserShare
     *   }
     * })
     * 
    **/
    create<T extends UserShareCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserShareCreateArgs<ExtArgs>>
    ): Prisma__UserShareClient<$Result.GetResult<Prisma.$UserSharePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserShares.
     *     @param {UserShareCreateManyArgs} args - Arguments to create many UserShares.
     *     @example
     *     // Create many UserShares
     *     const userShare = await prisma.userShare.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserShareCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserShareCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserShare.
     * @param {UserShareDeleteArgs} args - Arguments to delete one UserShare.
     * @example
     * // Delete one UserShare
     * const UserShare = await prisma.userShare.delete({
     *   where: {
     *     // ... filter to delete one UserShare
     *   }
     * })
     * 
    **/
    delete<T extends UserShareDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserShareDeleteArgs<ExtArgs>>
    ): Prisma__UserShareClient<$Result.GetResult<Prisma.$UserSharePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserShare.
     * @param {UserShareUpdateArgs} args - Arguments to update one UserShare.
     * @example
     * // Update one UserShare
     * const userShare = await prisma.userShare.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserShareUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserShareUpdateArgs<ExtArgs>>
    ): Prisma__UserShareClient<$Result.GetResult<Prisma.$UserSharePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserShares.
     * @param {UserShareDeleteManyArgs} args - Arguments to filter UserShares to delete.
     * @example
     * // Delete a few UserShares
     * const { count } = await prisma.userShare.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserShareDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserShareDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserShares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserShareUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserShares
     * const userShare = await prisma.userShare.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserShareUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserShareUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserShare.
     * @param {UserShareUpsertArgs} args - Arguments to update or create a UserShare.
     * @example
     * // Update or create a UserShare
     * const userShare = await prisma.userShare.upsert({
     *   create: {
     *     // ... data to create a UserShare
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserShare we want to update
     *   }
     * })
    **/
    upsert<T extends UserShareUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserShareUpsertArgs<ExtArgs>>
    ): Prisma__UserShareClient<$Result.GetResult<Prisma.$UserSharePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserShares.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserShareCountArgs} args - Arguments to filter UserShares to count.
     * @example
     * // Count the number of UserShares
     * const count = await prisma.userShare.count({
     *   where: {
     *     // ... the filter for the UserShares we want to count
     *   }
     * })
    **/
    count<T extends UserShareCountArgs>(
      args?: Subset<T, UserShareCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserShareCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserShare.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserShareAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserShareAggregateArgs>(args: Subset<T, UserShareAggregateArgs>): Prisma.PrismaPromise<GetUserShareAggregateType<T>>

    /**
     * Group by UserShare.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserShareGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserShareGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserShareGroupByArgs['orderBy'] }
        : { orderBy?: UserShareGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserShareGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserShareGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserShare model
   */
  readonly fields: UserShareFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserShare.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserShareClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserShare model
   */ 
  interface UserShareFieldRefs {
    readonly userId: FieldRef<"UserShare", 'String'>
    readonly postId: FieldRef<"UserShare", 'String'>
  }
    

  // Custom InputTypes
  /**
   * UserShare findUnique
   */
  export type UserShareFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShare
     */
    select?: UserShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShareInclude<ExtArgs> | null
    /**
     * Filter, which UserShare to fetch.
     */
    where: UserShareWhereUniqueInput
  }

  /**
   * UserShare findUniqueOrThrow
   */
  export type UserShareFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShare
     */
    select?: UserShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShareInclude<ExtArgs> | null
    /**
     * Filter, which UserShare to fetch.
     */
    where: UserShareWhereUniqueInput
  }

  /**
   * UserShare findFirst
   */
  export type UserShareFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShare
     */
    select?: UserShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShareInclude<ExtArgs> | null
    /**
     * Filter, which UserShare to fetch.
     */
    where?: UserShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserShares to fetch.
     */
    orderBy?: UserShareOrderByWithRelationInput | UserShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserShares.
     */
    cursor?: UserShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserShares.
     */
    distinct?: UserShareScalarFieldEnum | UserShareScalarFieldEnum[]
  }

  /**
   * UserShare findFirstOrThrow
   */
  export type UserShareFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShare
     */
    select?: UserShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShareInclude<ExtArgs> | null
    /**
     * Filter, which UserShare to fetch.
     */
    where?: UserShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserShares to fetch.
     */
    orderBy?: UserShareOrderByWithRelationInput | UserShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserShares.
     */
    cursor?: UserShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserShares.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserShares.
     */
    distinct?: UserShareScalarFieldEnum | UserShareScalarFieldEnum[]
  }

  /**
   * UserShare findMany
   */
  export type UserShareFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShare
     */
    select?: UserShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShareInclude<ExtArgs> | null
    /**
     * Filter, which UserShares to fetch.
     */
    where?: UserShareWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserShares to fetch.
     */
    orderBy?: UserShareOrderByWithRelationInput | UserShareOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserShares.
     */
    cursor?: UserShareWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserShares from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserShares.
     */
    skip?: number
    distinct?: UserShareScalarFieldEnum | UserShareScalarFieldEnum[]
  }

  /**
   * UserShare create
   */
  export type UserShareCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShare
     */
    select?: UserShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShareInclude<ExtArgs> | null
    /**
     * The data needed to create a UserShare.
     */
    data: XOR<UserShareCreateInput, UserShareUncheckedCreateInput>
  }

  /**
   * UserShare createMany
   */
  export type UserShareCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserShares.
     */
    data: UserShareCreateManyInput | UserShareCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserShare update
   */
  export type UserShareUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShare
     */
    select?: UserShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShareInclude<ExtArgs> | null
    /**
     * The data needed to update a UserShare.
     */
    data: XOR<UserShareUpdateInput, UserShareUncheckedUpdateInput>
    /**
     * Choose, which UserShare to update.
     */
    where: UserShareWhereUniqueInput
  }

  /**
   * UserShare updateMany
   */
  export type UserShareUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserShares.
     */
    data: XOR<UserShareUpdateManyMutationInput, UserShareUncheckedUpdateManyInput>
    /**
     * Filter which UserShares to update
     */
    where?: UserShareWhereInput
  }

  /**
   * UserShare upsert
   */
  export type UserShareUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShare
     */
    select?: UserShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShareInclude<ExtArgs> | null
    /**
     * The filter to search for the UserShare to update in case it exists.
     */
    where: UserShareWhereUniqueInput
    /**
     * In case the UserShare found by the `where` argument doesn't exist, create a new UserShare with this data.
     */
    create: XOR<UserShareCreateInput, UserShareUncheckedCreateInput>
    /**
     * In case the UserShare was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserShareUpdateInput, UserShareUncheckedUpdateInput>
  }

  /**
   * UserShare delete
   */
  export type UserShareDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShare
     */
    select?: UserShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShareInclude<ExtArgs> | null
    /**
     * Filter which UserShare to delete.
     */
    where: UserShareWhereUniqueInput
  }

  /**
   * UserShare deleteMany
   */
  export type UserShareDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserShares to delete
     */
    where?: UserShareWhereInput
  }

  /**
   * UserShare without action
   */
  export type UserShareDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserShare
     */
    select?: UserShareSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserShareInclude<ExtArgs> | null
  }


  /**
   * Model Image
   */

  export type AggregateImage = {
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  export type ImageAvgAggregateOutputType = {
    width: number | null
    height: number | null
  }

  export type ImageSumAggregateOutputType = {
    width: number | null
    height: number | null
  }

  export type ImageMinAggregateOutputType = {
    id: string | null
    url: string | null
    fallbackUrl: string | null
    alt: string | null
    postId: string | null
    width: number | null
    height: number | null
  }

  export type ImageMaxAggregateOutputType = {
    id: string | null
    url: string | null
    fallbackUrl: string | null
    alt: string | null
    postId: string | null
    width: number | null
    height: number | null
  }

  export type ImageCountAggregateOutputType = {
    id: number
    url: number
    fallbackUrl: number
    alt: number
    postId: number
    width: number
    height: number
    _all: number
  }


  export type ImageAvgAggregateInputType = {
    width?: true
    height?: true
  }

  export type ImageSumAggregateInputType = {
    width?: true
    height?: true
  }

  export type ImageMinAggregateInputType = {
    id?: true
    url?: true
    fallbackUrl?: true
    alt?: true
    postId?: true
    width?: true
    height?: true
  }

  export type ImageMaxAggregateInputType = {
    id?: true
    url?: true
    fallbackUrl?: true
    alt?: true
    postId?: true
    width?: true
    height?: true
  }

  export type ImageCountAggregateInputType = {
    id?: true
    url?: true
    fallbackUrl?: true
    alt?: true
    postId?: true
    width?: true
    height?: true
    _all?: true
  }

  export type ImageAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Image to aggregate.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Images
    **/
    _count?: true | ImageCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: ImageAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: ImageSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: ImageMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: ImageMaxAggregateInputType
  }

  export type GetImageAggregateType<T extends ImageAggregateArgs> = {
        [P in keyof T & keyof AggregateImage]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateImage[P]>
      : GetScalarType<T[P], AggregateImage[P]>
  }




  export type ImageGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: ImageWhereInput
    orderBy?: ImageOrderByWithAggregationInput | ImageOrderByWithAggregationInput[]
    by: ImageScalarFieldEnum[] | ImageScalarFieldEnum
    having?: ImageScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: ImageCountAggregateInputType | true
    _avg?: ImageAvgAggregateInputType
    _sum?: ImageSumAggregateInputType
    _min?: ImageMinAggregateInputType
    _max?: ImageMaxAggregateInputType
  }

  export type ImageGroupByOutputType = {
    id: string
    url: string
    fallbackUrl: string
    alt: string
    postId: string
    width: number
    height: number
    _count: ImageCountAggregateOutputType | null
    _avg: ImageAvgAggregateOutputType | null
    _sum: ImageSumAggregateOutputType | null
    _min: ImageMinAggregateOutputType | null
    _max: ImageMaxAggregateOutputType | null
  }

  type GetImageGroupByPayload<T extends ImageGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<ImageGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof ImageGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], ImageGroupByOutputType[P]>
            : GetScalarType<T[P], ImageGroupByOutputType[P]>
        }
      >
    >


  export type ImageSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    url?: boolean
    fallbackUrl?: boolean
    alt?: boolean
    postId?: boolean
    width?: boolean
    height?: boolean
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["image"]>

  export type ImageSelectScalar = {
    id?: boolean
    url?: boolean
    fallbackUrl?: boolean
    alt?: boolean
    postId?: boolean
    width?: boolean
    height?: boolean
  }


  export type ImageInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    post?: boolean | PostDefaultArgs<ExtArgs>
  }


  export type $ImagePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Image"
    objects: {
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      url: string
      fallbackUrl: string
      alt: string
      postId: string
      width: number
      height: number
    }, ExtArgs["result"]["image"]>
    composites: {}
  }


  type ImageGetPayload<S extends boolean | null | undefined | ImageDefaultArgs> = $Result.GetResult<Prisma.$ImagePayload, S>

  type ImageCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<ImageFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: ImageCountAggregateInputType | true
    }

  export interface ImageDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Image'], meta: { name: 'Image' } }
    /**
     * Find zero or one Image that matches the filter.
     * @param {ImageFindUniqueArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends ImageFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, ImageFindUniqueArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Image that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {ImageFindUniqueOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends ImageFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Image that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends ImageFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageFindFirstArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Image that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindFirstOrThrowArgs} args - Arguments to find a Image
     * @example
     * // Get one Image
     * const image = await prisma.image.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends ImageFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Images that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Images
     * const images = await prisma.image.findMany()
     * 
     * // Get first 10 Images
     * const images = await prisma.image.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const imageWithIdOnly = await prisma.image.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends ImageFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Image.
     * @param {ImageCreateArgs} args - Arguments to create a Image.
     * @example
     * // Create one Image
     * const Image = await prisma.image.create({
     *   data: {
     *     // ... data to create a Image
     *   }
     * })
     * 
    **/
    create<T extends ImageCreateArgs<ExtArgs>>(
      args: SelectSubset<T, ImageCreateArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Images.
     *     @param {ImageCreateManyArgs} args - Arguments to create many Images.
     *     @example
     *     // Create many Images
     *     const image = await prisma.image.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends ImageCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Image.
     * @param {ImageDeleteArgs} args - Arguments to delete one Image.
     * @example
     * // Delete one Image
     * const Image = await prisma.image.delete({
     *   where: {
     *     // ... filter to delete one Image
     *   }
     * })
     * 
    **/
    delete<T extends ImageDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, ImageDeleteArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Image.
     * @param {ImageUpdateArgs} args - Arguments to update one Image.
     * @example
     * // Update one Image
     * const image = await prisma.image.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends ImageUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, ImageUpdateArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Images.
     * @param {ImageDeleteManyArgs} args - Arguments to filter Images to delete.
     * @example
     * // Delete a few Images
     * const { count } = await prisma.image.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends ImageDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, ImageDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Images
     * const image = await prisma.image.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends ImageUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, ImageUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Image.
     * @param {ImageUpsertArgs} args - Arguments to update or create a Image.
     * @example
     * // Update or create a Image
     * const image = await prisma.image.upsert({
     *   create: {
     *     // ... data to create a Image
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Image we want to update
     *   }
     * })
    **/
    upsert<T extends ImageUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, ImageUpsertArgs<ExtArgs>>
    ): Prisma__ImageClient<$Result.GetResult<Prisma.$ImagePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Images.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageCountArgs} args - Arguments to filter Images to count.
     * @example
     * // Count the number of Images
     * const count = await prisma.image.count({
     *   where: {
     *     // ... the filter for the Images we want to count
     *   }
     * })
    **/
    count<T extends ImageCountArgs>(
      args?: Subset<T, ImageCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], ImageCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends ImageAggregateArgs>(args: Subset<T, ImageAggregateArgs>): Prisma.PrismaPromise<GetImageAggregateType<T>>

    /**
     * Group by Image.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {ImageGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends ImageGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: ImageGroupByArgs['orderBy'] }
        : { orderBy?: ImageGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, ImageGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetImageGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Image model
   */
  readonly fields: ImageFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Image.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__ImageClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Image model
   */ 
  interface ImageFieldRefs {
    readonly id: FieldRef<"Image", 'String'>
    readonly url: FieldRef<"Image", 'String'>
    readonly fallbackUrl: FieldRef<"Image", 'String'>
    readonly alt: FieldRef<"Image", 'String'>
    readonly postId: FieldRef<"Image", 'String'>
    readonly width: FieldRef<"Image", 'Int'>
    readonly height: FieldRef<"Image", 'Int'>
  }
    

  // Custom InputTypes
  /**
   * Image findUnique
   */
  export type ImageFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findUniqueOrThrow
   */
  export type ImageFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image findFirst
   */
  export type ImageFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findFirstOrThrow
   */
  export type ImageFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Image to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Images.
     */
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image findMany
   */
  export type ImageFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter, which Images to fetch.
     */
    where?: ImageWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Images to fetch.
     */
    orderBy?: ImageOrderByWithRelationInput | ImageOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Images.
     */
    cursor?: ImageWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Images from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Images.
     */
    skip?: number
    distinct?: ImageScalarFieldEnum | ImageScalarFieldEnum[]
  }

  /**
   * Image create
   */
  export type ImageCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to create a Image.
     */
    data: XOR<ImageCreateInput, ImageUncheckedCreateInput>
  }

  /**
   * Image createMany
   */
  export type ImageCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Images.
     */
    data: ImageCreateManyInput | ImageCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Image update
   */
  export type ImageUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The data needed to update a Image.
     */
    data: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
    /**
     * Choose, which Image to update.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image updateMany
   */
  export type ImageUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Images.
     */
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyInput>
    /**
     * Filter which Images to update
     */
    where?: ImageWhereInput
  }

  /**
   * Image upsert
   */
  export type ImageUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * The filter to search for the Image to update in case it exists.
     */
    where: ImageWhereUniqueInput
    /**
     * In case the Image found by the `where` argument doesn't exist, create a new Image with this data.
     */
    create: XOR<ImageCreateInput, ImageUncheckedCreateInput>
    /**
     * In case the Image was found with the provided `where` argument, update it with this data.
     */
    update: XOR<ImageUpdateInput, ImageUncheckedUpdateInput>
  }

  /**
   * Image delete
   */
  export type ImageDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
    /**
     * Filter which Image to delete.
     */
    where: ImageWhereUniqueInput
  }

  /**
   * Image deleteMany
   */
  export type ImageDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Images to delete
     */
    where?: ImageWhereInput
  }

  /**
   * Image without action
   */
  export type ImageDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Image
     */
    select?: ImageSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: ImageInclude<ExtArgs> | null
  }


  /**
   * Model Comment
   */

  export type AggregateComment = {
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  export type CommentMinAggregateOutputType = {
    id: string | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    postId: string | null
    parentId: string | null
    isDeleted: boolean | null
  }

  export type CommentMaxAggregateOutputType = {
    id: string | null
    message: string | null
    createdAt: Date | null
    updatedAt: Date | null
    userId: string | null
    postId: string | null
    parentId: string | null
    isDeleted: boolean | null
  }

  export type CommentCountAggregateOutputType = {
    id: number
    message: number
    createdAt: number
    updatedAt: number
    userId: number
    postId: number
    parentId: number
    isDeleted: number
    _all: number
  }


  export type CommentMinAggregateInputType = {
    id?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    postId?: true
    parentId?: true
    isDeleted?: true
  }

  export type CommentMaxAggregateInputType = {
    id?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    postId?: true
    parentId?: true
    isDeleted?: true
  }

  export type CommentCountAggregateInputType = {
    id?: true
    message?: true
    createdAt?: true
    updatedAt?: true
    userId?: true
    postId?: true
    parentId?: true
    isDeleted?: true
    _all?: true
  }

  export type CommentAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comment to aggregate.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Comments
    **/
    _count?: true | CommentCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentMaxAggregateInputType
  }

  export type GetCommentAggregateType<T extends CommentAggregateArgs> = {
        [P in keyof T & keyof AggregateComment]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateComment[P]>
      : GetScalarType<T[P], AggregateComment[P]>
  }




  export type CommentGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithAggregationInput | CommentOrderByWithAggregationInput[]
    by: CommentScalarFieldEnum[] | CommentScalarFieldEnum
    having?: CommentScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentCountAggregateInputType | true
    _min?: CommentMinAggregateInputType
    _max?: CommentMaxAggregateInputType
  }

  export type CommentGroupByOutputType = {
    id: string
    message: string
    createdAt: Date
    updatedAt: Date
    userId: string
    postId: string
    parentId: string | null
    isDeleted: boolean
    _count: CommentCountAggregateOutputType | null
    _min: CommentMinAggregateOutputType | null
    _max: CommentMaxAggregateOutputType | null
  }

  type GetCommentGroupByPayload<T extends CommentGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentGroupByOutputType[P]>
            : GetScalarType<T[P], CommentGroupByOutputType[P]>
        }
      >
    >


  export type CommentSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    postId?: boolean
    parentId?: boolean
    isDeleted?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
    likes?: boolean | Comment$likesArgs<ExtArgs>
    parent?: boolean | Comment$parentArgs<ExtArgs>
    children?: boolean | Comment$childrenArgs<ExtArgs>
    notificationPostComment?: boolean | Comment$notificationPostCommentArgs<ExtArgs>
    notificationCommentReply?: boolean | Comment$notificationCommentReplyArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["comment"]>

  export type CommentSelectScalar = {
    id?: boolean
    message?: boolean
    createdAt?: boolean
    updatedAt?: boolean
    userId?: boolean
    postId?: boolean
    parentId?: boolean
    isDeleted?: boolean
  }


  export type CommentInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
    likes?: boolean | Comment$likesArgs<ExtArgs>
    parent?: boolean | Comment$parentArgs<ExtArgs>
    children?: boolean | Comment$childrenArgs<ExtArgs>
    notificationPostComment?: boolean | Comment$notificationPostCommentArgs<ExtArgs>
    notificationCommentReply?: boolean | Comment$notificationCommentReplyArgs<ExtArgs>
    _count?: boolean | CommentCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CommentPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Comment"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      post: Prisma.$PostPayload<ExtArgs>
      likes: Prisma.$CommentLikePayload<ExtArgs>[]
      parent: Prisma.$CommentPayload<ExtArgs> | null
      children: Prisma.$CommentPayload<ExtArgs>[]
      notificationPostComment: Prisma.$NotificationPostCommentPayload<ExtArgs>[]
      notificationCommentReply: Prisma.$NotificationCommentReplyPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      message: string
      createdAt: Date
      updatedAt: Date
      userId: string
      postId: string
      parentId: string | null
      isDeleted: boolean
    }, ExtArgs["result"]["comment"]>
    composites: {}
  }


  type CommentGetPayload<S extends boolean | null | undefined | CommentDefaultArgs> = $Result.GetResult<Prisma.$CommentPayload, S>

  type CommentCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentCountAggregateInputType | true
    }

  export interface CommentDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Comment'], meta: { name: 'Comment' } }
    /**
     * Find zero or one Comment that matches the filter.
     * @param {CommentFindUniqueArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CommentFindUniqueArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Comment that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommentFindUniqueOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Comment that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindFirstArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Comment that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindFirstOrThrowArgs} args - Arguments to find a Comment
     * @example
     * // Get one Comment
     * const comment = await prisma.comment.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Comments that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Comments
     * const comments = await prisma.comment.findMany()
     * 
     * // Get first 10 Comments
     * const comments = await prisma.comment.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const commentWithIdOnly = await prisma.comment.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommentFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Comment.
     * @param {CommentCreateArgs} args - Arguments to create a Comment.
     * @example
     * // Create one Comment
     * const Comment = await prisma.comment.create({
     *   data: {
     *     // ... data to create a Comment
     *   }
     * })
     * 
    **/
    create<T extends CommentCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentCreateArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Comments.
     *     @param {CommentCreateManyArgs} args - Arguments to create many Comments.
     *     @example
     *     // Create many Comments
     *     const comment = await prisma.comment.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Comment.
     * @param {CommentDeleteArgs} args - Arguments to delete one Comment.
     * @example
     * // Delete one Comment
     * const Comment = await prisma.comment.delete({
     *   where: {
     *     // ... filter to delete one Comment
     *   }
     * })
     * 
    **/
    delete<T extends CommentDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CommentDeleteArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Comment.
     * @param {CommentUpdateArgs} args - Arguments to update one Comment.
     * @example
     * // Update one Comment
     * const comment = await prisma.comment.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpdateArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Comments.
     * @param {CommentDeleteManyArgs} args - Arguments to filter Comments to delete.
     * @example
     * // Delete a few Comments
     * const { count } = await prisma.comment.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Comments
     * const comment = await prisma.comment.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Comment.
     * @param {CommentUpsertArgs} args - Arguments to update or create a Comment.
     * @example
     * // Update or create a Comment
     * const comment = await prisma.comment.upsert({
     *   create: {
     *     // ... data to create a Comment
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Comment we want to update
     *   }
     * })
    **/
    upsert<T extends CommentUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CommentUpsertArgs<ExtArgs>>
    ): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Comments.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentCountArgs} args - Arguments to filter Comments to count.
     * @example
     * // Count the number of Comments
     * const count = await prisma.comment.count({
     *   where: {
     *     // ... the filter for the Comments we want to count
     *   }
     * })
    **/
    count<T extends CommentCountArgs>(
      args?: Subset<T, CommentCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentAggregateArgs>(args: Subset<T, CommentAggregateArgs>): Prisma.PrismaPromise<GetCommentAggregateType<T>>

    /**
     * Group by Comment.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentGroupByArgs['orderBy'] }
        : { orderBy?: CommentGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Comment model
   */
  readonly fields: CommentFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Comment.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    likes<T extends Comment$likesArgs<ExtArgs> = {}>(args?: Subset<T, Comment$likesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, 'findMany'> | Null>;

    parent<T extends Comment$parentArgs<ExtArgs> = {}>(args?: Subset<T, Comment$parentArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    children<T extends Comment$childrenArgs<ExtArgs> = {}>(args?: Subset<T, Comment$childrenArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findMany'> | Null>;

    notificationPostComment<T extends Comment$notificationPostCommentArgs<ExtArgs> = {}>(args?: Subset<T, Comment$notificationPostCommentArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationPostCommentPayload<ExtArgs>, T, 'findMany'> | Null>;

    notificationCommentReply<T extends Comment$notificationCommentReplyArgs<ExtArgs> = {}>(args?: Subset<T, Comment$notificationCommentReplyArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationCommentReplyPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Comment model
   */ 
  interface CommentFieldRefs {
    readonly id: FieldRef<"Comment", 'String'>
    readonly message: FieldRef<"Comment", 'String'>
    readonly createdAt: FieldRef<"Comment", 'DateTime'>
    readonly updatedAt: FieldRef<"Comment", 'DateTime'>
    readonly userId: FieldRef<"Comment", 'String'>
    readonly postId: FieldRef<"Comment", 'String'>
    readonly parentId: FieldRef<"Comment", 'String'>
    readonly isDeleted: FieldRef<"Comment", 'Boolean'>
  }
    

  // Custom InputTypes
  /**
   * Comment findUnique
   */
  export type CommentFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findUniqueOrThrow
   */
  export type CommentFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment findFirst
   */
  export type CommentFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findFirstOrThrow
   */
  export type CommentFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comment to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Comments.
     */
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment findMany
   */
  export type CommentFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter, which Comments to fetch.
     */
    where?: CommentWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Comments to fetch.
     */
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Comments.
     */
    cursor?: CommentWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Comments from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Comments.
     */
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment create
   */
  export type CommentCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to create a Comment.
     */
    data: XOR<CommentCreateInput, CommentUncheckedCreateInput>
  }

  /**
   * Comment createMany
   */
  export type CommentCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Comments.
     */
    data: CommentCreateManyInput | CommentCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Comment update
   */
  export type CommentUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The data needed to update a Comment.
     */
    data: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
    /**
     * Choose, which Comment to update.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment updateMany
   */
  export type CommentUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Comments.
     */
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyInput>
    /**
     * Filter which Comments to update
     */
    where?: CommentWhereInput
  }

  /**
   * Comment upsert
   */
  export type CommentUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * The filter to search for the Comment to update in case it exists.
     */
    where: CommentWhereUniqueInput
    /**
     * In case the Comment found by the `where` argument doesn't exist, create a new Comment with this data.
     */
    create: XOR<CommentCreateInput, CommentUncheckedCreateInput>
    /**
     * In case the Comment was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentUpdateInput, CommentUncheckedUpdateInput>
  }

  /**
   * Comment delete
   */
  export type CommentDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    /**
     * Filter which Comment to delete.
     */
    where: CommentWhereUniqueInput
  }

  /**
   * Comment deleteMany
   */
  export type CommentDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Comments to delete
     */
    where?: CommentWhereInput
  }

  /**
   * Comment.likes
   */
  export type Comment$likesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    where?: CommentLikeWhereInput
    orderBy?: CommentLikeOrderByWithRelationInput | CommentLikeOrderByWithRelationInput[]
    cursor?: CommentLikeWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentLikeScalarFieldEnum | CommentLikeScalarFieldEnum[]
  }

  /**
   * Comment.parent
   */
  export type Comment$parentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
  }

  /**
   * Comment.children
   */
  export type Comment$childrenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
    where?: CommentWhereInput
    orderBy?: CommentOrderByWithRelationInput | CommentOrderByWithRelationInput[]
    cursor?: CommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommentScalarFieldEnum | CommentScalarFieldEnum[]
  }

  /**
   * Comment.notificationPostComment
   */
  export type Comment$notificationPostCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationPostComment
     */
    select?: NotificationPostCommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationPostCommentInclude<ExtArgs> | null
    where?: NotificationPostCommentWhereInput
    orderBy?: NotificationPostCommentOrderByWithRelationInput | NotificationPostCommentOrderByWithRelationInput[]
    cursor?: NotificationPostCommentWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationPostCommentScalarFieldEnum | NotificationPostCommentScalarFieldEnum[]
  }

  /**
   * Comment.notificationCommentReply
   */
  export type Comment$notificationCommentReplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommentReply
     */
    select?: NotificationCommentReplySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommentReplyInclude<ExtArgs> | null
    where?: NotificationCommentReplyWhereInput
    orderBy?: NotificationCommentReplyOrderByWithRelationInput | NotificationCommentReplyOrderByWithRelationInput[]
    cursor?: NotificationCommentReplyWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationCommentReplyScalarFieldEnum | NotificationCommentReplyScalarFieldEnum[]
  }

  /**
   * Comment without action
   */
  export type CommentDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Comment
     */
    select?: CommentSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentInclude<ExtArgs> | null
  }


  /**
   * Model PostLike
   */

  export type AggregatePostLike = {
    _count: PostLikeCountAggregateOutputType | null
    _min: PostLikeMinAggregateOutputType | null
    _max: PostLikeMaxAggregateOutputType | null
  }

  export type PostLikeMinAggregateOutputType = {
    userId: string | null
    postId: string | null
  }

  export type PostLikeMaxAggregateOutputType = {
    userId: string | null
    postId: string | null
  }

  export type PostLikeCountAggregateOutputType = {
    userId: number
    postId: number
    _all: number
  }


  export type PostLikeMinAggregateInputType = {
    userId?: true
    postId?: true
  }

  export type PostLikeMaxAggregateInputType = {
    userId?: true
    postId?: true
  }

  export type PostLikeCountAggregateInputType = {
    userId?: true
    postId?: true
    _all?: true
  }

  export type PostLikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostLike to aggregate.
     */
    where?: PostLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostLikes to fetch.
     */
    orderBy?: PostLikeOrderByWithRelationInput | PostLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostLikes
    **/
    _count?: true | PostLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostLikeMaxAggregateInputType
  }

  export type GetPostLikeAggregateType<T extends PostLikeAggregateArgs> = {
        [P in keyof T & keyof AggregatePostLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostLike[P]>
      : GetScalarType<T[P], AggregatePostLike[P]>
  }




  export type PostLikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostLikeWhereInput
    orderBy?: PostLikeOrderByWithAggregationInput | PostLikeOrderByWithAggregationInput[]
    by: PostLikeScalarFieldEnum[] | PostLikeScalarFieldEnum
    having?: PostLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostLikeCountAggregateInputType | true
    _min?: PostLikeMinAggregateInputType
    _max?: PostLikeMaxAggregateInputType
  }

  export type PostLikeGroupByOutputType = {
    userId: string
    postId: string
    _count: PostLikeCountAggregateOutputType | null
    _min: PostLikeMinAggregateOutputType | null
    _max: PostLikeMaxAggregateOutputType | null
  }

  type GetPostLikeGroupByPayload<T extends PostLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostLikeGroupByOutputType[P]>
            : GetScalarType<T[P], PostLikeGroupByOutputType[P]>
        }
      >
    >


  export type PostLikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    postId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postLike"]>

  export type PostLikeSelectScalar = {
    userId?: boolean
    postId?: boolean
  }


  export type PostLikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }


  export type $PostLikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PostLike"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      postId: string
    }, ExtArgs["result"]["postLike"]>
    composites: {}
  }


  type PostLikeGetPayload<S extends boolean | null | undefined | PostLikeDefaultArgs> = $Result.GetResult<Prisma.$PostLikePayload, S>

  type PostLikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PostLikeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PostLikeCountAggregateInputType | true
    }

  export interface PostLikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostLike'], meta: { name: 'PostLike' } }
    /**
     * Find zero or one PostLike that matches the filter.
     * @param {PostLikeFindUniqueArgs} args - Arguments to find a PostLike
     * @example
     * // Get one PostLike
     * const postLike = await prisma.postLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostLikeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PostLikeFindUniqueArgs<ExtArgs>>
    ): Prisma__PostLikeClient<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PostLike that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PostLikeFindUniqueOrThrowArgs} args - Arguments to find a PostLike
     * @example
     * // Get one PostLike
     * const postLike = await prisma.postLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PostLikeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PostLikeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PostLikeClient<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PostLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeFindFirstArgs} args - Arguments to find a PostLike
     * @example
     * // Get one PostLike
     * const postLike = await prisma.postLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostLikeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PostLikeFindFirstArgs<ExtArgs>>
    ): Prisma__PostLikeClient<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PostLike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeFindFirstOrThrowArgs} args - Arguments to find a PostLike
     * @example
     * // Get one PostLike
     * const postLike = await prisma.postLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PostLikeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PostLikeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PostLikeClient<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PostLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostLikes
     * const postLikes = await prisma.postLike.findMany()
     * 
     * // Get first 10 PostLikes
     * const postLikes = await prisma.postLike.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const postLikeWithUserIdOnly = await prisma.postLike.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends PostLikeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PostLikeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PostLike.
     * @param {PostLikeCreateArgs} args - Arguments to create a PostLike.
     * @example
     * // Create one PostLike
     * const PostLike = await prisma.postLike.create({
     *   data: {
     *     // ... data to create a PostLike
     *   }
     * })
     * 
    **/
    create<T extends PostLikeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PostLikeCreateArgs<ExtArgs>>
    ): Prisma__PostLikeClient<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PostLikes.
     *     @param {PostLikeCreateManyArgs} args - Arguments to create many PostLikes.
     *     @example
     *     // Create many PostLikes
     *     const postLike = await prisma.postLike.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PostLikeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PostLikeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PostLike.
     * @param {PostLikeDeleteArgs} args - Arguments to delete one PostLike.
     * @example
     * // Delete one PostLike
     * const PostLike = await prisma.postLike.delete({
     *   where: {
     *     // ... filter to delete one PostLike
     *   }
     * })
     * 
    **/
    delete<T extends PostLikeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PostLikeDeleteArgs<ExtArgs>>
    ): Prisma__PostLikeClient<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PostLike.
     * @param {PostLikeUpdateArgs} args - Arguments to update one PostLike.
     * @example
     * // Update one PostLike
     * const postLike = await prisma.postLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostLikeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PostLikeUpdateArgs<ExtArgs>>
    ): Prisma__PostLikeClient<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PostLikes.
     * @param {PostLikeDeleteManyArgs} args - Arguments to filter PostLikes to delete.
     * @example
     * // Delete a few PostLikes
     * const { count } = await prisma.postLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostLikeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PostLikeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostLikes
     * const postLike = await prisma.postLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostLikeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PostLikeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PostLike.
     * @param {PostLikeUpsertArgs} args - Arguments to update or create a PostLike.
     * @example
     * // Update or create a PostLike
     * const postLike = await prisma.postLike.upsert({
     *   create: {
     *     // ... data to create a PostLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostLike we want to update
     *   }
     * })
    **/
    upsert<T extends PostLikeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PostLikeUpsertArgs<ExtArgs>>
    ): Prisma__PostLikeClient<$Result.GetResult<Prisma.$PostLikePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PostLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeCountArgs} args - Arguments to filter PostLikes to count.
     * @example
     * // Count the number of PostLikes
     * const count = await prisma.postLike.count({
     *   where: {
     *     // ... the filter for the PostLikes we want to count
     *   }
     * })
    **/
    count<T extends PostLikeCountArgs>(
      args?: Subset<T, PostLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostLikeAggregateArgs>(args: Subset<T, PostLikeAggregateArgs>): Prisma.PrismaPromise<GetPostLikeAggregateType<T>>

    /**
     * Group by PostLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostLikeGroupByArgs['orderBy'] }
        : { orderBy?: PostLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PostLike model
   */
  readonly fields: PostLikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PostLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostLikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PostLike model
   */ 
  interface PostLikeFieldRefs {
    readonly userId: FieldRef<"PostLike", 'String'>
    readonly postId: FieldRef<"PostLike", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PostLike findUnique
   */
  export type PostLikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * Filter, which PostLike to fetch.
     */
    where: PostLikeWhereUniqueInput
  }

  /**
   * PostLike findUniqueOrThrow
   */
  export type PostLikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * Filter, which PostLike to fetch.
     */
    where: PostLikeWhereUniqueInput
  }

  /**
   * PostLike findFirst
   */
  export type PostLikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * Filter, which PostLike to fetch.
     */
    where?: PostLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostLikes to fetch.
     */
    orderBy?: PostLikeOrderByWithRelationInput | PostLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostLikes.
     */
    cursor?: PostLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostLikes.
     */
    distinct?: PostLikeScalarFieldEnum | PostLikeScalarFieldEnum[]
  }

  /**
   * PostLike findFirstOrThrow
   */
  export type PostLikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * Filter, which PostLike to fetch.
     */
    where?: PostLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostLikes to fetch.
     */
    orderBy?: PostLikeOrderByWithRelationInput | PostLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostLikes.
     */
    cursor?: PostLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostLikes.
     */
    distinct?: PostLikeScalarFieldEnum | PostLikeScalarFieldEnum[]
  }

  /**
   * PostLike findMany
   */
  export type PostLikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * Filter, which PostLikes to fetch.
     */
    where?: PostLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostLikes to fetch.
     */
    orderBy?: PostLikeOrderByWithRelationInput | PostLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostLikes.
     */
    cursor?: PostLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostLikes.
     */
    skip?: number
    distinct?: PostLikeScalarFieldEnum | PostLikeScalarFieldEnum[]
  }

  /**
   * PostLike create
   */
  export type PostLikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * The data needed to create a PostLike.
     */
    data: XOR<PostLikeCreateInput, PostLikeUncheckedCreateInput>
  }

  /**
   * PostLike createMany
   */
  export type PostLikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PostLikes.
     */
    data: PostLikeCreateManyInput | PostLikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PostLike update
   */
  export type PostLikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * The data needed to update a PostLike.
     */
    data: XOR<PostLikeUpdateInput, PostLikeUncheckedUpdateInput>
    /**
     * Choose, which PostLike to update.
     */
    where: PostLikeWhereUniqueInput
  }

  /**
   * PostLike updateMany
   */
  export type PostLikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PostLikes.
     */
    data: XOR<PostLikeUpdateManyMutationInput, PostLikeUncheckedUpdateManyInput>
    /**
     * Filter which PostLikes to update
     */
    where?: PostLikeWhereInput
  }

  /**
   * PostLike upsert
   */
  export type PostLikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * The filter to search for the PostLike to update in case it exists.
     */
    where: PostLikeWhereUniqueInput
    /**
     * In case the PostLike found by the `where` argument doesn't exist, create a new PostLike with this data.
     */
    create: XOR<PostLikeCreateInput, PostLikeUncheckedCreateInput>
    /**
     * In case the PostLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostLikeUpdateInput, PostLikeUncheckedUpdateInput>
  }

  /**
   * PostLike delete
   */
  export type PostLikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
    /**
     * Filter which PostLike to delete.
     */
    where: PostLikeWhereUniqueInput
  }

  /**
   * PostLike deleteMany
   */
  export type PostLikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostLikes to delete
     */
    where?: PostLikeWhereInput
  }

  /**
   * PostLike without action
   */
  export type PostLikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostLike
     */
    select?: PostLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostLikeInclude<ExtArgs> | null
  }


  /**
   * Model CommentLike
   */

  export type AggregateCommentLike = {
    _count: CommentLikeCountAggregateOutputType | null
    _min: CommentLikeMinAggregateOutputType | null
    _max: CommentLikeMaxAggregateOutputType | null
  }

  export type CommentLikeMinAggregateOutputType = {
    userId: string | null
    commentId: string | null
  }

  export type CommentLikeMaxAggregateOutputType = {
    userId: string | null
    commentId: string | null
  }

  export type CommentLikeCountAggregateOutputType = {
    userId: number
    commentId: number
    _all: number
  }


  export type CommentLikeMinAggregateInputType = {
    userId?: true
    commentId?: true
  }

  export type CommentLikeMaxAggregateInputType = {
    userId?: true
    commentId?: true
  }

  export type CommentLikeCountAggregateInputType = {
    userId?: true
    commentId?: true
    _all?: true
  }

  export type CommentLikeAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommentLike to aggregate.
     */
    where?: CommentLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommentLikes to fetch.
     */
    orderBy?: CommentLikeOrderByWithRelationInput | CommentLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommentLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommentLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommentLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned CommentLikes
    **/
    _count?: true | CommentLikeCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommentLikeMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommentLikeMaxAggregateInputType
  }

  export type GetCommentLikeAggregateType<T extends CommentLikeAggregateArgs> = {
        [P in keyof T & keyof AggregateCommentLike]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommentLike[P]>
      : GetScalarType<T[P], AggregateCommentLike[P]>
  }




  export type CommentLikeGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommentLikeWhereInput
    orderBy?: CommentLikeOrderByWithAggregationInput | CommentLikeOrderByWithAggregationInput[]
    by: CommentLikeScalarFieldEnum[] | CommentLikeScalarFieldEnum
    having?: CommentLikeScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommentLikeCountAggregateInputType | true
    _min?: CommentLikeMinAggregateInputType
    _max?: CommentLikeMaxAggregateInputType
  }

  export type CommentLikeGroupByOutputType = {
    userId: string
    commentId: string
    _count: CommentLikeCountAggregateOutputType | null
    _min: CommentLikeMinAggregateOutputType | null
    _max: CommentLikeMaxAggregateOutputType | null
  }

  type GetCommentLikeGroupByPayload<T extends CommentLikeGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommentLikeGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommentLikeGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommentLikeGroupByOutputType[P]>
            : GetScalarType<T[P], CommentLikeGroupByOutputType[P]>
        }
      >
    >


  export type CommentLikeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    commentId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["commentLike"]>

  export type CommentLikeSelectScalar = {
    userId?: boolean
    commentId?: boolean
  }


  export type CommentLikeInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    comment?: boolean | CommentDefaultArgs<ExtArgs>
  }


  export type $CommentLikePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "CommentLike"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      comment: Prisma.$CommentPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      commentId: string
    }, ExtArgs["result"]["commentLike"]>
    composites: {}
  }


  type CommentLikeGetPayload<S extends boolean | null | undefined | CommentLikeDefaultArgs> = $Result.GetResult<Prisma.$CommentLikePayload, S>

  type CommentLikeCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommentLikeFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommentLikeCountAggregateInputType | true
    }

  export interface CommentLikeDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['CommentLike'], meta: { name: 'CommentLike' } }
    /**
     * Find zero or one CommentLike that matches the filter.
     * @param {CommentLikeFindUniqueArgs} args - Arguments to find a CommentLike
     * @example
     * // Get one CommentLike
     * const commentLike = await prisma.commentLike.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommentLikeFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CommentLikeFindUniqueArgs<ExtArgs>>
    ): Prisma__CommentLikeClient<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one CommentLike that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommentLikeFindUniqueOrThrowArgs} args - Arguments to find a CommentLike
     * @example
     * // Get one CommentLike
     * const commentLike = await prisma.commentLike.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommentLikeFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentLikeFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CommentLikeClient<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first CommentLike that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeFindFirstArgs} args - Arguments to find a CommentLike
     * @example
     * // Get one CommentLike
     * const commentLike = await prisma.commentLike.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommentLikeFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentLikeFindFirstArgs<ExtArgs>>
    ): Prisma__CommentLikeClient<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first CommentLike that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeFindFirstOrThrowArgs} args - Arguments to find a CommentLike
     * @example
     * // Get one CommentLike
     * const commentLike = await prisma.commentLike.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommentLikeFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentLikeFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CommentLikeClient<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more CommentLikes that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all CommentLikes
     * const commentLikes = await prisma.commentLike.findMany()
     * 
     * // Get first 10 CommentLikes
     * const commentLikes = await prisma.commentLike.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const commentLikeWithUserIdOnly = await prisma.commentLike.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends CommentLikeFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentLikeFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a CommentLike.
     * @param {CommentLikeCreateArgs} args - Arguments to create a CommentLike.
     * @example
     * // Create one CommentLike
     * const CommentLike = await prisma.commentLike.create({
     *   data: {
     *     // ... data to create a CommentLike
     *   }
     * })
     * 
    **/
    create<T extends CommentLikeCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentLikeCreateArgs<ExtArgs>>
    ): Prisma__CommentLikeClient<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many CommentLikes.
     *     @param {CommentLikeCreateManyArgs} args - Arguments to create many CommentLikes.
     *     @example
     *     // Create many CommentLikes
     *     const commentLike = await prisma.commentLike.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommentLikeCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentLikeCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a CommentLike.
     * @param {CommentLikeDeleteArgs} args - Arguments to delete one CommentLike.
     * @example
     * // Delete one CommentLike
     * const CommentLike = await prisma.commentLike.delete({
     *   where: {
     *     // ... filter to delete one CommentLike
     *   }
     * })
     * 
    **/
    delete<T extends CommentLikeDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CommentLikeDeleteArgs<ExtArgs>>
    ): Prisma__CommentLikeClient<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one CommentLike.
     * @param {CommentLikeUpdateArgs} args - Arguments to update one CommentLike.
     * @example
     * // Update one CommentLike
     * const commentLike = await prisma.commentLike.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommentLikeUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CommentLikeUpdateArgs<ExtArgs>>
    ): Prisma__CommentLikeClient<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more CommentLikes.
     * @param {CommentLikeDeleteManyArgs} args - Arguments to filter CommentLikes to delete.
     * @example
     * // Delete a few CommentLikes
     * const { count } = await prisma.commentLike.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommentLikeDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommentLikeDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more CommentLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many CommentLikes
     * const commentLike = await prisma.commentLike.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommentLikeUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CommentLikeUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one CommentLike.
     * @param {CommentLikeUpsertArgs} args - Arguments to update or create a CommentLike.
     * @example
     * // Update or create a CommentLike
     * const commentLike = await prisma.commentLike.upsert({
     *   create: {
     *     // ... data to create a CommentLike
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the CommentLike we want to update
     *   }
     * })
    **/
    upsert<T extends CommentLikeUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CommentLikeUpsertArgs<ExtArgs>>
    ): Prisma__CommentLikeClient<$Result.GetResult<Prisma.$CommentLikePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of CommentLikes.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeCountArgs} args - Arguments to filter CommentLikes to count.
     * @example
     * // Count the number of CommentLikes
     * const count = await prisma.commentLike.count({
     *   where: {
     *     // ... the filter for the CommentLikes we want to count
     *   }
     * })
    **/
    count<T extends CommentLikeCountArgs>(
      args?: Subset<T, CommentLikeCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommentLikeCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a CommentLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommentLikeAggregateArgs>(args: Subset<T, CommentLikeAggregateArgs>): Prisma.PrismaPromise<GetCommentLikeAggregateType<T>>

    /**
     * Group by CommentLike.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommentLikeGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommentLikeGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommentLikeGroupByArgs['orderBy'] }
        : { orderBy?: CommentLikeGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommentLikeGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommentLikeGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the CommentLike model
   */
  readonly fields: CommentLikeFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for CommentLike.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommentLikeClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    comment<T extends CommentDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommentDefaultArgs<ExtArgs>>): Prisma__CommentClient<$Result.GetResult<Prisma.$CommentPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the CommentLike model
   */ 
  interface CommentLikeFieldRefs {
    readonly userId: FieldRef<"CommentLike", 'String'>
    readonly commentId: FieldRef<"CommentLike", 'String'>
  }
    

  // Custom InputTypes
  /**
   * CommentLike findUnique
   */
  export type CommentLikeFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * Filter, which CommentLike to fetch.
     */
    where: CommentLikeWhereUniqueInput
  }

  /**
   * CommentLike findUniqueOrThrow
   */
  export type CommentLikeFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * Filter, which CommentLike to fetch.
     */
    where: CommentLikeWhereUniqueInput
  }

  /**
   * CommentLike findFirst
   */
  export type CommentLikeFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * Filter, which CommentLike to fetch.
     */
    where?: CommentLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommentLikes to fetch.
     */
    orderBy?: CommentLikeOrderByWithRelationInput | CommentLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommentLikes.
     */
    cursor?: CommentLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommentLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommentLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommentLikes.
     */
    distinct?: CommentLikeScalarFieldEnum | CommentLikeScalarFieldEnum[]
  }

  /**
   * CommentLike findFirstOrThrow
   */
  export type CommentLikeFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * Filter, which CommentLike to fetch.
     */
    where?: CommentLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommentLikes to fetch.
     */
    orderBy?: CommentLikeOrderByWithRelationInput | CommentLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for CommentLikes.
     */
    cursor?: CommentLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommentLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommentLikes.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of CommentLikes.
     */
    distinct?: CommentLikeScalarFieldEnum | CommentLikeScalarFieldEnum[]
  }

  /**
   * CommentLike findMany
   */
  export type CommentLikeFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * Filter, which CommentLikes to fetch.
     */
    where?: CommentLikeWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of CommentLikes to fetch.
     */
    orderBy?: CommentLikeOrderByWithRelationInput | CommentLikeOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing CommentLikes.
     */
    cursor?: CommentLikeWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` CommentLikes from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` CommentLikes.
     */
    skip?: number
    distinct?: CommentLikeScalarFieldEnum | CommentLikeScalarFieldEnum[]
  }

  /**
   * CommentLike create
   */
  export type CommentLikeCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * The data needed to create a CommentLike.
     */
    data: XOR<CommentLikeCreateInput, CommentLikeUncheckedCreateInput>
  }

  /**
   * CommentLike createMany
   */
  export type CommentLikeCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many CommentLikes.
     */
    data: CommentLikeCreateManyInput | CommentLikeCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * CommentLike update
   */
  export type CommentLikeUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * The data needed to update a CommentLike.
     */
    data: XOR<CommentLikeUpdateInput, CommentLikeUncheckedUpdateInput>
    /**
     * Choose, which CommentLike to update.
     */
    where: CommentLikeWhereUniqueInput
  }

  /**
   * CommentLike updateMany
   */
  export type CommentLikeUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update CommentLikes.
     */
    data: XOR<CommentLikeUpdateManyMutationInput, CommentLikeUncheckedUpdateManyInput>
    /**
     * Filter which CommentLikes to update
     */
    where?: CommentLikeWhereInput
  }

  /**
   * CommentLike upsert
   */
  export type CommentLikeUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * The filter to search for the CommentLike to update in case it exists.
     */
    where: CommentLikeWhereUniqueInput
    /**
     * In case the CommentLike found by the `where` argument doesn't exist, create a new CommentLike with this data.
     */
    create: XOR<CommentLikeCreateInput, CommentLikeUncheckedCreateInput>
    /**
     * In case the CommentLike was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommentLikeUpdateInput, CommentLikeUncheckedUpdateInput>
  }

  /**
   * CommentLike delete
   */
  export type CommentLikeDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
    /**
     * Filter which CommentLike to delete.
     */
    where: CommentLikeWhereUniqueInput
  }

  /**
   * CommentLike deleteMany
   */
  export type CommentLikeDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which CommentLikes to delete
     */
    where?: CommentLikeWhereInput
  }

  /**
   * CommentLike without action
   */
  export type CommentLikeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the CommentLike
     */
    select?: CommentLikeSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommentLikeInclude<ExtArgs> | null
  }


  /**
   * Model Bookmark
   */

  export type AggregateBookmark = {
    _count: BookmarkCountAggregateOutputType | null
    _min: BookmarkMinAggregateOutputType | null
    _max: BookmarkMaxAggregateOutputType | null
  }

  export type BookmarkMinAggregateOutputType = {
    userId: string | null
    postId: string | null
  }

  export type BookmarkMaxAggregateOutputType = {
    userId: string | null
    postId: string | null
  }

  export type BookmarkCountAggregateOutputType = {
    userId: number
    postId: number
    _all: number
  }


  export type BookmarkMinAggregateInputType = {
    userId?: true
    postId?: true
  }

  export type BookmarkMaxAggregateInputType = {
    userId?: true
    postId?: true
  }

  export type BookmarkCountAggregateInputType = {
    userId?: true
    postId?: true
    _all?: true
  }

  export type BookmarkAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bookmark to aggregate.
     */
    where?: BookmarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookmarks to fetch.
     */
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: BookmarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookmarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookmarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Bookmarks
    **/
    _count?: true | BookmarkCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: BookmarkMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: BookmarkMaxAggregateInputType
  }

  export type GetBookmarkAggregateType<T extends BookmarkAggregateArgs> = {
        [P in keyof T & keyof AggregateBookmark]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateBookmark[P]>
      : GetScalarType<T[P], AggregateBookmark[P]>
  }




  export type BookmarkGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: BookmarkWhereInput
    orderBy?: BookmarkOrderByWithAggregationInput | BookmarkOrderByWithAggregationInput[]
    by: BookmarkScalarFieldEnum[] | BookmarkScalarFieldEnum
    having?: BookmarkScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: BookmarkCountAggregateInputType | true
    _min?: BookmarkMinAggregateInputType
    _max?: BookmarkMaxAggregateInputType
  }

  export type BookmarkGroupByOutputType = {
    userId: string
    postId: string
    _count: BookmarkCountAggregateOutputType | null
    _min: BookmarkMinAggregateOutputType | null
    _max: BookmarkMaxAggregateOutputType | null
  }

  type GetBookmarkGroupByPayload<T extends BookmarkGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<BookmarkGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof BookmarkGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], BookmarkGroupByOutputType[P]>
            : GetScalarType<T[P], BookmarkGroupByOutputType[P]>
        }
      >
    >


  export type BookmarkSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    userId?: boolean
    postId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["bookmark"]>

  export type BookmarkSelectScalar = {
    userId?: boolean
    postId?: boolean
  }


  export type BookmarkInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }


  export type $BookmarkPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Bookmark"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      userId: string
      postId: string
    }, ExtArgs["result"]["bookmark"]>
    composites: {}
  }


  type BookmarkGetPayload<S extends boolean | null | undefined | BookmarkDefaultArgs> = $Result.GetResult<Prisma.$BookmarkPayload, S>

  type BookmarkCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<BookmarkFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: BookmarkCountAggregateInputType | true
    }

  export interface BookmarkDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Bookmark'], meta: { name: 'Bookmark' } }
    /**
     * Find zero or one Bookmark that matches the filter.
     * @param {BookmarkFindUniqueArgs} args - Arguments to find a Bookmark
     * @example
     * // Get one Bookmark
     * const bookmark = await prisma.bookmark.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends BookmarkFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, BookmarkFindUniqueArgs<ExtArgs>>
    ): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Bookmark that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {BookmarkFindUniqueOrThrowArgs} args - Arguments to find a Bookmark
     * @example
     * // Get one Bookmark
     * const bookmark = await prisma.bookmark.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends BookmarkFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BookmarkFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Bookmark that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkFindFirstArgs} args - Arguments to find a Bookmark
     * @example
     * // Get one Bookmark
     * const bookmark = await prisma.bookmark.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends BookmarkFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, BookmarkFindFirstArgs<ExtArgs>>
    ): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Bookmark that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkFindFirstOrThrowArgs} args - Arguments to find a Bookmark
     * @example
     * // Get one Bookmark
     * const bookmark = await prisma.bookmark.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends BookmarkFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, BookmarkFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Bookmarks that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Bookmarks
     * const bookmarks = await prisma.bookmark.findMany()
     * 
     * // Get first 10 Bookmarks
     * const bookmarks = await prisma.bookmark.findMany({ take: 10 })
     * 
     * // Only select the `userId`
     * const bookmarkWithUserIdOnly = await prisma.bookmark.findMany({ select: { userId: true } })
     * 
    **/
    findMany<T extends BookmarkFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BookmarkFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Bookmark.
     * @param {BookmarkCreateArgs} args - Arguments to create a Bookmark.
     * @example
     * // Create one Bookmark
     * const Bookmark = await prisma.bookmark.create({
     *   data: {
     *     // ... data to create a Bookmark
     *   }
     * })
     * 
    **/
    create<T extends BookmarkCreateArgs<ExtArgs>>(
      args: SelectSubset<T, BookmarkCreateArgs<ExtArgs>>
    ): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Bookmarks.
     *     @param {BookmarkCreateManyArgs} args - Arguments to create many Bookmarks.
     *     @example
     *     // Create many Bookmarks
     *     const bookmark = await prisma.bookmark.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends BookmarkCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BookmarkCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Bookmark.
     * @param {BookmarkDeleteArgs} args - Arguments to delete one Bookmark.
     * @example
     * // Delete one Bookmark
     * const Bookmark = await prisma.bookmark.delete({
     *   where: {
     *     // ... filter to delete one Bookmark
     *   }
     * })
     * 
    **/
    delete<T extends BookmarkDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, BookmarkDeleteArgs<ExtArgs>>
    ): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Bookmark.
     * @param {BookmarkUpdateArgs} args - Arguments to update one Bookmark.
     * @example
     * // Update one Bookmark
     * const bookmark = await prisma.bookmark.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends BookmarkUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, BookmarkUpdateArgs<ExtArgs>>
    ): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Bookmarks.
     * @param {BookmarkDeleteManyArgs} args - Arguments to filter Bookmarks to delete.
     * @example
     * // Delete a few Bookmarks
     * const { count } = await prisma.bookmark.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends BookmarkDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, BookmarkDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Bookmarks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Bookmarks
     * const bookmark = await prisma.bookmark.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends BookmarkUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, BookmarkUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Bookmark.
     * @param {BookmarkUpsertArgs} args - Arguments to update or create a Bookmark.
     * @example
     * // Update or create a Bookmark
     * const bookmark = await prisma.bookmark.upsert({
     *   create: {
     *     // ... data to create a Bookmark
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Bookmark we want to update
     *   }
     * })
    **/
    upsert<T extends BookmarkUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, BookmarkUpsertArgs<ExtArgs>>
    ): Prisma__BookmarkClient<$Result.GetResult<Prisma.$BookmarkPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Bookmarks.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkCountArgs} args - Arguments to filter Bookmarks to count.
     * @example
     * // Count the number of Bookmarks
     * const count = await prisma.bookmark.count({
     *   where: {
     *     // ... the filter for the Bookmarks we want to count
     *   }
     * })
    **/
    count<T extends BookmarkCountArgs>(
      args?: Subset<T, BookmarkCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], BookmarkCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Bookmark.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends BookmarkAggregateArgs>(args: Subset<T, BookmarkAggregateArgs>): Prisma.PrismaPromise<GetBookmarkAggregateType<T>>

    /**
     * Group by Bookmark.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {BookmarkGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends BookmarkGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: BookmarkGroupByArgs['orderBy'] }
        : { orderBy?: BookmarkGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, BookmarkGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetBookmarkGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Bookmark model
   */
  readonly fields: BookmarkFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Bookmark.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__BookmarkClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Bookmark model
   */ 
  interface BookmarkFieldRefs {
    readonly userId: FieldRef<"Bookmark", 'String'>
    readonly postId: FieldRef<"Bookmark", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Bookmark findUnique
   */
  export type BookmarkFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter, which Bookmark to fetch.
     */
    where: BookmarkWhereUniqueInput
  }

  /**
   * Bookmark findUniqueOrThrow
   */
  export type BookmarkFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter, which Bookmark to fetch.
     */
    where: BookmarkWhereUniqueInput
  }

  /**
   * Bookmark findFirst
   */
  export type BookmarkFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter, which Bookmark to fetch.
     */
    where?: BookmarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookmarks to fetch.
     */
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookmarks.
     */
    cursor?: BookmarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookmarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookmarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookmarks.
     */
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * Bookmark findFirstOrThrow
   */
  export type BookmarkFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter, which Bookmark to fetch.
     */
    where?: BookmarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookmarks to fetch.
     */
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Bookmarks.
     */
    cursor?: BookmarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookmarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookmarks.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Bookmarks.
     */
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * Bookmark findMany
   */
  export type BookmarkFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter, which Bookmarks to fetch.
     */
    where?: BookmarkWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Bookmarks to fetch.
     */
    orderBy?: BookmarkOrderByWithRelationInput | BookmarkOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Bookmarks.
     */
    cursor?: BookmarkWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Bookmarks from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Bookmarks.
     */
    skip?: number
    distinct?: BookmarkScalarFieldEnum | BookmarkScalarFieldEnum[]
  }

  /**
   * Bookmark create
   */
  export type BookmarkCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * The data needed to create a Bookmark.
     */
    data: XOR<BookmarkCreateInput, BookmarkUncheckedCreateInput>
  }

  /**
   * Bookmark createMany
   */
  export type BookmarkCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Bookmarks.
     */
    data: BookmarkCreateManyInput | BookmarkCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Bookmark update
   */
  export type BookmarkUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * The data needed to update a Bookmark.
     */
    data: XOR<BookmarkUpdateInput, BookmarkUncheckedUpdateInput>
    /**
     * Choose, which Bookmark to update.
     */
    where: BookmarkWhereUniqueInput
  }

  /**
   * Bookmark updateMany
   */
  export type BookmarkUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Bookmarks.
     */
    data: XOR<BookmarkUpdateManyMutationInput, BookmarkUncheckedUpdateManyInput>
    /**
     * Filter which Bookmarks to update
     */
    where?: BookmarkWhereInput
  }

  /**
   * Bookmark upsert
   */
  export type BookmarkUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * The filter to search for the Bookmark to update in case it exists.
     */
    where: BookmarkWhereUniqueInput
    /**
     * In case the Bookmark found by the `where` argument doesn't exist, create a new Bookmark with this data.
     */
    create: XOR<BookmarkCreateInput, BookmarkUncheckedCreateInput>
    /**
     * In case the Bookmark was found with the provided `where` argument, update it with this data.
     */
    update: XOR<BookmarkUpdateInput, BookmarkUncheckedUpdateInput>
  }

  /**
   * Bookmark delete
   */
  export type BookmarkDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
    /**
     * Filter which Bookmark to delete.
     */
    where: BookmarkWhereUniqueInput
  }

  /**
   * Bookmark deleteMany
   */
  export type BookmarkDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Bookmarks to delete
     */
    where?: BookmarkWhereInput
  }

  /**
   * Bookmark without action
   */
  export type BookmarkDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Bookmark
     */
    select?: BookmarkSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: BookmarkInclude<ExtArgs> | null
  }


  /**
   * Model Tag
   */

  export type AggregateTag = {
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  export type TagMinAggregateOutputType = {
    name: string | null
    color: string | null
  }

  export type TagMaxAggregateOutputType = {
    name: string | null
    color: string | null
  }

  export type TagCountAggregateOutputType = {
    name: number
    color: number
    _all: number
  }


  export type TagMinAggregateInputType = {
    name?: true
    color?: true
  }

  export type TagMaxAggregateInputType = {
    name?: true
    color?: true
  }

  export type TagCountAggregateInputType = {
    name?: true
    color?: true
    _all?: true
  }

  export type TagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tag to aggregate.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Tags
    **/
    _count?: true | TagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TagMaxAggregateInputType
  }

  export type GetTagAggregateType<T extends TagAggregateArgs> = {
        [P in keyof T & keyof AggregateTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTag[P]>
      : GetScalarType<T[P], AggregateTag[P]>
  }




  export type TagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TagWhereInput
    orderBy?: TagOrderByWithAggregationInput | TagOrderByWithAggregationInput[]
    by: TagScalarFieldEnum[] | TagScalarFieldEnum
    having?: TagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TagCountAggregateInputType | true
    _min?: TagMinAggregateInputType
    _max?: TagMaxAggregateInputType
  }

  export type TagGroupByOutputType = {
    name: string
    color: string
    _count: TagCountAggregateOutputType | null
    _min: TagMinAggregateOutputType | null
    _max: TagMaxAggregateOutputType | null
  }

  type GetTagGroupByPayload<T extends TagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TagGroupByOutputType[P]>
            : GetScalarType<T[P], TagGroupByOutputType[P]>
        }
      >
    >


  export type TagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    name?: boolean
    color?: boolean
    posts?: boolean | Tag$postsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["tag"]>

  export type TagSelectScalar = {
    name?: boolean
    color?: boolean
  }


  export type TagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | Tag$postsArgs<ExtArgs>
    _count?: boolean | TagCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $TagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Tag"
    objects: {
      posts: Prisma.$PostTagPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      name: string
      color: string
    }, ExtArgs["result"]["tag"]>
    composites: {}
  }


  type TagGetPayload<S extends boolean | null | undefined | TagDefaultArgs> = $Result.GetResult<Prisma.$TagPayload, S>

  type TagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TagCountAggregateInputType | true
    }

  export interface TagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Tag'], meta: { name: 'Tag' } }
    /**
     * Find zero or one Tag that matches the filter.
     * @param {TagFindUniqueArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TagFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TagFindUniqueArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Tag that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TagFindUniqueOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TagFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TagFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Tag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TagFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TagFindFirstArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Tag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindFirstOrThrowArgs} args - Arguments to find a Tag
     * @example
     * // Get one Tag
     * const tag = await prisma.tag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TagFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TagFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Tags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Tags
     * const tags = await prisma.tag.findMany()
     * 
     * // Get first 10 Tags
     * const tags = await prisma.tag.findMany({ take: 10 })
     * 
     * // Only select the `name`
     * const tagWithNameOnly = await prisma.tag.findMany({ select: { name: true } })
     * 
    **/
    findMany<T extends TagFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TagFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Tag.
     * @param {TagCreateArgs} args - Arguments to create a Tag.
     * @example
     * // Create one Tag
     * const Tag = await prisma.tag.create({
     *   data: {
     *     // ... data to create a Tag
     *   }
     * })
     * 
    **/
    create<T extends TagCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TagCreateArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Tags.
     *     @param {TagCreateManyArgs} args - Arguments to create many Tags.
     *     @example
     *     // Create many Tags
     *     const tag = await prisma.tag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TagCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TagCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Tag.
     * @param {TagDeleteArgs} args - Arguments to delete one Tag.
     * @example
     * // Delete one Tag
     * const Tag = await prisma.tag.delete({
     *   where: {
     *     // ... filter to delete one Tag
     *   }
     * })
     * 
    **/
    delete<T extends TagDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TagDeleteArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Tag.
     * @param {TagUpdateArgs} args - Arguments to update one Tag.
     * @example
     * // Update one Tag
     * const tag = await prisma.tag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TagUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TagUpdateArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Tags.
     * @param {TagDeleteManyArgs} args - Arguments to filter Tags to delete.
     * @example
     * // Delete a few Tags
     * const { count } = await prisma.tag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TagDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TagDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Tags
     * const tag = await prisma.tag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TagUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TagUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Tag.
     * @param {TagUpsertArgs} args - Arguments to update or create a Tag.
     * @example
     * // Update or create a Tag
     * const tag = await prisma.tag.upsert({
     *   create: {
     *     // ... data to create a Tag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Tag we want to update
     *   }
     * })
    **/
    upsert<T extends TagUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TagUpsertArgs<ExtArgs>>
    ): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Tags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagCountArgs} args - Arguments to filter Tags to count.
     * @example
     * // Count the number of Tags
     * const count = await prisma.tag.count({
     *   where: {
     *     // ... the filter for the Tags we want to count
     *   }
     * })
    **/
    count<T extends TagCountArgs>(
      args?: Subset<T, TagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TagAggregateArgs>(args: Subset<T, TagAggregateArgs>): Prisma.PrismaPromise<GetTagAggregateType<T>>

    /**
     * Group by Tag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TagGroupByArgs['orderBy'] }
        : { orderBy?: TagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Tag model
   */
  readonly fields: TagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Tag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    posts<T extends Tag$postsArgs<ExtArgs> = {}>(args?: Subset<T, Tag$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Tag model
   */ 
  interface TagFieldRefs {
    readonly name: FieldRef<"Tag", 'String'>
    readonly color: FieldRef<"Tag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Tag findUnique
   */
  export type TagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findUniqueOrThrow
   */
  export type TagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag findFirst
   */
  export type TagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findFirstOrThrow
   */
  export type TagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tag to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Tags.
     */
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag findMany
   */
  export type TagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter, which Tags to fetch.
     */
    where?: TagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Tags to fetch.
     */
    orderBy?: TagOrderByWithRelationInput | TagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Tags.
     */
    cursor?: TagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Tags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Tags.
     */
    skip?: number
    distinct?: TagScalarFieldEnum | TagScalarFieldEnum[]
  }

  /**
   * Tag create
   */
  export type TagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to create a Tag.
     */
    data: XOR<TagCreateInput, TagUncheckedCreateInput>
  }

  /**
   * Tag createMany
   */
  export type TagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Tags.
     */
    data: TagCreateManyInput | TagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Tag update
   */
  export type TagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The data needed to update a Tag.
     */
    data: XOR<TagUpdateInput, TagUncheckedUpdateInput>
    /**
     * Choose, which Tag to update.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag updateMany
   */
  export type TagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Tags.
     */
    data: XOR<TagUpdateManyMutationInput, TagUncheckedUpdateManyInput>
    /**
     * Filter which Tags to update
     */
    where?: TagWhereInput
  }

  /**
   * Tag upsert
   */
  export type TagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * The filter to search for the Tag to update in case it exists.
     */
    where: TagWhereUniqueInput
    /**
     * In case the Tag found by the `where` argument doesn't exist, create a new Tag with this data.
     */
    create: XOR<TagCreateInput, TagUncheckedCreateInput>
    /**
     * In case the Tag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TagUpdateInput, TagUncheckedUpdateInput>
  }

  /**
   * Tag delete
   */
  export type TagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
    /**
     * Filter which Tag to delete.
     */
    where: TagWhereUniqueInput
  }

  /**
   * Tag deleteMany
   */
  export type TagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Tags to delete
     */
    where?: TagWhereInput
  }

  /**
   * Tag.posts
   */
  export type Tag$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null
    where?: PostTagWhereInput
    orderBy?: PostTagOrderByWithRelationInput | PostTagOrderByWithRelationInput[]
    cursor?: PostTagWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostTagScalarFieldEnum | PostTagScalarFieldEnum[]
  }

  /**
   * Tag without action
   */
  export type TagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Tag
     */
    select?: TagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: TagInclude<ExtArgs> | null
  }


  /**
   * Model PostTag
   */

  export type AggregatePostTag = {
    _count: PostTagCountAggregateOutputType | null
    _min: PostTagMinAggregateOutputType | null
    _max: PostTagMaxAggregateOutputType | null
  }

  export type PostTagMinAggregateOutputType = {
    tagName: string | null
    postId: string | null
  }

  export type PostTagMaxAggregateOutputType = {
    tagName: string | null
    postId: string | null
  }

  export type PostTagCountAggregateOutputType = {
    tagName: number
    postId: number
    _all: number
  }


  export type PostTagMinAggregateInputType = {
    tagName?: true
    postId?: true
  }

  export type PostTagMaxAggregateInputType = {
    tagName?: true
    postId?: true
  }

  export type PostTagCountAggregateInputType = {
    tagName?: true
    postId?: true
    _all?: true
  }

  export type PostTagAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostTag to aggregate.
     */
    where?: PostTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostTags to fetch.
     */
    orderBy?: PostTagOrderByWithRelationInput | PostTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: PostTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned PostTags
    **/
    _count?: true | PostTagCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: PostTagMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: PostTagMaxAggregateInputType
  }

  export type GetPostTagAggregateType<T extends PostTagAggregateArgs> = {
        [P in keyof T & keyof AggregatePostTag]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregatePostTag[P]>
      : GetScalarType<T[P], AggregatePostTag[P]>
  }




  export type PostTagGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: PostTagWhereInput
    orderBy?: PostTagOrderByWithAggregationInput | PostTagOrderByWithAggregationInput[]
    by: PostTagScalarFieldEnum[] | PostTagScalarFieldEnum
    having?: PostTagScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: PostTagCountAggregateInputType | true
    _min?: PostTagMinAggregateInputType
    _max?: PostTagMaxAggregateInputType
  }

  export type PostTagGroupByOutputType = {
    tagName: string
    postId: string
    _count: PostTagCountAggregateOutputType | null
    _min: PostTagMinAggregateOutputType | null
    _max: PostTagMaxAggregateOutputType | null
  }

  type GetPostTagGroupByPayload<T extends PostTagGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<PostTagGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof PostTagGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], PostTagGroupByOutputType[P]>
            : GetScalarType<T[P], PostTagGroupByOutputType[P]>
        }
      >
    >


  export type PostTagSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    tagName?: boolean
    postId?: boolean
    tag?: boolean | TagDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["postTag"]>

  export type PostTagSelectScalar = {
    tagName?: boolean
    postId?: boolean
  }


  export type PostTagInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    tag?: boolean | TagDefaultArgs<ExtArgs>
    post?: boolean | PostDefaultArgs<ExtArgs>
  }


  export type $PostTagPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "PostTag"
    objects: {
      tag: Prisma.$TagPayload<ExtArgs>
      post: Prisma.$PostPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      tagName: string
      postId: string
    }, ExtArgs["result"]["postTag"]>
    composites: {}
  }


  type PostTagGetPayload<S extends boolean | null | undefined | PostTagDefaultArgs> = $Result.GetResult<Prisma.$PostTagPayload, S>

  type PostTagCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<PostTagFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: PostTagCountAggregateInputType | true
    }

  export interface PostTagDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['PostTag'], meta: { name: 'PostTag' } }
    /**
     * Find zero or one PostTag that matches the filter.
     * @param {PostTagFindUniqueArgs} args - Arguments to find a PostTag
     * @example
     * // Get one PostTag
     * const postTag = await prisma.postTag.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends PostTagFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, PostTagFindUniqueArgs<ExtArgs>>
    ): Prisma__PostTagClient<$Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one PostTag that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {PostTagFindUniqueOrThrowArgs} args - Arguments to find a PostTag
     * @example
     * // Get one PostTag
     * const postTag = await prisma.postTag.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends PostTagFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PostTagFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__PostTagClient<$Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first PostTag that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostTagFindFirstArgs} args - Arguments to find a PostTag
     * @example
     * // Get one PostTag
     * const postTag = await prisma.postTag.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends PostTagFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, PostTagFindFirstArgs<ExtArgs>>
    ): Prisma__PostTagClient<$Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first PostTag that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostTagFindFirstOrThrowArgs} args - Arguments to find a PostTag
     * @example
     * // Get one PostTag
     * const postTag = await prisma.postTag.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends PostTagFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, PostTagFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__PostTagClient<$Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more PostTags that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostTagFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all PostTags
     * const postTags = await prisma.postTag.findMany()
     * 
     * // Get first 10 PostTags
     * const postTags = await prisma.postTag.findMany({ take: 10 })
     * 
     * // Only select the `tagName`
     * const postTagWithTagNameOnly = await prisma.postTag.findMany({ select: { tagName: true } })
     * 
    **/
    findMany<T extends PostTagFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PostTagFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a PostTag.
     * @param {PostTagCreateArgs} args - Arguments to create a PostTag.
     * @example
     * // Create one PostTag
     * const PostTag = await prisma.postTag.create({
     *   data: {
     *     // ... data to create a PostTag
     *   }
     * })
     * 
    **/
    create<T extends PostTagCreateArgs<ExtArgs>>(
      args: SelectSubset<T, PostTagCreateArgs<ExtArgs>>
    ): Prisma__PostTagClient<$Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many PostTags.
     *     @param {PostTagCreateManyArgs} args - Arguments to create many PostTags.
     *     @example
     *     // Create many PostTags
     *     const postTag = await prisma.postTag.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends PostTagCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PostTagCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a PostTag.
     * @param {PostTagDeleteArgs} args - Arguments to delete one PostTag.
     * @example
     * // Delete one PostTag
     * const PostTag = await prisma.postTag.delete({
     *   where: {
     *     // ... filter to delete one PostTag
     *   }
     * })
     * 
    **/
    delete<T extends PostTagDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, PostTagDeleteArgs<ExtArgs>>
    ): Prisma__PostTagClient<$Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one PostTag.
     * @param {PostTagUpdateArgs} args - Arguments to update one PostTag.
     * @example
     * // Update one PostTag
     * const postTag = await prisma.postTag.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends PostTagUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, PostTagUpdateArgs<ExtArgs>>
    ): Prisma__PostTagClient<$Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more PostTags.
     * @param {PostTagDeleteManyArgs} args - Arguments to filter PostTags to delete.
     * @example
     * // Delete a few PostTags
     * const { count } = await prisma.postTag.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends PostTagDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, PostTagDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more PostTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostTagUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many PostTags
     * const postTag = await prisma.postTag.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends PostTagUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, PostTagUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one PostTag.
     * @param {PostTagUpsertArgs} args - Arguments to update or create a PostTag.
     * @example
     * // Update or create a PostTag
     * const postTag = await prisma.postTag.upsert({
     *   create: {
     *     // ... data to create a PostTag
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the PostTag we want to update
     *   }
     * })
    **/
    upsert<T extends PostTagUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, PostTagUpsertArgs<ExtArgs>>
    ): Prisma__PostTagClient<$Result.GetResult<Prisma.$PostTagPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of PostTags.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostTagCountArgs} args - Arguments to filter PostTags to count.
     * @example
     * // Count the number of PostTags
     * const count = await prisma.postTag.count({
     *   where: {
     *     // ... the filter for the PostTags we want to count
     *   }
     * })
    **/
    count<T extends PostTagCountArgs>(
      args?: Subset<T, PostTagCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], PostTagCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a PostTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostTagAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends PostTagAggregateArgs>(args: Subset<T, PostTagAggregateArgs>): Prisma.PrismaPromise<GetPostTagAggregateType<T>>

    /**
     * Group by PostTag.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {PostTagGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends PostTagGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: PostTagGroupByArgs['orderBy'] }
        : { orderBy?: PostTagGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, PostTagGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetPostTagGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the PostTag model
   */
  readonly fields: PostTagFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for PostTag.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__PostTagClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    tag<T extends TagDefaultArgs<ExtArgs> = {}>(args?: Subset<T, TagDefaultArgs<ExtArgs>>): Prisma__TagClient<$Result.GetResult<Prisma.$TagPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    post<T extends PostDefaultArgs<ExtArgs> = {}>(args?: Subset<T, PostDefaultArgs<ExtArgs>>): Prisma__PostClient<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the PostTag model
   */ 
  interface PostTagFieldRefs {
    readonly tagName: FieldRef<"PostTag", 'String'>
    readonly postId: FieldRef<"PostTag", 'String'>
  }
    

  // Custom InputTypes
  /**
   * PostTag findUnique
   */
  export type PostTagFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null
    /**
     * Filter, which PostTag to fetch.
     */
    where: PostTagWhereUniqueInput
  }

  /**
   * PostTag findUniqueOrThrow
   */
  export type PostTagFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null
    /**
     * Filter, which PostTag to fetch.
     */
    where: PostTagWhereUniqueInput
  }

  /**
   * PostTag findFirst
   */
  export type PostTagFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null
    /**
     * Filter, which PostTag to fetch.
     */
    where?: PostTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostTags to fetch.
     */
    orderBy?: PostTagOrderByWithRelationInput | PostTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostTags.
     */
    cursor?: PostTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostTags.
     */
    distinct?: PostTagScalarFieldEnum | PostTagScalarFieldEnum[]
  }

  /**
   * PostTag findFirstOrThrow
   */
  export type PostTagFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null
    /**
     * Filter, which PostTag to fetch.
     */
    where?: PostTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostTags to fetch.
     */
    orderBy?: PostTagOrderByWithRelationInput | PostTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for PostTags.
     */
    cursor?: PostTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostTags.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of PostTags.
     */
    distinct?: PostTagScalarFieldEnum | PostTagScalarFieldEnum[]
  }

  /**
   * PostTag findMany
   */
  export type PostTagFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null
    /**
     * Filter, which PostTags to fetch.
     */
    where?: PostTagWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of PostTags to fetch.
     */
    orderBy?: PostTagOrderByWithRelationInput | PostTagOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing PostTags.
     */
    cursor?: PostTagWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` PostTags from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` PostTags.
     */
    skip?: number
    distinct?: PostTagScalarFieldEnum | PostTagScalarFieldEnum[]
  }

  /**
   * PostTag create
   */
  export type PostTagCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null
    /**
     * The data needed to create a PostTag.
     */
    data: XOR<PostTagCreateInput, PostTagUncheckedCreateInput>
  }

  /**
   * PostTag createMany
   */
  export type PostTagCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many PostTags.
     */
    data: PostTagCreateManyInput | PostTagCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * PostTag update
   */
  export type PostTagUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null
    /**
     * The data needed to update a PostTag.
     */
    data: XOR<PostTagUpdateInput, PostTagUncheckedUpdateInput>
    /**
     * Choose, which PostTag to update.
     */
    where: PostTagWhereUniqueInput
  }

  /**
   * PostTag updateMany
   */
  export type PostTagUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update PostTags.
     */
    data: XOR<PostTagUpdateManyMutationInput, PostTagUncheckedUpdateManyInput>
    /**
     * Filter which PostTags to update
     */
    where?: PostTagWhereInput
  }

  /**
   * PostTag upsert
   */
  export type PostTagUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null
    /**
     * The filter to search for the PostTag to update in case it exists.
     */
    where: PostTagWhereUniqueInput
    /**
     * In case the PostTag found by the `where` argument doesn't exist, create a new PostTag with this data.
     */
    create: XOR<PostTagCreateInput, PostTagUncheckedCreateInput>
    /**
     * In case the PostTag was found with the provided `where` argument, update it with this data.
     */
    update: XOR<PostTagUpdateInput, PostTagUncheckedUpdateInput>
  }

  /**
   * PostTag delete
   */
  export type PostTagDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null
    /**
     * Filter which PostTag to delete.
     */
    where: PostTagWhereUniqueInput
  }

  /**
   * PostTag deleteMany
   */
  export type PostTagDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which PostTags to delete
     */
    where?: PostTagWhereInput
  }

  /**
   * PostTag without action
   */
  export type PostTagDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the PostTag
     */
    select?: PostTagSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostTagInclude<ExtArgs> | null
  }


  /**
   * Model Community
   */

  export type AggregateCommunity = {
    _count: CommunityCountAggregateOutputType | null
    _min: CommunityMinAggregateOutputType | null
    _max: CommunityMaxAggregateOutputType | null
  }

  export type CommunityMinAggregateOutputType = {
    id: string | null
    name: string | null
    image: string | null
    bannerImage: string | null
    description: string | null
    categoryId: string | null
  }

  export type CommunityMaxAggregateOutputType = {
    id: string | null
    name: string | null
    image: string | null
    bannerImage: string | null
    description: string | null
    categoryId: string | null
  }

  export type CommunityCountAggregateOutputType = {
    id: number
    name: number
    image: number
    bannerImage: number
    description: number
    categoryId: number
    _all: number
  }


  export type CommunityMinAggregateInputType = {
    id?: true
    name?: true
    image?: true
    bannerImage?: true
    description?: true
    categoryId?: true
  }

  export type CommunityMaxAggregateInputType = {
    id?: true
    name?: true
    image?: true
    bannerImage?: true
    description?: true
    categoryId?: true
  }

  export type CommunityCountAggregateInputType = {
    id?: true
    name?: true
    image?: true
    bannerImage?: true
    description?: true
    categoryId?: true
    _all?: true
  }

  export type CommunityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Community to aggregate.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Communities
    **/
    _count?: true | CommunityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CommunityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CommunityMaxAggregateInputType
  }

  export type GetCommunityAggregateType<T extends CommunityAggregateArgs> = {
        [P in keyof T & keyof AggregateCommunity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCommunity[P]>
      : GetScalarType<T[P], AggregateCommunity[P]>
  }




  export type CommunityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CommunityWhereInput
    orderBy?: CommunityOrderByWithAggregationInput | CommunityOrderByWithAggregationInput[]
    by: CommunityScalarFieldEnum[] | CommunityScalarFieldEnum
    having?: CommunityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CommunityCountAggregateInputType | true
    _min?: CommunityMinAggregateInputType
    _max?: CommunityMaxAggregateInputType
  }

  export type CommunityGroupByOutputType = {
    id: string
    name: string
    image: string
    bannerImage: string
    description: string
    categoryId: string
    _count: CommunityCountAggregateOutputType | null
    _min: CommunityMinAggregateOutputType | null
    _max: CommunityMaxAggregateOutputType | null
  }

  type GetCommunityGroupByPayload<T extends CommunityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CommunityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CommunityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CommunityGroupByOutputType[P]>
            : GetScalarType<T[P], CommunityGroupByOutputType[P]>
        }
      >
    >


  export type CommunitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    image?: boolean
    bannerImage?: boolean
    description?: boolean
    categoryId?: boolean
    posts?: boolean | Community$postsArgs<ExtArgs>
    members?: boolean | Community$membersArgs<ExtArgs>
    favouriteBy?: boolean | Community$favouriteByArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    notificationCommunityNewMember?: boolean | Community$notificationCommunityNewMemberArgs<ExtArgs>
    _count?: boolean | CommunityCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["community"]>

  export type CommunitySelectScalar = {
    id?: boolean
    name?: boolean
    image?: boolean
    bannerImage?: boolean
    description?: boolean
    categoryId?: boolean
  }


  export type CommunityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    posts?: boolean | Community$postsArgs<ExtArgs>
    members?: boolean | Community$membersArgs<ExtArgs>
    favouriteBy?: boolean | Community$favouriteByArgs<ExtArgs>
    category?: boolean | CategoryDefaultArgs<ExtArgs>
    notificationCommunityNewMember?: boolean | Community$notificationCommunityNewMemberArgs<ExtArgs>
    _count?: boolean | CommunityCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CommunityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Community"
    objects: {
      posts: Prisma.$PostPayload<ExtArgs>[]
      members: Prisma.$UserCommunityPayload<ExtArgs>[]
      favouriteBy: Prisma.$FavouriteCommunityPayload<ExtArgs>[]
      category: Prisma.$CategoryPayload<ExtArgs>
      notificationCommunityNewMember: Prisma.$NotificationCommunityNewMemberPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
      image: string
      bannerImage: string
      description: string
      categoryId: string
    }, ExtArgs["result"]["community"]>
    composites: {}
  }


  type CommunityGetPayload<S extends boolean | null | undefined | CommunityDefaultArgs> = $Result.GetResult<Prisma.$CommunityPayload, S>

  type CommunityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CommunityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CommunityCountAggregateInputType | true
    }

  export interface CommunityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Community'], meta: { name: 'Community' } }
    /**
     * Find zero or one Community that matches the filter.
     * @param {CommunityFindUniqueArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CommunityFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CommunityFindUniqueArgs<ExtArgs>>
    ): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Community that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CommunityFindUniqueOrThrowArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CommunityFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommunityFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Community that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityFindFirstArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CommunityFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CommunityFindFirstArgs<ExtArgs>>
    ): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Community that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityFindFirstOrThrowArgs} args - Arguments to find a Community
     * @example
     * // Get one Community
     * const community = await prisma.community.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CommunityFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CommunityFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Communities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Communities
     * const communities = await prisma.community.findMany()
     * 
     * // Get first 10 Communities
     * const communities = await prisma.community.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const communityWithIdOnly = await prisma.community.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CommunityFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommunityFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Community.
     * @param {CommunityCreateArgs} args - Arguments to create a Community.
     * @example
     * // Create one Community
     * const Community = await prisma.community.create({
     *   data: {
     *     // ... data to create a Community
     *   }
     * })
     * 
    **/
    create<T extends CommunityCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CommunityCreateArgs<ExtArgs>>
    ): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Communities.
     *     @param {CommunityCreateManyArgs} args - Arguments to create many Communities.
     *     @example
     *     // Create many Communities
     *     const community = await prisma.community.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CommunityCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommunityCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Community.
     * @param {CommunityDeleteArgs} args - Arguments to delete one Community.
     * @example
     * // Delete one Community
     * const Community = await prisma.community.delete({
     *   where: {
     *     // ... filter to delete one Community
     *   }
     * })
     * 
    **/
    delete<T extends CommunityDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CommunityDeleteArgs<ExtArgs>>
    ): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Community.
     * @param {CommunityUpdateArgs} args - Arguments to update one Community.
     * @example
     * // Update one Community
     * const community = await prisma.community.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CommunityUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CommunityUpdateArgs<ExtArgs>>
    ): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Communities.
     * @param {CommunityDeleteManyArgs} args - Arguments to filter Communities to delete.
     * @example
     * // Delete a few Communities
     * const { count } = await prisma.community.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CommunityDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CommunityDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Communities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Communities
     * const community = await prisma.community.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CommunityUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CommunityUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Community.
     * @param {CommunityUpsertArgs} args - Arguments to update or create a Community.
     * @example
     * // Update or create a Community
     * const community = await prisma.community.upsert({
     *   create: {
     *     // ... data to create a Community
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Community we want to update
     *   }
     * })
    **/
    upsert<T extends CommunityUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CommunityUpsertArgs<ExtArgs>>
    ): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Communities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityCountArgs} args - Arguments to filter Communities to count.
     * @example
     * // Count the number of Communities
     * const count = await prisma.community.count({
     *   where: {
     *     // ... the filter for the Communities we want to count
     *   }
     * })
    **/
    count<T extends CommunityCountArgs>(
      args?: Subset<T, CommunityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CommunityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Community.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CommunityAggregateArgs>(args: Subset<T, CommunityAggregateArgs>): Prisma.PrismaPromise<GetCommunityAggregateType<T>>

    /**
     * Group by Community.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CommunityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CommunityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CommunityGroupByArgs['orderBy'] }
        : { orderBy?: CommunityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CommunityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCommunityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Community model
   */
  readonly fields: CommunityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Community.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CommunityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    posts<T extends Community$postsArgs<ExtArgs> = {}>(args?: Subset<T, Community$postsArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$PostPayload<ExtArgs>, T, 'findMany'> | Null>;

    members<T extends Community$membersArgs<ExtArgs> = {}>(args?: Subset<T, Community$membersArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, 'findMany'> | Null>;

    favouriteBy<T extends Community$favouriteByArgs<ExtArgs> = {}>(args?: Subset<T, Community$favouriteByArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavouriteCommunityPayload<ExtArgs>, T, 'findMany'> | Null>;

    category<T extends CategoryDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CategoryDefaultArgs<ExtArgs>>): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    notificationCommunityNewMember<T extends Community$notificationCommunityNewMemberArgs<ExtArgs> = {}>(args?: Subset<T, Community$notificationCommunityNewMemberArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$NotificationCommunityNewMemberPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Community model
   */ 
  interface CommunityFieldRefs {
    readonly id: FieldRef<"Community", 'String'>
    readonly name: FieldRef<"Community", 'String'>
    readonly image: FieldRef<"Community", 'String'>
    readonly bannerImage: FieldRef<"Community", 'String'>
    readonly description: FieldRef<"Community", 'String'>
    readonly categoryId: FieldRef<"Community", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Community findUnique
   */
  export type CommunityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter, which Community to fetch.
     */
    where: CommunityWhereUniqueInput
  }

  /**
   * Community findUniqueOrThrow
   */
  export type CommunityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter, which Community to fetch.
     */
    where: CommunityWhereUniqueInput
  }

  /**
   * Community findFirst
   */
  export type CommunityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter, which Community to fetch.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Communities.
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Communities.
     */
    distinct?: CommunityScalarFieldEnum | CommunityScalarFieldEnum[]
  }

  /**
   * Community findFirstOrThrow
   */
  export type CommunityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter, which Community to fetch.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Communities.
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Communities.
     */
    distinct?: CommunityScalarFieldEnum | CommunityScalarFieldEnum[]
  }

  /**
   * Community findMany
   */
  export type CommunityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter, which Communities to fetch.
     */
    where?: CommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Communities to fetch.
     */
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Communities.
     */
    cursor?: CommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Communities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Communities.
     */
    skip?: number
    distinct?: CommunityScalarFieldEnum | CommunityScalarFieldEnum[]
  }

  /**
   * Community create
   */
  export type CommunityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * The data needed to create a Community.
     */
    data: XOR<CommunityCreateInput, CommunityUncheckedCreateInput>
  }

  /**
   * Community createMany
   */
  export type CommunityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Communities.
     */
    data: CommunityCreateManyInput | CommunityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Community update
   */
  export type CommunityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * The data needed to update a Community.
     */
    data: XOR<CommunityUpdateInput, CommunityUncheckedUpdateInput>
    /**
     * Choose, which Community to update.
     */
    where: CommunityWhereUniqueInput
  }

  /**
   * Community updateMany
   */
  export type CommunityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Communities.
     */
    data: XOR<CommunityUpdateManyMutationInput, CommunityUncheckedUpdateManyInput>
    /**
     * Filter which Communities to update
     */
    where?: CommunityWhereInput
  }

  /**
   * Community upsert
   */
  export type CommunityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * The filter to search for the Community to update in case it exists.
     */
    where: CommunityWhereUniqueInput
    /**
     * In case the Community found by the `where` argument doesn't exist, create a new Community with this data.
     */
    create: XOR<CommunityCreateInput, CommunityUncheckedCreateInput>
    /**
     * In case the Community was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CommunityUpdateInput, CommunityUncheckedUpdateInput>
  }

  /**
   * Community delete
   */
  export type CommunityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    /**
     * Filter which Community to delete.
     */
    where: CommunityWhereUniqueInput
  }

  /**
   * Community deleteMany
   */
  export type CommunityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Communities to delete
     */
    where?: CommunityWhereInput
  }

  /**
   * Community.posts
   */
  export type Community$postsArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Post
     */
    select?: PostSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: PostInclude<ExtArgs> | null
    where?: PostWhereInput
    orderBy?: PostOrderByWithRelationInput | PostOrderByWithRelationInput[]
    cursor?: PostWhereUniqueInput
    take?: number
    skip?: number
    distinct?: PostScalarFieldEnum | PostScalarFieldEnum[]
  }

  /**
   * Community.members
   */
  export type Community$membersArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    where?: UserCommunityWhereInput
    orderBy?: UserCommunityOrderByWithRelationInput | UserCommunityOrderByWithRelationInput[]
    cursor?: UserCommunityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: UserCommunityScalarFieldEnum | UserCommunityScalarFieldEnum[]
  }

  /**
   * Community.favouriteBy
   */
  export type Community$favouriteByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteCommunity
     */
    select?: FavouriteCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavouriteCommunityInclude<ExtArgs> | null
    where?: FavouriteCommunityWhereInput
    orderBy?: FavouriteCommunityOrderByWithRelationInput | FavouriteCommunityOrderByWithRelationInput[]
    cursor?: FavouriteCommunityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavouriteCommunityScalarFieldEnum | FavouriteCommunityScalarFieldEnum[]
  }

  /**
   * Community.notificationCommunityNewMember
   */
  export type Community$notificationCommunityNewMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the NotificationCommunityNewMember
     */
    select?: NotificationCommunityNewMemberSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: NotificationCommunityNewMemberInclude<ExtArgs> | null
    where?: NotificationCommunityNewMemberWhereInput
    orderBy?: NotificationCommunityNewMemberOrderByWithRelationInput | NotificationCommunityNewMemberOrderByWithRelationInput[]
    cursor?: NotificationCommunityNewMemberWhereUniqueInput
    take?: number
    skip?: number
    distinct?: NotificationCommunityNewMemberScalarFieldEnum | NotificationCommunityNewMemberScalarFieldEnum[]
  }

  /**
   * Community without action
   */
  export type CommunityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
  }


  /**
   * Model FavouriteCommunity
   */

  export type AggregateFavouriteCommunity = {
    _count: FavouriteCommunityCountAggregateOutputType | null
    _min: FavouriteCommunityMinAggregateOutputType | null
    _max: FavouriteCommunityMaxAggregateOutputType | null
  }

  export type FavouriteCommunityMinAggregateOutputType = {
    communityId: string | null
    userId: string | null
  }

  export type FavouriteCommunityMaxAggregateOutputType = {
    communityId: string | null
    userId: string | null
  }

  export type FavouriteCommunityCountAggregateOutputType = {
    communityId: number
    userId: number
    _all: number
  }


  export type FavouriteCommunityMinAggregateInputType = {
    communityId?: true
    userId?: true
  }

  export type FavouriteCommunityMaxAggregateInputType = {
    communityId?: true
    userId?: true
  }

  export type FavouriteCommunityCountAggregateInputType = {
    communityId?: true
    userId?: true
    _all?: true
  }

  export type FavouriteCommunityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavouriteCommunity to aggregate.
     */
    where?: FavouriteCommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavouriteCommunities to fetch.
     */
    orderBy?: FavouriteCommunityOrderByWithRelationInput | FavouriteCommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavouriteCommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavouriteCommunities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavouriteCommunities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned FavouriteCommunities
    **/
    _count?: true | FavouriteCommunityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavouriteCommunityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavouriteCommunityMaxAggregateInputType
  }

  export type GetFavouriteCommunityAggregateType<T extends FavouriteCommunityAggregateArgs> = {
        [P in keyof T & keyof AggregateFavouriteCommunity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavouriteCommunity[P]>
      : GetScalarType<T[P], AggregateFavouriteCommunity[P]>
  }




  export type FavouriteCommunityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavouriteCommunityWhereInput
    orderBy?: FavouriteCommunityOrderByWithAggregationInput | FavouriteCommunityOrderByWithAggregationInput[]
    by: FavouriteCommunityScalarFieldEnum[] | FavouriteCommunityScalarFieldEnum
    having?: FavouriteCommunityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavouriteCommunityCountAggregateInputType | true
    _min?: FavouriteCommunityMinAggregateInputType
    _max?: FavouriteCommunityMaxAggregateInputType
  }

  export type FavouriteCommunityGroupByOutputType = {
    communityId: string
    userId: string
    _count: FavouriteCommunityCountAggregateOutputType | null
    _min: FavouriteCommunityMinAggregateOutputType | null
    _max: FavouriteCommunityMaxAggregateOutputType | null
  }

  type GetFavouriteCommunityGroupByPayload<T extends FavouriteCommunityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavouriteCommunityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavouriteCommunityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavouriteCommunityGroupByOutputType[P]>
            : GetScalarType<T[P], FavouriteCommunityGroupByOutputType[P]>
        }
      >
    >


  export type FavouriteCommunitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    communityId?: boolean
    userId?: boolean
    community?: boolean | CommunityDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favouriteCommunity"]>

  export type FavouriteCommunitySelectScalar = {
    communityId?: boolean
    userId?: boolean
  }


  export type FavouriteCommunityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    community?: boolean | CommunityDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $FavouriteCommunityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "FavouriteCommunity"
    objects: {
      community: Prisma.$CommunityPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      communityId: string
      userId: string
    }, ExtArgs["result"]["favouriteCommunity"]>
    composites: {}
  }


  type FavouriteCommunityGetPayload<S extends boolean | null | undefined | FavouriteCommunityDefaultArgs> = $Result.GetResult<Prisma.$FavouriteCommunityPayload, S>

  type FavouriteCommunityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FavouriteCommunityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FavouriteCommunityCountAggregateInputType | true
    }

  export interface FavouriteCommunityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['FavouriteCommunity'], meta: { name: 'FavouriteCommunity' } }
    /**
     * Find zero or one FavouriteCommunity that matches the filter.
     * @param {FavouriteCommunityFindUniqueArgs} args - Arguments to find a FavouriteCommunity
     * @example
     * // Get one FavouriteCommunity
     * const favouriteCommunity = await prisma.favouriteCommunity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FavouriteCommunityFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FavouriteCommunityFindUniqueArgs<ExtArgs>>
    ): Prisma__FavouriteCommunityClient<$Result.GetResult<Prisma.$FavouriteCommunityPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one FavouriteCommunity that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FavouriteCommunityFindUniqueOrThrowArgs} args - Arguments to find a FavouriteCommunity
     * @example
     * // Get one FavouriteCommunity
     * const favouriteCommunity = await prisma.favouriteCommunity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FavouriteCommunityFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FavouriteCommunityFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FavouriteCommunityClient<$Result.GetResult<Prisma.$FavouriteCommunityPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first FavouriteCommunity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteCommunityFindFirstArgs} args - Arguments to find a FavouriteCommunity
     * @example
     * // Get one FavouriteCommunity
     * const favouriteCommunity = await prisma.favouriteCommunity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FavouriteCommunityFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FavouriteCommunityFindFirstArgs<ExtArgs>>
    ): Prisma__FavouriteCommunityClient<$Result.GetResult<Prisma.$FavouriteCommunityPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first FavouriteCommunity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteCommunityFindFirstOrThrowArgs} args - Arguments to find a FavouriteCommunity
     * @example
     * // Get one FavouriteCommunity
     * const favouriteCommunity = await prisma.favouriteCommunity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FavouriteCommunityFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FavouriteCommunityFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FavouriteCommunityClient<$Result.GetResult<Prisma.$FavouriteCommunityPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more FavouriteCommunities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteCommunityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all FavouriteCommunities
     * const favouriteCommunities = await prisma.favouriteCommunity.findMany()
     * 
     * // Get first 10 FavouriteCommunities
     * const favouriteCommunities = await prisma.favouriteCommunity.findMany({ take: 10 })
     * 
     * // Only select the `communityId`
     * const favouriteCommunityWithCommunityIdOnly = await prisma.favouriteCommunity.findMany({ select: { communityId: true } })
     * 
    **/
    findMany<T extends FavouriteCommunityFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavouriteCommunityFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavouriteCommunityPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a FavouriteCommunity.
     * @param {FavouriteCommunityCreateArgs} args - Arguments to create a FavouriteCommunity.
     * @example
     * // Create one FavouriteCommunity
     * const FavouriteCommunity = await prisma.favouriteCommunity.create({
     *   data: {
     *     // ... data to create a FavouriteCommunity
     *   }
     * })
     * 
    **/
    create<T extends FavouriteCommunityCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FavouriteCommunityCreateArgs<ExtArgs>>
    ): Prisma__FavouriteCommunityClient<$Result.GetResult<Prisma.$FavouriteCommunityPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many FavouriteCommunities.
     *     @param {FavouriteCommunityCreateManyArgs} args - Arguments to create many FavouriteCommunities.
     *     @example
     *     // Create many FavouriteCommunities
     *     const favouriteCommunity = await prisma.favouriteCommunity.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FavouriteCommunityCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavouriteCommunityCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a FavouriteCommunity.
     * @param {FavouriteCommunityDeleteArgs} args - Arguments to delete one FavouriteCommunity.
     * @example
     * // Delete one FavouriteCommunity
     * const FavouriteCommunity = await prisma.favouriteCommunity.delete({
     *   where: {
     *     // ... filter to delete one FavouriteCommunity
     *   }
     * })
     * 
    **/
    delete<T extends FavouriteCommunityDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FavouriteCommunityDeleteArgs<ExtArgs>>
    ): Prisma__FavouriteCommunityClient<$Result.GetResult<Prisma.$FavouriteCommunityPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one FavouriteCommunity.
     * @param {FavouriteCommunityUpdateArgs} args - Arguments to update one FavouriteCommunity.
     * @example
     * // Update one FavouriteCommunity
     * const favouriteCommunity = await prisma.favouriteCommunity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FavouriteCommunityUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FavouriteCommunityUpdateArgs<ExtArgs>>
    ): Prisma__FavouriteCommunityClient<$Result.GetResult<Prisma.$FavouriteCommunityPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more FavouriteCommunities.
     * @param {FavouriteCommunityDeleteManyArgs} args - Arguments to filter FavouriteCommunities to delete.
     * @example
     * // Delete a few FavouriteCommunities
     * const { count } = await prisma.favouriteCommunity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FavouriteCommunityDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavouriteCommunityDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more FavouriteCommunities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteCommunityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many FavouriteCommunities
     * const favouriteCommunity = await prisma.favouriteCommunity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FavouriteCommunityUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FavouriteCommunityUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one FavouriteCommunity.
     * @param {FavouriteCommunityUpsertArgs} args - Arguments to update or create a FavouriteCommunity.
     * @example
     * // Update or create a FavouriteCommunity
     * const favouriteCommunity = await prisma.favouriteCommunity.upsert({
     *   create: {
     *     // ... data to create a FavouriteCommunity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the FavouriteCommunity we want to update
     *   }
     * })
    **/
    upsert<T extends FavouriteCommunityUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FavouriteCommunityUpsertArgs<ExtArgs>>
    ): Prisma__FavouriteCommunityClient<$Result.GetResult<Prisma.$FavouriteCommunityPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of FavouriteCommunities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteCommunityCountArgs} args - Arguments to filter FavouriteCommunities to count.
     * @example
     * // Count the number of FavouriteCommunities
     * const count = await prisma.favouriteCommunity.count({
     *   where: {
     *     // ... the filter for the FavouriteCommunities we want to count
     *   }
     * })
    **/
    count<T extends FavouriteCommunityCountArgs>(
      args?: Subset<T, FavouriteCommunityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavouriteCommunityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a FavouriteCommunity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteCommunityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavouriteCommunityAggregateArgs>(args: Subset<T, FavouriteCommunityAggregateArgs>): Prisma.PrismaPromise<GetFavouriteCommunityAggregateType<T>>

    /**
     * Group by FavouriteCommunity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavouriteCommunityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavouriteCommunityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavouriteCommunityGroupByArgs['orderBy'] }
        : { orderBy?: FavouriteCommunityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavouriteCommunityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavouriteCommunityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the FavouriteCommunity model
   */
  readonly fields: FavouriteCommunityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for FavouriteCommunity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavouriteCommunityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    community<T extends CommunityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommunityDefaultArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the FavouriteCommunity model
   */ 
  interface FavouriteCommunityFieldRefs {
    readonly communityId: FieldRef<"FavouriteCommunity", 'String'>
    readonly userId: FieldRef<"FavouriteCommunity", 'String'>
  }
    

  // Custom InputTypes
  /**
   * FavouriteCommunity findUnique
   */
  export type FavouriteCommunityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteCommunity
     */
    select?: FavouriteCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavouriteCommunityInclude<ExtArgs> | null
    /**
     * Filter, which FavouriteCommunity to fetch.
     */
    where: FavouriteCommunityWhereUniqueInput
  }

  /**
   * FavouriteCommunity findUniqueOrThrow
   */
  export type FavouriteCommunityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteCommunity
     */
    select?: FavouriteCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavouriteCommunityInclude<ExtArgs> | null
    /**
     * Filter, which FavouriteCommunity to fetch.
     */
    where: FavouriteCommunityWhereUniqueInput
  }

  /**
   * FavouriteCommunity findFirst
   */
  export type FavouriteCommunityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteCommunity
     */
    select?: FavouriteCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavouriteCommunityInclude<ExtArgs> | null
    /**
     * Filter, which FavouriteCommunity to fetch.
     */
    where?: FavouriteCommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavouriteCommunities to fetch.
     */
    orderBy?: FavouriteCommunityOrderByWithRelationInput | FavouriteCommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavouriteCommunities.
     */
    cursor?: FavouriteCommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavouriteCommunities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavouriteCommunities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavouriteCommunities.
     */
    distinct?: FavouriteCommunityScalarFieldEnum | FavouriteCommunityScalarFieldEnum[]
  }

  /**
   * FavouriteCommunity findFirstOrThrow
   */
  export type FavouriteCommunityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteCommunity
     */
    select?: FavouriteCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavouriteCommunityInclude<ExtArgs> | null
    /**
     * Filter, which FavouriteCommunity to fetch.
     */
    where?: FavouriteCommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavouriteCommunities to fetch.
     */
    orderBy?: FavouriteCommunityOrderByWithRelationInput | FavouriteCommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for FavouriteCommunities.
     */
    cursor?: FavouriteCommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavouriteCommunities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavouriteCommunities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of FavouriteCommunities.
     */
    distinct?: FavouriteCommunityScalarFieldEnum | FavouriteCommunityScalarFieldEnum[]
  }

  /**
   * FavouriteCommunity findMany
   */
  export type FavouriteCommunityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteCommunity
     */
    select?: FavouriteCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavouriteCommunityInclude<ExtArgs> | null
    /**
     * Filter, which FavouriteCommunities to fetch.
     */
    where?: FavouriteCommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of FavouriteCommunities to fetch.
     */
    orderBy?: FavouriteCommunityOrderByWithRelationInput | FavouriteCommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing FavouriteCommunities.
     */
    cursor?: FavouriteCommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` FavouriteCommunities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` FavouriteCommunities.
     */
    skip?: number
    distinct?: FavouriteCommunityScalarFieldEnum | FavouriteCommunityScalarFieldEnum[]
  }

  /**
   * FavouriteCommunity create
   */
  export type FavouriteCommunityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteCommunity
     */
    select?: FavouriteCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavouriteCommunityInclude<ExtArgs> | null
    /**
     * The data needed to create a FavouriteCommunity.
     */
    data: XOR<FavouriteCommunityCreateInput, FavouriteCommunityUncheckedCreateInput>
  }

  /**
   * FavouriteCommunity createMany
   */
  export type FavouriteCommunityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many FavouriteCommunities.
     */
    data: FavouriteCommunityCreateManyInput | FavouriteCommunityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * FavouriteCommunity update
   */
  export type FavouriteCommunityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteCommunity
     */
    select?: FavouriteCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavouriteCommunityInclude<ExtArgs> | null
    /**
     * The data needed to update a FavouriteCommunity.
     */
    data: XOR<FavouriteCommunityUpdateInput, FavouriteCommunityUncheckedUpdateInput>
    /**
     * Choose, which FavouriteCommunity to update.
     */
    where: FavouriteCommunityWhereUniqueInput
  }

  /**
   * FavouriteCommunity updateMany
   */
  export type FavouriteCommunityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update FavouriteCommunities.
     */
    data: XOR<FavouriteCommunityUpdateManyMutationInput, FavouriteCommunityUncheckedUpdateManyInput>
    /**
     * Filter which FavouriteCommunities to update
     */
    where?: FavouriteCommunityWhereInput
  }

  /**
   * FavouriteCommunity upsert
   */
  export type FavouriteCommunityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteCommunity
     */
    select?: FavouriteCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavouriteCommunityInclude<ExtArgs> | null
    /**
     * The filter to search for the FavouriteCommunity to update in case it exists.
     */
    where: FavouriteCommunityWhereUniqueInput
    /**
     * In case the FavouriteCommunity found by the `where` argument doesn't exist, create a new FavouriteCommunity with this data.
     */
    create: XOR<FavouriteCommunityCreateInput, FavouriteCommunityUncheckedCreateInput>
    /**
     * In case the FavouriteCommunity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavouriteCommunityUpdateInput, FavouriteCommunityUncheckedUpdateInput>
  }

  /**
   * FavouriteCommunity delete
   */
  export type FavouriteCommunityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteCommunity
     */
    select?: FavouriteCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavouriteCommunityInclude<ExtArgs> | null
    /**
     * Filter which FavouriteCommunity to delete.
     */
    where: FavouriteCommunityWhereUniqueInput
  }

  /**
   * FavouriteCommunity deleteMany
   */
  export type FavouriteCommunityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which FavouriteCommunities to delete
     */
    where?: FavouriteCommunityWhereInput
  }

  /**
   * FavouriteCommunity without action
   */
  export type FavouriteCommunityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FavouriteCommunity
     */
    select?: FavouriteCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: FavouriteCommunityInclude<ExtArgs> | null
  }


  /**
   * Model Category
   */

  export type AggregateCategory = {
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  export type CategoryMinAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type CategoryMaxAggregateOutputType = {
    id: string | null
    name: string | null
  }

  export type CategoryCountAggregateOutputType = {
    id: number
    name: number
    _all: number
  }


  export type CategoryMinAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryMaxAggregateInputType = {
    id?: true
    name?: true
  }

  export type CategoryCountAggregateInputType = {
    id?: true
    name?: true
    _all?: true
  }

  export type CategoryAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Category to aggregate.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Categories
    **/
    _count?: true | CategoryCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: CategoryMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: CategoryMaxAggregateInputType
  }

  export type GetCategoryAggregateType<T extends CategoryAggregateArgs> = {
        [P in keyof T & keyof AggregateCategory]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateCategory[P]>
      : GetScalarType<T[P], AggregateCategory[P]>
  }




  export type CategoryGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: CategoryWhereInput
    orderBy?: CategoryOrderByWithAggregationInput | CategoryOrderByWithAggregationInput[]
    by: CategoryScalarFieldEnum[] | CategoryScalarFieldEnum
    having?: CategoryScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: CategoryCountAggregateInputType | true
    _min?: CategoryMinAggregateInputType
    _max?: CategoryMaxAggregateInputType
  }

  export type CategoryGroupByOutputType = {
    id: string
    name: string
    _count: CategoryCountAggregateOutputType | null
    _min: CategoryMinAggregateOutputType | null
    _max: CategoryMaxAggregateOutputType | null
  }

  type GetCategoryGroupByPayload<T extends CategoryGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<CategoryGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof CategoryGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], CategoryGroupByOutputType[P]>
            : GetScalarType<T[P], CategoryGroupByOutputType[P]>
        }
      >
    >


  export type CategorySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    name?: boolean
    comunities?: boolean | Category$comunitiesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["category"]>

  export type CategorySelectScalar = {
    id?: boolean
    name?: boolean
  }


  export type CategoryInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    comunities?: boolean | Category$comunitiesArgs<ExtArgs>
    _count?: boolean | CategoryCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $CategoryPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Category"
    objects: {
      comunities: Prisma.$CommunityPayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      id: string
      name: string
    }, ExtArgs["result"]["category"]>
    composites: {}
  }


  type CategoryGetPayload<S extends boolean | null | undefined | CategoryDefaultArgs> = $Result.GetResult<Prisma.$CategoryPayload, S>

  type CategoryCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<CategoryFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: CategoryCountAggregateInputType | true
    }

  export interface CategoryDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Category'], meta: { name: 'Category' } }
    /**
     * Find zero or one Category that matches the filter.
     * @param {CategoryFindUniqueArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends CategoryFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryFindUniqueArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Category that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {CategoryFindUniqueOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends CategoryFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Category that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends CategoryFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Category that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindFirstOrThrowArgs} args - Arguments to find a Category
     * @example
     * // Get one Category
     * const category = await prisma.category.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends CategoryFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Categories that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Categories
     * const categories = await prisma.category.findMany()
     * 
     * // Get first 10 Categories
     * const categories = await prisma.category.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const categoryWithIdOnly = await prisma.category.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends CategoryFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Category.
     * @param {CategoryCreateArgs} args - Arguments to create a Category.
     * @example
     * // Create one Category
     * const Category = await prisma.category.create({
     *   data: {
     *     // ... data to create a Category
     *   }
     * })
     * 
    **/
    create<T extends CategoryCreateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryCreateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Categories.
     *     @param {CategoryCreateManyArgs} args - Arguments to create many Categories.
     *     @example
     *     // Create many Categories
     *     const category = await prisma.category.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends CategoryCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Category.
     * @param {CategoryDeleteArgs} args - Arguments to delete one Category.
     * @example
     * // Delete one Category
     * const Category = await prisma.category.delete({
     *   where: {
     *     // ... filter to delete one Category
     *   }
     * })
     * 
    **/
    delete<T extends CategoryDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryDeleteArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Category.
     * @param {CategoryUpdateArgs} args - Arguments to update one Category.
     * @example
     * // Update one Category
     * const category = await prisma.category.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends CategoryUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Categories.
     * @param {CategoryDeleteManyArgs} args - Arguments to filter Categories to delete.
     * @example
     * // Delete a few Categories
     * const { count } = await prisma.category.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends CategoryDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, CategoryDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Categories
     * const category = await prisma.category.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends CategoryUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Category.
     * @param {CategoryUpsertArgs} args - Arguments to update or create a Category.
     * @example
     * // Update or create a Category
     * const category = await prisma.category.upsert({
     *   create: {
     *     // ... data to create a Category
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Category we want to update
     *   }
     * })
    **/
    upsert<T extends CategoryUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, CategoryUpsertArgs<ExtArgs>>
    ): Prisma__CategoryClient<$Result.GetResult<Prisma.$CategoryPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Categories.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryCountArgs} args - Arguments to filter Categories to count.
     * @example
     * // Count the number of Categories
     * const count = await prisma.category.count({
     *   where: {
     *     // ... the filter for the Categories we want to count
     *   }
     * })
    **/
    count<T extends CategoryCountArgs>(
      args?: Subset<T, CategoryCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], CategoryCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends CategoryAggregateArgs>(args: Subset<T, CategoryAggregateArgs>): Prisma.PrismaPromise<GetCategoryAggregateType<T>>

    /**
     * Group by Category.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {CategoryGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends CategoryGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: CategoryGroupByArgs['orderBy'] }
        : { orderBy?: CategoryGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, CategoryGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetCategoryGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Category model
   */
  readonly fields: CategoryFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Category.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__CategoryClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    comunities<T extends Category$comunitiesArgs<ExtArgs> = {}>(args?: Subset<T, Category$comunitiesArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Category model
   */ 
  interface CategoryFieldRefs {
    readonly id: FieldRef<"Category", 'String'>
    readonly name: FieldRef<"Category", 'String'>
  }
    

  // Custom InputTypes
  /**
   * Category findUnique
   */
  export type CategoryFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findUniqueOrThrow
   */
  export type CategoryFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category findFirst
   */
  export type CategoryFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findFirstOrThrow
   */
  export type CategoryFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Category to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Categories.
     */
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category findMany
   */
  export type CategoryFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter, which Categories to fetch.
     */
    where?: CategoryWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Categories to fetch.
     */
    orderBy?: CategoryOrderByWithRelationInput | CategoryOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Categories.
     */
    cursor?: CategoryWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Categories from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Categories.
     */
    skip?: number
    distinct?: CategoryScalarFieldEnum | CategoryScalarFieldEnum[]
  }

  /**
   * Category create
   */
  export type CategoryCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to create a Category.
     */
    data: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
  }

  /**
   * Category createMany
   */
  export type CategoryCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Categories.
     */
    data: CategoryCreateManyInput | CategoryCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * Category update
   */
  export type CategoryUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The data needed to update a Category.
     */
    data: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
    /**
     * Choose, which Category to update.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category updateMany
   */
  export type CategoryUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Categories.
     */
    data: XOR<CategoryUpdateManyMutationInput, CategoryUncheckedUpdateManyInput>
    /**
     * Filter which Categories to update
     */
    where?: CategoryWhereInput
  }

  /**
   * Category upsert
   */
  export type CategoryUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * The filter to search for the Category to update in case it exists.
     */
    where: CategoryWhereUniqueInput
    /**
     * In case the Category found by the `where` argument doesn't exist, create a new Category with this data.
     */
    create: XOR<CategoryCreateInput, CategoryUncheckedCreateInput>
    /**
     * In case the Category was found with the provided `where` argument, update it with this data.
     */
    update: XOR<CategoryUpdateInput, CategoryUncheckedUpdateInput>
  }

  /**
   * Category delete
   */
  export type CategoryDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
    /**
     * Filter which Category to delete.
     */
    where: CategoryWhereUniqueInput
  }

  /**
   * Category deleteMany
   */
  export type CategoryDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Categories to delete
     */
    where?: CategoryWhereInput
  }

  /**
   * Category.comunities
   */
  export type Category$comunitiesArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Community
     */
    select?: CommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CommunityInclude<ExtArgs> | null
    where?: CommunityWhereInput
    orderBy?: CommunityOrderByWithRelationInput | CommunityOrderByWithRelationInput[]
    cursor?: CommunityWhereUniqueInput
    take?: number
    skip?: number
    distinct?: CommunityScalarFieldEnum | CommunityScalarFieldEnum[]
  }

  /**
   * Category without action
   */
  export type CategoryDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Category
     */
    select?: CategorySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: CategoryInclude<ExtArgs> | null
  }


  /**
   * Model UserCommunity
   */

  export type AggregateUserCommunity = {
    _count: UserCommunityCountAggregateOutputType | null
    _min: UserCommunityMinAggregateOutputType | null
    _max: UserCommunityMaxAggregateOutputType | null
  }

  export type UserCommunityMinAggregateOutputType = {
    communityId: string | null
    userId: string | null
    role: $Enums.Role | null
  }

  export type UserCommunityMaxAggregateOutputType = {
    communityId: string | null
    userId: string | null
    role: $Enums.Role | null
  }

  export type UserCommunityCountAggregateOutputType = {
    communityId: number
    userId: number
    role: number
    _all: number
  }


  export type UserCommunityMinAggregateInputType = {
    communityId?: true
    userId?: true
    role?: true
  }

  export type UserCommunityMaxAggregateInputType = {
    communityId?: true
    userId?: true
    role?: true
  }

  export type UserCommunityCountAggregateInputType = {
    communityId?: true
    userId?: true
    role?: true
    _all?: true
  }

  export type UserCommunityAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCommunity to aggregate.
     */
    where?: UserCommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCommunities to fetch.
     */
    orderBy?: UserCommunityOrderByWithRelationInput | UserCommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserCommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCommunities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCommunities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned UserCommunities
    **/
    _count?: true | UserCommunityCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserCommunityMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserCommunityMaxAggregateInputType
  }

  export type GetUserCommunityAggregateType<T extends UserCommunityAggregateArgs> = {
        [P in keyof T & keyof AggregateUserCommunity]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUserCommunity[P]>
      : GetScalarType<T[P], AggregateUserCommunity[P]>
  }




  export type UserCommunityGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserCommunityWhereInput
    orderBy?: UserCommunityOrderByWithAggregationInput | UserCommunityOrderByWithAggregationInput[]
    by: UserCommunityScalarFieldEnum[] | UserCommunityScalarFieldEnum
    having?: UserCommunityScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCommunityCountAggregateInputType | true
    _min?: UserCommunityMinAggregateInputType
    _max?: UserCommunityMaxAggregateInputType
  }

  export type UserCommunityGroupByOutputType = {
    communityId: string
    userId: string
    role: $Enums.Role
    _count: UserCommunityCountAggregateOutputType | null
    _min: UserCommunityMinAggregateOutputType | null
    _max: UserCommunityMaxAggregateOutputType | null
  }

  type GetUserCommunityGroupByPayload<T extends UserCommunityGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserCommunityGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserCommunityGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserCommunityGroupByOutputType[P]>
            : GetScalarType<T[P], UserCommunityGroupByOutputType[P]>
        }
      >
    >


  export type UserCommunitySelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    communityId?: boolean
    userId?: boolean
    role?: boolean
    community?: boolean | CommunityDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["userCommunity"]>

  export type UserCommunitySelectScalar = {
    communityId?: boolean
    userId?: boolean
    role?: boolean
  }


  export type UserCommunityInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    community?: boolean | CommunityDefaultArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
  }


  export type $UserCommunityPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "UserCommunity"
    objects: {
      community: Prisma.$CommunityPayload<ExtArgs>
      user: Prisma.$UserPayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      communityId: string
      userId: string
      role: $Enums.Role
    }, ExtArgs["result"]["userCommunity"]>
    composites: {}
  }


  type UserCommunityGetPayload<S extends boolean | null | undefined | UserCommunityDefaultArgs> = $Result.GetResult<Prisma.$UserCommunityPayload, S>

  type UserCommunityCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserCommunityFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCommunityCountAggregateInputType | true
    }

  export interface UserCommunityDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['UserCommunity'], meta: { name: 'UserCommunity' } }
    /**
     * Find zero or one UserCommunity that matches the filter.
     * @param {UserCommunityFindUniqueArgs} args - Arguments to find a UserCommunity
     * @example
     * // Get one UserCommunity
     * const userCommunity = await prisma.userCommunity.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserCommunityFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserCommunityFindUniqueArgs<ExtArgs>>
    ): Prisma__UserCommunityClient<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one UserCommunity that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserCommunityFindUniqueOrThrowArgs} args - Arguments to find a UserCommunity
     * @example
     * // Get one UserCommunity
     * const userCommunity = await prisma.userCommunity.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserCommunityFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCommunityFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserCommunityClient<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first UserCommunity that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommunityFindFirstArgs} args - Arguments to find a UserCommunity
     * @example
     * // Get one UserCommunity
     * const userCommunity = await prisma.userCommunity.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserCommunityFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCommunityFindFirstArgs<ExtArgs>>
    ): Prisma__UserCommunityClient<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first UserCommunity that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommunityFindFirstOrThrowArgs} args - Arguments to find a UserCommunity
     * @example
     * // Get one UserCommunity
     * const userCommunity = await prisma.userCommunity.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserCommunityFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCommunityFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserCommunityClient<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more UserCommunities that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommunityFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all UserCommunities
     * const userCommunities = await prisma.userCommunity.findMany()
     * 
     * // Get first 10 UserCommunities
     * const userCommunities = await prisma.userCommunity.findMany({ take: 10 })
     * 
     * // Only select the `communityId`
     * const userCommunityWithCommunityIdOnly = await prisma.userCommunity.findMany({ select: { communityId: true } })
     * 
    **/
    findMany<T extends UserCommunityFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCommunityFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a UserCommunity.
     * @param {UserCommunityCreateArgs} args - Arguments to create a UserCommunity.
     * @example
     * // Create one UserCommunity
     * const UserCommunity = await prisma.userCommunity.create({
     *   data: {
     *     // ... data to create a UserCommunity
     *   }
     * })
     * 
    **/
    create<T extends UserCommunityCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCommunityCreateArgs<ExtArgs>>
    ): Prisma__UserCommunityClient<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many UserCommunities.
     *     @param {UserCommunityCreateManyArgs} args - Arguments to create many UserCommunities.
     *     @example
     *     // Create many UserCommunities
     *     const userCommunity = await prisma.userCommunity.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCommunityCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCommunityCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a UserCommunity.
     * @param {UserCommunityDeleteArgs} args - Arguments to delete one UserCommunity.
     * @example
     * // Delete one UserCommunity
     * const UserCommunity = await prisma.userCommunity.delete({
     *   where: {
     *     // ... filter to delete one UserCommunity
     *   }
     * })
     * 
    **/
    delete<T extends UserCommunityDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserCommunityDeleteArgs<ExtArgs>>
    ): Prisma__UserCommunityClient<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one UserCommunity.
     * @param {UserCommunityUpdateArgs} args - Arguments to update one UserCommunity.
     * @example
     * // Update one UserCommunity
     * const userCommunity = await prisma.userCommunity.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserCommunityUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCommunityUpdateArgs<ExtArgs>>
    ): Prisma__UserCommunityClient<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more UserCommunities.
     * @param {UserCommunityDeleteManyArgs} args - Arguments to filter UserCommunities to delete.
     * @example
     * // Delete a few UserCommunities
     * const { count } = await prisma.userCommunity.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserCommunityDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCommunityDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more UserCommunities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommunityUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many UserCommunities
     * const userCommunity = await prisma.userCommunity.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserCommunityUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserCommunityUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one UserCommunity.
     * @param {UserCommunityUpsertArgs} args - Arguments to update or create a UserCommunity.
     * @example
     * // Update or create a UserCommunity
     * const userCommunity = await prisma.userCommunity.upsert({
     *   create: {
     *     // ... data to create a UserCommunity
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the UserCommunity we want to update
     *   }
     * })
    **/
    upsert<T extends UserCommunityUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserCommunityUpsertArgs<ExtArgs>>
    ): Prisma__UserCommunityClient<$Result.GetResult<Prisma.$UserCommunityPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of UserCommunities.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommunityCountArgs} args - Arguments to filter UserCommunities to count.
     * @example
     * // Count the number of UserCommunities
     * const count = await prisma.userCommunity.count({
     *   where: {
     *     // ... the filter for the UserCommunities we want to count
     *   }
     * })
    **/
    count<T extends UserCommunityCountArgs>(
      args?: Subset<T, UserCommunityCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCommunityCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a UserCommunity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommunityAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserCommunityAggregateArgs>(args: Subset<T, UserCommunityAggregateArgs>): Prisma.PrismaPromise<GetUserCommunityAggregateType<T>>

    /**
     * Group by UserCommunity.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCommunityGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserCommunityGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserCommunityGroupByArgs['orderBy'] }
        : { orderBy?: UserCommunityGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserCommunityGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserCommunityGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the UserCommunity model
   */
  readonly fields: UserCommunityFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for UserCommunity.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserCommunityClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    community<T extends CommunityDefaultArgs<ExtArgs> = {}>(args?: Subset<T, CommunityDefaultArgs<ExtArgs>>): Prisma__CommunityClient<$Result.GetResult<Prisma.$CommunityPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the UserCommunity model
   */ 
  interface UserCommunityFieldRefs {
    readonly communityId: FieldRef<"UserCommunity", 'String'>
    readonly userId: FieldRef<"UserCommunity", 'String'>
    readonly role: FieldRef<"UserCommunity", 'Role'>
  }
    

  // Custom InputTypes
  /**
   * UserCommunity findUnique
   */
  export type UserCommunityFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    /**
     * Filter, which UserCommunity to fetch.
     */
    where: UserCommunityWhereUniqueInput
  }

  /**
   * UserCommunity findUniqueOrThrow
   */
  export type UserCommunityFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    /**
     * Filter, which UserCommunity to fetch.
     */
    where: UserCommunityWhereUniqueInput
  }

  /**
   * UserCommunity findFirst
   */
  export type UserCommunityFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    /**
     * Filter, which UserCommunity to fetch.
     */
    where?: UserCommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCommunities to fetch.
     */
    orderBy?: UserCommunityOrderByWithRelationInput | UserCommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCommunities.
     */
    cursor?: UserCommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCommunities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCommunities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCommunities.
     */
    distinct?: UserCommunityScalarFieldEnum | UserCommunityScalarFieldEnum[]
  }

  /**
   * UserCommunity findFirstOrThrow
   */
  export type UserCommunityFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    /**
     * Filter, which UserCommunity to fetch.
     */
    where?: UserCommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCommunities to fetch.
     */
    orderBy?: UserCommunityOrderByWithRelationInput | UserCommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for UserCommunities.
     */
    cursor?: UserCommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCommunities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCommunities.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of UserCommunities.
     */
    distinct?: UserCommunityScalarFieldEnum | UserCommunityScalarFieldEnum[]
  }

  /**
   * UserCommunity findMany
   */
  export type UserCommunityFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    /**
     * Filter, which UserCommunities to fetch.
     */
    where?: UserCommunityWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of UserCommunities to fetch.
     */
    orderBy?: UserCommunityOrderByWithRelationInput | UserCommunityOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing UserCommunities.
     */
    cursor?: UserCommunityWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` UserCommunities from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` UserCommunities.
     */
    skip?: number
    distinct?: UserCommunityScalarFieldEnum | UserCommunityScalarFieldEnum[]
  }

  /**
   * UserCommunity create
   */
  export type UserCommunityCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    /**
     * The data needed to create a UserCommunity.
     */
    data: XOR<UserCommunityCreateInput, UserCommunityUncheckedCreateInput>
  }

  /**
   * UserCommunity createMany
   */
  export type UserCommunityCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many UserCommunities.
     */
    data: UserCommunityCreateManyInput | UserCommunityCreateManyInput[]
    skipDuplicates?: boolean
  }

  /**
   * UserCommunity update
   */
  export type UserCommunityUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    /**
     * The data needed to update a UserCommunity.
     */
    data: XOR<UserCommunityUpdateInput, UserCommunityUncheckedUpdateInput>
    /**
     * Choose, which UserCommunity to update.
     */
    where: UserCommunityWhereUniqueInput
  }

  /**
   * UserCommunity updateMany
   */
  export type UserCommunityUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update UserCommunities.
     */
    data: XOR<UserCommunityUpdateManyMutationInput, UserCommunityUncheckedUpdateManyInput>
    /**
     * Filter which UserCommunities to update
     */
    where?: UserCommunityWhereInput
  }

  /**
   * UserCommunity upsert
   */
  export type UserCommunityUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    /**
     * The filter to search for the UserCommunity to update in case it exists.
     */
    where: UserCommunityWhereUniqueInput
    /**
     * In case the UserCommunity found by the `where` argument doesn't exist, create a new UserCommunity with this data.
     */
    create: XOR<UserCommunityCreateInput, UserCommunityUncheckedCreateInput>
    /**
     * In case the UserCommunity was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserCommunityUpdateInput, UserCommunityUncheckedUpdateInput>
  }

  /**
   * UserCommunity delete
   */
  export type UserCommunityDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
    /**
     * Filter which UserCommunity to delete.
     */
    where: UserCommunityWhereUniqueInput
  }

  /**
   * UserCommunity deleteMany
   */
  export type UserCommunityDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which UserCommunities to delete
     */
    where?: UserCommunityWhereInput
  }

  /**
   * UserCommunity without action
   */
  export type UserCommunityDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCommunity
     */
    select?: UserCommunitySelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well
     */
    include?: UserCommunityInclude<ExtArgs> | null
  }


  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const ExampleScalarFieldEnum: {
    id: 'id'
  };

  export type ExampleScalarFieldEnum = (typeof ExampleScalarFieldEnum)[keyof typeof ExampleScalarFieldEnum]


  export const AccountScalarFieldEnum: {
    id: 'id',
    userId: 'userId',
    type: 'type',
    provider: 'provider',
    providerAccountId: 'providerAccountId',
    refresh_token: 'refresh_token',
    access_token: 'access_token',
    expires_at: 'expires_at',
    token_type: 'token_type',
    scope: 'scope',
    id_token: 'id_token',
    session_state: 'session_state',
    refresh_token_expires_in: 'refresh_token_expires_in'
  };

  export type AccountScalarFieldEnum = (typeof AccountScalarFieldEnum)[keyof typeof AccountScalarFieldEnum]


  export const SessionScalarFieldEnum: {
    id: 'id',
    sessionToken: 'sessionToken',
    userId: 'userId',
    expires: 'expires'
  };

  export type SessionScalarFieldEnum = (typeof SessionScalarFieldEnum)[keyof typeof SessionScalarFieldEnum]


  export const UserScalarFieldEnum: {
    id: 'id',
    name: 'name',
    email: 'email',
    emailVerified: 'emailVerified',
    image: 'image',
    bannerImage: 'bannerImage',
    bio: 'bio',
    facebook: 'facebook',
    instagram: 'instagram',
    twitter: 'twitter',
    whatsapp: 'whatsapp'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const VerificationTokenScalarFieldEnum: {
    identifier: 'identifier',
    token: 'token',
    expires: 'expires'
  };

  export type VerificationTokenScalarFieldEnum = (typeof VerificationTokenScalarFieldEnum)[keyof typeof VerificationTokenScalarFieldEnum]


  export const PostScalarFieldEnum: {
    id: 'id',
    content: 'content',
    userId: 'userId',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    isDeleted: 'isDeleted',
    shareParentId: 'shareParentId',
    communityId: 'communityId',
    link: 'link'
  };

  export type PostScalarFieldEnum = (typeof PostScalarFieldEnum)[keyof typeof PostScalarFieldEnum]


  export const MentionScalarFieldEnum: {
    userId: 'userId',
    postId: 'postId'
  };

  export type MentionScalarFieldEnum = (typeof MentionScalarFieldEnum)[keyof typeof MentionScalarFieldEnum]


  export const NotificationScalarFieldEnum: {
    id: 'id',
    createdAt: 'createdAt',
    isRead: 'isRead',
    userId: 'userId'
  };

  export type NotificationScalarFieldEnum = (typeof NotificationScalarFieldEnum)[keyof typeof NotificationScalarFieldEnum]


  export const NotificationMentionScalarFieldEnum: {
    id: 'id',
    notificationId: 'notificationId',
    postId: 'postId'
  };

  export type NotificationMentionScalarFieldEnum = (typeof NotificationMentionScalarFieldEnum)[keyof typeof NotificationMentionScalarFieldEnum]


  export const NotificationStartFollowScalarFieldEnum: {
    id: 'id',
    notificationId: 'notificationId',
    userIdNotificationStartFollow: 'userIdNotificationStartFollow'
  };

  export type NotificationStartFollowScalarFieldEnum = (typeof NotificationStartFollowScalarFieldEnum)[keyof typeof NotificationStartFollowScalarFieldEnum]


  export const NotificationCommunityNewMemberScalarFieldEnum: {
    id: 'id',
    notificationId: 'notificationId',
    communityId: 'communityId',
    userId: 'userId'
  };

  export type NotificationCommunityNewMemberScalarFieldEnum = (typeof NotificationCommunityNewMemberScalarFieldEnum)[keyof typeof NotificationCommunityNewMemberScalarFieldEnum]


  export const NotificationPostCommentScalarFieldEnum: {
    id: 'id',
    notificationId: 'notificationId',
    commentId: 'commentId'
  };

  export type NotificationPostCommentScalarFieldEnum = (typeof NotificationPostCommentScalarFieldEnum)[keyof typeof NotificationPostCommentScalarFieldEnum]


  export const NotificationCommentReplyScalarFieldEnum: {
    id: 'id',
    notificationId: 'notificationId',
    commentId: 'commentId'
  };

  export type NotificationCommentReplyScalarFieldEnum = (typeof NotificationCommentReplyScalarFieldEnum)[keyof typeof NotificationCommentReplyScalarFieldEnum]


  export const UserShareScalarFieldEnum: {
    userId: 'userId',
    postId: 'postId'
  };

  export type UserShareScalarFieldEnum = (typeof UserShareScalarFieldEnum)[keyof typeof UserShareScalarFieldEnum]


  export const ImageScalarFieldEnum: {
    id: 'id',
    url: 'url',
    fallbackUrl: 'fallbackUrl',
    alt: 'alt',
    postId: 'postId',
    width: 'width',
    height: 'height'
  };

  export type ImageScalarFieldEnum = (typeof ImageScalarFieldEnum)[keyof typeof ImageScalarFieldEnum]


  export const CommentScalarFieldEnum: {
    id: 'id',
    message: 'message',
    createdAt: 'createdAt',
    updatedAt: 'updatedAt',
    userId: 'userId',
    postId: 'postId',
    parentId: 'parentId',
    isDeleted: 'isDeleted'
  };

  export type CommentScalarFieldEnum = (typeof CommentScalarFieldEnum)[keyof typeof CommentScalarFieldEnum]


  export const PostLikeScalarFieldEnum: {
    userId: 'userId',
    postId: 'postId'
  };

  export type PostLikeScalarFieldEnum = (typeof PostLikeScalarFieldEnum)[keyof typeof PostLikeScalarFieldEnum]


  export const CommentLikeScalarFieldEnum: {
    userId: 'userId',
    commentId: 'commentId'
  };

  export type CommentLikeScalarFieldEnum = (typeof CommentLikeScalarFieldEnum)[keyof typeof CommentLikeScalarFieldEnum]


  export const BookmarkScalarFieldEnum: {
    userId: 'userId',
    postId: 'postId'
  };

  export type BookmarkScalarFieldEnum = (typeof BookmarkScalarFieldEnum)[keyof typeof BookmarkScalarFieldEnum]


  export const TagScalarFieldEnum: {
    name: 'name',
    color: 'color'
  };

  export type TagScalarFieldEnum = (typeof TagScalarFieldEnum)[keyof typeof TagScalarFieldEnum]


  export const PostTagScalarFieldEnum: {
    tagName: 'tagName',
    postId: 'postId'
  };

  export type PostTagScalarFieldEnum = (typeof PostTagScalarFieldEnum)[keyof typeof PostTagScalarFieldEnum]


  export const CommunityScalarFieldEnum: {
    id: 'id',
    name: 'name',
    image: 'image',
    bannerImage: 'bannerImage',
    description: 'description',
    categoryId: 'categoryId'
  };

  export type CommunityScalarFieldEnum = (typeof CommunityScalarFieldEnum)[keyof typeof CommunityScalarFieldEnum]


  export const FavouriteCommunityScalarFieldEnum: {
    communityId: 'communityId',
    userId: 'userId'
  };

  export type FavouriteCommunityScalarFieldEnum = (typeof FavouriteCommunityScalarFieldEnum)[keyof typeof FavouriteCommunityScalarFieldEnum]


  export const CategoryScalarFieldEnum: {
    id: 'id',
    name: 'name'
  };

  export type CategoryScalarFieldEnum = (typeof CategoryScalarFieldEnum)[keyof typeof CategoryScalarFieldEnum]


  export const UserCommunityScalarFieldEnum: {
    communityId: 'communityId',
    userId: 'userId',
    role: 'role'
  };

  export type UserCommunityScalarFieldEnum = (typeof UserCommunityScalarFieldEnum)[keyof typeof UserCommunityScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'Boolean'
   */
  export type BooleanFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Boolean'>
    


  /**
   * Reference to a field of type 'Role'
   */
  export type EnumRoleFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Role'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    
  /**
   * Deep Input Types
   */


  export type ExampleWhereInput = {
    AND?: ExampleWhereInput | ExampleWhereInput[]
    OR?: ExampleWhereInput[]
    NOT?: ExampleWhereInput | ExampleWhereInput[]
    id?: StringFilter<"Example"> | string
  }

  export type ExampleOrderByWithRelationInput = {
    id?: SortOrder
  }

  export type ExampleWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ExampleWhereInput | ExampleWhereInput[]
    OR?: ExampleWhereInput[]
    NOT?: ExampleWhereInput | ExampleWhereInput[]
  }, "id">

  export type ExampleOrderByWithAggregationInput = {
    id?: SortOrder
    _count?: ExampleCountOrderByAggregateInput
    _max?: ExampleMaxOrderByAggregateInput
    _min?: ExampleMinOrderByAggregateInput
  }

  export type ExampleScalarWhereWithAggregatesInput = {
    AND?: ExampleScalarWhereWithAggregatesInput | ExampleScalarWhereWithAggregatesInput[]
    OR?: ExampleScalarWhereWithAggregatesInput[]
    NOT?: ExampleScalarWhereWithAggregatesInput | ExampleScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Example"> | string
  }

  export type AccountWhereInput = {
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    refresh_token_expires_in?: IntNullableFilter<"Account"> | number | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type AccountOrderByWithRelationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    refresh_token_expires_in?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type AccountWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    provider_providerAccountId?: AccountProviderProviderAccountIdCompoundUniqueInput
    AND?: AccountWhereInput | AccountWhereInput[]
    OR?: AccountWhereInput[]
    NOT?: AccountWhereInput | AccountWhereInput[]
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    refresh_token_expires_in?: IntNullableFilter<"Account"> | number | null
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "provider_providerAccountId">

  export type AccountOrderByWithAggregationInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrderInput | SortOrder
    access_token?: SortOrderInput | SortOrder
    expires_at?: SortOrderInput | SortOrder
    token_type?: SortOrderInput | SortOrder
    scope?: SortOrderInput | SortOrder
    id_token?: SortOrderInput | SortOrder
    session_state?: SortOrderInput | SortOrder
    refresh_token_expires_in?: SortOrderInput | SortOrder
    _count?: AccountCountOrderByAggregateInput
    _avg?: AccountAvgOrderByAggregateInput
    _max?: AccountMaxOrderByAggregateInput
    _min?: AccountMinOrderByAggregateInput
    _sum?: AccountSumOrderByAggregateInput
  }

  export type AccountScalarWhereWithAggregatesInput = {
    AND?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    OR?: AccountScalarWhereWithAggregatesInput[]
    NOT?: AccountScalarWhereWithAggregatesInput | AccountScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Account"> | string
    userId?: StringWithAggregatesFilter<"Account"> | string
    type?: StringWithAggregatesFilter<"Account"> | string
    provider?: StringWithAggregatesFilter<"Account"> | string
    providerAccountId?: StringWithAggregatesFilter<"Account"> | string
    refresh_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    access_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    expires_at?: IntNullableWithAggregatesFilter<"Account"> | number | null
    token_type?: StringNullableWithAggregatesFilter<"Account"> | string | null
    scope?: StringNullableWithAggregatesFilter<"Account"> | string | null
    id_token?: StringNullableWithAggregatesFilter<"Account"> | string | null
    session_state?: StringNullableWithAggregatesFilter<"Account"> | string | null
    refresh_token_expires_in?: IntNullableWithAggregatesFilter<"Account"> | number | null
  }

  export type SessionWhereInput = {
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type SessionOrderByWithRelationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    user?: UserOrderByWithRelationInput
  }

  export type SessionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    sessionToken?: string
    AND?: SessionWhereInput | SessionWhereInput[]
    OR?: SessionWhereInput[]
    NOT?: SessionWhereInput | SessionWhereInput[]
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "sessionToken">

  export type SessionOrderByWithAggregationInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
    _count?: SessionCountOrderByAggregateInput
    _max?: SessionMaxOrderByAggregateInput
    _min?: SessionMinOrderByAggregateInput
  }

  export type SessionScalarWhereWithAggregatesInput = {
    AND?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    OR?: SessionScalarWhereWithAggregatesInput[]
    NOT?: SessionScalarWhereWithAggregatesInput | SessionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Session"> | string
    sessionToken?: StringWithAggregatesFilter<"Session"> | string
    userId?: StringWithAggregatesFilter<"Session"> | string
    expires?: DateTimeWithAggregatesFilter<"Session"> | Date | string
  }

  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    bannerImage?: StringNullableFilter<"User"> | string | null
    bio?: StringFilter<"User"> | string
    facebook?: StringNullableFilter<"User"> | string | null
    instagram?: StringNullableFilter<"User"> | string | null
    twitter?: StringNullableFilter<"User"> | string | null
    whatsapp?: StringNullableFilter<"User"> | string | null
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    followedBy?: UserListRelationFilter
    following?: UserListRelationFilter
    posts?: PostListRelationFilter
    comments?: CommentListRelationFilter
    likedPosts?: PostLikeListRelationFilter
    likedComments?: CommentLikeListRelationFilter
    bookmarks?: BookmarkListRelationFilter
    communities?: UserCommunityListRelationFilter
    mentions?: MentionListRelationFilter
    favouriteCommunities?: FavouriteCommunityListRelationFilter
    sharedPost?: UserShareListRelationFilter
    notifications?: NotificationListRelationFilter
    notificationStartFollow?: NotificationStartFollowListRelationFilter
    notificationCommunityNewMember?: NotificationCommunityNewMemberListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    bannerImage?: SortOrderInput | SortOrder
    bio?: SortOrder
    facebook?: SortOrderInput | SortOrder
    instagram?: SortOrderInput | SortOrder
    twitter?: SortOrderInput | SortOrder
    whatsapp?: SortOrderInput | SortOrder
    accounts?: AccountOrderByRelationAggregateInput
    sessions?: SessionOrderByRelationAggregateInput
    followedBy?: UserOrderByRelationAggregateInput
    following?: UserOrderByRelationAggregateInput
    posts?: PostOrderByRelationAggregateInput
    comments?: CommentOrderByRelationAggregateInput
    likedPosts?: PostLikeOrderByRelationAggregateInput
    likedComments?: CommentLikeOrderByRelationAggregateInput
    bookmarks?: BookmarkOrderByRelationAggregateInput
    communities?: UserCommunityOrderByRelationAggregateInput
    mentions?: MentionOrderByRelationAggregateInput
    favouriteCommunities?: FavouriteCommunityOrderByRelationAggregateInput
    sharedPost?: UserShareOrderByRelationAggregateInput
    notifications?: NotificationOrderByRelationAggregateInput
    notificationStartFollow?: NotificationStartFollowOrderByRelationAggregateInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    bannerImage?: StringNullableFilter<"User"> | string | null
    bio?: StringFilter<"User"> | string
    facebook?: StringNullableFilter<"User"> | string | null
    instagram?: StringNullableFilter<"User"> | string | null
    twitter?: StringNullableFilter<"User"> | string | null
    whatsapp?: StringNullableFilter<"User"> | string | null
    accounts?: AccountListRelationFilter
    sessions?: SessionListRelationFilter
    followedBy?: UserListRelationFilter
    following?: UserListRelationFilter
    posts?: PostListRelationFilter
    comments?: CommentListRelationFilter
    likedPosts?: PostLikeListRelationFilter
    likedComments?: CommentLikeListRelationFilter
    bookmarks?: BookmarkListRelationFilter
    communities?: UserCommunityListRelationFilter
    mentions?: MentionListRelationFilter
    favouriteCommunities?: FavouriteCommunityListRelationFilter
    sharedPost?: UserShareListRelationFilter
    notifications?: NotificationListRelationFilter
    notificationStartFollow?: NotificationStartFollowListRelationFilter
    notificationCommunityNewMember?: NotificationCommunityNewMemberListRelationFilter
  }, "id" | "email">

  export type UserOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrderInput | SortOrder
    email?: SortOrderInput | SortOrder
    emailVerified?: SortOrderInput | SortOrder
    image?: SortOrderInput | SortOrder
    bannerImage?: SortOrderInput | SortOrder
    bio?: SortOrder
    facebook?: SortOrderInput | SortOrder
    instagram?: SortOrderInput | SortOrder
    twitter?: SortOrderInput | SortOrder
    whatsapp?: SortOrderInput | SortOrder
    _count?: UserCountOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"User"> | string
    name?: StringNullableWithAggregatesFilter<"User"> | string | null
    email?: StringNullableWithAggregatesFilter<"User"> | string | null
    emailVerified?: DateTimeNullableWithAggregatesFilter<"User"> | Date | string | null
    image?: StringNullableWithAggregatesFilter<"User"> | string | null
    bannerImage?: StringNullableWithAggregatesFilter<"User"> | string | null
    bio?: StringWithAggregatesFilter<"User"> | string
    facebook?: StringNullableWithAggregatesFilter<"User"> | string | null
    instagram?: StringNullableWithAggregatesFilter<"User"> | string | null
    twitter?: StringNullableWithAggregatesFilter<"User"> | string | null
    whatsapp?: StringNullableWithAggregatesFilter<"User"> | string | null
  }

  export type VerificationTokenWhereInput = {
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    token?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }

  export type VerificationTokenOrderByWithRelationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenWhereUniqueInput = Prisma.AtLeast<{
    token?: string
    identifier_token?: VerificationTokenIdentifierTokenCompoundUniqueInput
    AND?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    OR?: VerificationTokenWhereInput[]
    NOT?: VerificationTokenWhereInput | VerificationTokenWhereInput[]
    identifier?: StringFilter<"VerificationToken"> | string
    expires?: DateTimeFilter<"VerificationToken"> | Date | string
  }, "token" | "identifier_token">

  export type VerificationTokenOrderByWithAggregationInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
    _count?: VerificationTokenCountOrderByAggregateInput
    _max?: VerificationTokenMaxOrderByAggregateInput
    _min?: VerificationTokenMinOrderByAggregateInput
  }

  export type VerificationTokenScalarWhereWithAggregatesInput = {
    AND?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    OR?: VerificationTokenScalarWhereWithAggregatesInput[]
    NOT?: VerificationTokenScalarWhereWithAggregatesInput | VerificationTokenScalarWhereWithAggregatesInput[]
    identifier?: StringWithAggregatesFilter<"VerificationToken"> | string
    token?: StringWithAggregatesFilter<"VerificationToken"> | string
    expires?: DateTimeWithAggregatesFilter<"VerificationToken"> | Date | string
  }

  export type PostWhereInput = {
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    id?: StringFilter<"Post"> | string
    content?: StringNullableFilter<"Post"> | string | null
    userId?: StringFilter<"Post"> | string
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    isDeleted?: BoolFilter<"Post"> | boolean
    shareParentId?: StringNullableFilter<"Post"> | string | null
    communityId?: StringNullableFilter<"Post"> | string | null
    link?: StringNullableFilter<"Post"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    comments?: CommentListRelationFilter
    likes?: PostLikeListRelationFilter
    bookmarkedBy?: BookmarkListRelationFilter
    images?: ImageListRelationFilter
    tags?: PostTagListRelationFilter
    shareParent?: XOR<PostNullableRelationFilter, PostWhereInput> | null
    shares?: PostListRelationFilter
    community?: XOR<CommunityNullableRelationFilter, CommunityWhereInput> | null
    mentions?: MentionListRelationFilter
    sharedBy?: UserShareListRelationFilter
    NotificationMention?: NotificationMentionListRelationFilter
  }

  export type PostOrderByWithRelationInput = {
    id?: SortOrder
    content?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    shareParentId?: SortOrderInput | SortOrder
    communityId?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    comments?: CommentOrderByRelationAggregateInput
    likes?: PostLikeOrderByRelationAggregateInput
    bookmarkedBy?: BookmarkOrderByRelationAggregateInput
    images?: ImageOrderByRelationAggregateInput
    tags?: PostTagOrderByRelationAggregateInput
    shareParent?: PostOrderByWithRelationInput
    shares?: PostOrderByRelationAggregateInput
    community?: CommunityOrderByWithRelationInput
    mentions?: MentionOrderByRelationAggregateInput
    sharedBy?: UserShareOrderByRelationAggregateInput
    NotificationMention?: NotificationMentionOrderByRelationAggregateInput
  }

  export type PostWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: PostWhereInput | PostWhereInput[]
    OR?: PostWhereInput[]
    NOT?: PostWhereInput | PostWhereInput[]
    content?: StringNullableFilter<"Post"> | string | null
    userId?: StringFilter<"Post"> | string
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    isDeleted?: BoolFilter<"Post"> | boolean
    shareParentId?: StringNullableFilter<"Post"> | string | null
    communityId?: StringNullableFilter<"Post"> | string | null
    link?: StringNullableFilter<"Post"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    comments?: CommentListRelationFilter
    likes?: PostLikeListRelationFilter
    bookmarkedBy?: BookmarkListRelationFilter
    images?: ImageListRelationFilter
    tags?: PostTagListRelationFilter
    shareParent?: XOR<PostNullableRelationFilter, PostWhereInput> | null
    shares?: PostListRelationFilter
    community?: XOR<CommunityNullableRelationFilter, CommunityWhereInput> | null
    mentions?: MentionListRelationFilter
    sharedBy?: UserShareListRelationFilter
    NotificationMention?: NotificationMentionListRelationFilter
  }, "id">

  export type PostOrderByWithAggregationInput = {
    id?: SortOrder
    content?: SortOrderInput | SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    shareParentId?: SortOrderInput | SortOrder
    communityId?: SortOrderInput | SortOrder
    link?: SortOrderInput | SortOrder
    _count?: PostCountOrderByAggregateInput
    _max?: PostMaxOrderByAggregateInput
    _min?: PostMinOrderByAggregateInput
  }

  export type PostScalarWhereWithAggregatesInput = {
    AND?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    OR?: PostScalarWhereWithAggregatesInput[]
    NOT?: PostScalarWhereWithAggregatesInput | PostScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Post"> | string
    content?: StringNullableWithAggregatesFilter<"Post"> | string | null
    userId?: StringWithAggregatesFilter<"Post"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Post"> | Date | string
    isDeleted?: BoolWithAggregatesFilter<"Post"> | boolean
    shareParentId?: StringNullableWithAggregatesFilter<"Post"> | string | null
    communityId?: StringNullableWithAggregatesFilter<"Post"> | string | null
    link?: StringNullableWithAggregatesFilter<"Post"> | string | null
  }

  export type MentionWhereInput = {
    AND?: MentionWhereInput | MentionWhereInput[]
    OR?: MentionWhereInput[]
    NOT?: MentionWhereInput | MentionWhereInput[]
    userId?: StringFilter<"Mention"> | string
    postId?: StringFilter<"Mention"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
  }

  export type MentionOrderByWithRelationInput = {
    userId?: SortOrder
    postId?: SortOrder
    user?: UserOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
  }

  export type MentionWhereUniqueInput = Prisma.AtLeast<{
    userId_postId?: MentionUserIdPostIdCompoundUniqueInput
    AND?: MentionWhereInput | MentionWhereInput[]
    OR?: MentionWhereInput[]
    NOT?: MentionWhereInput | MentionWhereInput[]
    userId?: StringFilter<"Mention"> | string
    postId?: StringFilter<"Mention"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
  }, "userId_postId">

  export type MentionOrderByWithAggregationInput = {
    userId?: SortOrder
    postId?: SortOrder
    _count?: MentionCountOrderByAggregateInput
    _max?: MentionMaxOrderByAggregateInput
    _min?: MentionMinOrderByAggregateInput
  }

  export type MentionScalarWhereWithAggregatesInput = {
    AND?: MentionScalarWhereWithAggregatesInput | MentionScalarWhereWithAggregatesInput[]
    OR?: MentionScalarWhereWithAggregatesInput[]
    NOT?: MentionScalarWhereWithAggregatesInput | MentionScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"Mention"> | string
    postId?: StringWithAggregatesFilter<"Mention"> | string
  }

  export type NotificationWhereInput = {
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    id?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    isRead?: BoolFilter<"Notification"> | boolean
    userId?: StringFilter<"Notification"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    notificationMention?: XOR<NotificationMentionNullableRelationFilter, NotificationMentionWhereInput> | null
    notificationStartFollow?: XOR<NotificationStartFollowNullableRelationFilter, NotificationStartFollowWhereInput> | null
    notificationCommunityNewMember?: XOR<NotificationCommunityNewMemberNullableRelationFilter, NotificationCommunityNewMemberWhereInput> | null
    notificationPostComment?: XOR<NotificationPostCommentNullableRelationFilter, NotificationPostCommentWhereInput> | null
    notificationCommentReply?: XOR<NotificationCommentReplyNullableRelationFilter, NotificationCommentReplyWhereInput> | null
  }

  export type NotificationOrderByWithRelationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    user?: UserOrderByWithRelationInput
    notificationMention?: NotificationMentionOrderByWithRelationInput
    notificationStartFollow?: NotificationStartFollowOrderByWithRelationInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberOrderByWithRelationInput
    notificationPostComment?: NotificationPostCommentOrderByWithRelationInput
    notificationCommentReply?: NotificationCommentReplyOrderByWithRelationInput
  }

  export type NotificationWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: NotificationWhereInput | NotificationWhereInput[]
    OR?: NotificationWhereInput[]
    NOT?: NotificationWhereInput | NotificationWhereInput[]
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    isRead?: BoolFilter<"Notification"> | boolean
    userId?: StringFilter<"Notification"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    notificationMention?: XOR<NotificationMentionNullableRelationFilter, NotificationMentionWhereInput> | null
    notificationStartFollow?: XOR<NotificationStartFollowNullableRelationFilter, NotificationStartFollowWhereInput> | null
    notificationCommunityNewMember?: XOR<NotificationCommunityNewMemberNullableRelationFilter, NotificationCommunityNewMemberWhereInput> | null
    notificationPostComment?: XOR<NotificationPostCommentNullableRelationFilter, NotificationPostCommentWhereInput> | null
    notificationCommentReply?: XOR<NotificationCommentReplyNullableRelationFilter, NotificationCommentReplyWhereInput> | null
  }, "id">

  export type NotificationOrderByWithAggregationInput = {
    id?: SortOrder
    createdAt?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
    _count?: NotificationCountOrderByAggregateInput
    _max?: NotificationMaxOrderByAggregateInput
    _min?: NotificationMinOrderByAggregateInput
  }

  export type NotificationScalarWhereWithAggregatesInput = {
    AND?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    OR?: NotificationScalarWhereWithAggregatesInput[]
    NOT?: NotificationScalarWhereWithAggregatesInput | NotificationScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Notification"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Notification"> | Date | string
    isRead?: BoolWithAggregatesFilter<"Notification"> | boolean
    userId?: StringWithAggregatesFilter<"Notification"> | string
  }

  export type NotificationMentionWhereInput = {
    AND?: NotificationMentionWhereInput | NotificationMentionWhereInput[]
    OR?: NotificationMentionWhereInput[]
    NOT?: NotificationMentionWhereInput | NotificationMentionWhereInput[]
    id?: StringFilter<"NotificationMention"> | string
    notificationId?: StringFilter<"NotificationMention"> | string
    postId?: StringFilter<"NotificationMention"> | string
    notification?: XOR<NotificationRelationFilter, NotificationWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
  }

  export type NotificationMentionOrderByWithRelationInput = {
    id?: SortOrder
    notificationId?: SortOrder
    postId?: SortOrder
    notification?: NotificationOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
  }

  export type NotificationMentionWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    notificationId?: string
    AND?: NotificationMentionWhereInput | NotificationMentionWhereInput[]
    OR?: NotificationMentionWhereInput[]
    NOT?: NotificationMentionWhereInput | NotificationMentionWhereInput[]
    postId?: StringFilter<"NotificationMention"> | string
    notification?: XOR<NotificationRelationFilter, NotificationWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
  }, "id" | "notificationId">

  export type NotificationMentionOrderByWithAggregationInput = {
    id?: SortOrder
    notificationId?: SortOrder
    postId?: SortOrder
    _count?: NotificationMentionCountOrderByAggregateInput
    _max?: NotificationMentionMaxOrderByAggregateInput
    _min?: NotificationMentionMinOrderByAggregateInput
  }

  export type NotificationMentionScalarWhereWithAggregatesInput = {
    AND?: NotificationMentionScalarWhereWithAggregatesInput | NotificationMentionScalarWhereWithAggregatesInput[]
    OR?: NotificationMentionScalarWhereWithAggregatesInput[]
    NOT?: NotificationMentionScalarWhereWithAggregatesInput | NotificationMentionScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationMention"> | string
    notificationId?: StringWithAggregatesFilter<"NotificationMention"> | string
    postId?: StringWithAggregatesFilter<"NotificationMention"> | string
  }

  export type NotificationStartFollowWhereInput = {
    AND?: NotificationStartFollowWhereInput | NotificationStartFollowWhereInput[]
    OR?: NotificationStartFollowWhereInput[]
    NOT?: NotificationStartFollowWhereInput | NotificationStartFollowWhereInput[]
    id?: StringFilter<"NotificationStartFollow"> | string
    notificationId?: StringFilter<"NotificationStartFollow"> | string
    userIdNotificationStartFollow?: StringFilter<"NotificationStartFollow"> | string
    notification?: XOR<NotificationRelationFilter, NotificationWhereInput>
    userNotificationStartFollow?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationStartFollowOrderByWithRelationInput = {
    id?: SortOrder
    notificationId?: SortOrder
    userIdNotificationStartFollow?: SortOrder
    notification?: NotificationOrderByWithRelationInput
    userNotificationStartFollow?: UserOrderByWithRelationInput
  }

  export type NotificationStartFollowWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    notificationId?: string
    AND?: NotificationStartFollowWhereInput | NotificationStartFollowWhereInput[]
    OR?: NotificationStartFollowWhereInput[]
    NOT?: NotificationStartFollowWhereInput | NotificationStartFollowWhereInput[]
    userIdNotificationStartFollow?: StringFilter<"NotificationStartFollow"> | string
    notification?: XOR<NotificationRelationFilter, NotificationWhereInput>
    userNotificationStartFollow?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "notificationId">

  export type NotificationStartFollowOrderByWithAggregationInput = {
    id?: SortOrder
    notificationId?: SortOrder
    userIdNotificationStartFollow?: SortOrder
    _count?: NotificationStartFollowCountOrderByAggregateInput
    _max?: NotificationStartFollowMaxOrderByAggregateInput
    _min?: NotificationStartFollowMinOrderByAggregateInput
  }

  export type NotificationStartFollowScalarWhereWithAggregatesInput = {
    AND?: NotificationStartFollowScalarWhereWithAggregatesInput | NotificationStartFollowScalarWhereWithAggregatesInput[]
    OR?: NotificationStartFollowScalarWhereWithAggregatesInput[]
    NOT?: NotificationStartFollowScalarWhereWithAggregatesInput | NotificationStartFollowScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationStartFollow"> | string
    notificationId?: StringWithAggregatesFilter<"NotificationStartFollow"> | string
    userIdNotificationStartFollow?: StringWithAggregatesFilter<"NotificationStartFollow"> | string
  }

  export type NotificationCommunityNewMemberWhereInput = {
    AND?: NotificationCommunityNewMemberWhereInput | NotificationCommunityNewMemberWhereInput[]
    OR?: NotificationCommunityNewMemberWhereInput[]
    NOT?: NotificationCommunityNewMemberWhereInput | NotificationCommunityNewMemberWhereInput[]
    id?: StringFilter<"NotificationCommunityNewMember"> | string
    notificationId?: StringFilter<"NotificationCommunityNewMember"> | string
    communityId?: StringFilter<"NotificationCommunityNewMember"> | string
    userId?: StringFilter<"NotificationCommunityNewMember"> | string
    notification?: XOR<NotificationRelationFilter, NotificationWhereInput>
    community?: XOR<CommunityRelationFilter, CommunityWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type NotificationCommunityNewMemberOrderByWithRelationInput = {
    id?: SortOrder
    notificationId?: SortOrder
    communityId?: SortOrder
    userId?: SortOrder
    notification?: NotificationOrderByWithRelationInput
    community?: CommunityOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type NotificationCommunityNewMemberWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    notificationId?: string
    AND?: NotificationCommunityNewMemberWhereInput | NotificationCommunityNewMemberWhereInput[]
    OR?: NotificationCommunityNewMemberWhereInput[]
    NOT?: NotificationCommunityNewMemberWhereInput | NotificationCommunityNewMemberWhereInput[]
    communityId?: StringFilter<"NotificationCommunityNewMember"> | string
    userId?: StringFilter<"NotificationCommunityNewMember"> | string
    notification?: XOR<NotificationRelationFilter, NotificationWhereInput>
    community?: XOR<CommunityRelationFilter, CommunityWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "id" | "notificationId">

  export type NotificationCommunityNewMemberOrderByWithAggregationInput = {
    id?: SortOrder
    notificationId?: SortOrder
    communityId?: SortOrder
    userId?: SortOrder
    _count?: NotificationCommunityNewMemberCountOrderByAggregateInput
    _max?: NotificationCommunityNewMemberMaxOrderByAggregateInput
    _min?: NotificationCommunityNewMemberMinOrderByAggregateInput
  }

  export type NotificationCommunityNewMemberScalarWhereWithAggregatesInput = {
    AND?: NotificationCommunityNewMemberScalarWhereWithAggregatesInput | NotificationCommunityNewMemberScalarWhereWithAggregatesInput[]
    OR?: NotificationCommunityNewMemberScalarWhereWithAggregatesInput[]
    NOT?: NotificationCommunityNewMemberScalarWhereWithAggregatesInput | NotificationCommunityNewMemberScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationCommunityNewMember"> | string
    notificationId?: StringWithAggregatesFilter<"NotificationCommunityNewMember"> | string
    communityId?: StringWithAggregatesFilter<"NotificationCommunityNewMember"> | string
    userId?: StringWithAggregatesFilter<"NotificationCommunityNewMember"> | string
  }

  export type NotificationPostCommentWhereInput = {
    AND?: NotificationPostCommentWhereInput | NotificationPostCommentWhereInput[]
    OR?: NotificationPostCommentWhereInput[]
    NOT?: NotificationPostCommentWhereInput | NotificationPostCommentWhereInput[]
    id?: StringFilter<"NotificationPostComment"> | string
    notificationId?: StringFilter<"NotificationPostComment"> | string
    commentId?: StringFilter<"NotificationPostComment"> | string
    notification?: XOR<NotificationRelationFilter, NotificationWhereInput>
    comment?: XOR<CommentRelationFilter, CommentWhereInput>
  }

  export type NotificationPostCommentOrderByWithRelationInput = {
    id?: SortOrder
    notificationId?: SortOrder
    commentId?: SortOrder
    notification?: NotificationOrderByWithRelationInput
    comment?: CommentOrderByWithRelationInput
  }

  export type NotificationPostCommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    notificationId?: string
    AND?: NotificationPostCommentWhereInput | NotificationPostCommentWhereInput[]
    OR?: NotificationPostCommentWhereInput[]
    NOT?: NotificationPostCommentWhereInput | NotificationPostCommentWhereInput[]
    commentId?: StringFilter<"NotificationPostComment"> | string
    notification?: XOR<NotificationRelationFilter, NotificationWhereInput>
    comment?: XOR<CommentRelationFilter, CommentWhereInput>
  }, "id" | "notificationId">

  export type NotificationPostCommentOrderByWithAggregationInput = {
    id?: SortOrder
    notificationId?: SortOrder
    commentId?: SortOrder
    _count?: NotificationPostCommentCountOrderByAggregateInput
    _max?: NotificationPostCommentMaxOrderByAggregateInput
    _min?: NotificationPostCommentMinOrderByAggregateInput
  }

  export type NotificationPostCommentScalarWhereWithAggregatesInput = {
    AND?: NotificationPostCommentScalarWhereWithAggregatesInput | NotificationPostCommentScalarWhereWithAggregatesInput[]
    OR?: NotificationPostCommentScalarWhereWithAggregatesInput[]
    NOT?: NotificationPostCommentScalarWhereWithAggregatesInput | NotificationPostCommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationPostComment"> | string
    notificationId?: StringWithAggregatesFilter<"NotificationPostComment"> | string
    commentId?: StringWithAggregatesFilter<"NotificationPostComment"> | string
  }

  export type NotificationCommentReplyWhereInput = {
    AND?: NotificationCommentReplyWhereInput | NotificationCommentReplyWhereInput[]
    OR?: NotificationCommentReplyWhereInput[]
    NOT?: NotificationCommentReplyWhereInput | NotificationCommentReplyWhereInput[]
    id?: StringFilter<"NotificationCommentReply"> | string
    notificationId?: StringFilter<"NotificationCommentReply"> | string
    commentId?: StringFilter<"NotificationCommentReply"> | string
    notification?: XOR<NotificationRelationFilter, NotificationWhereInput>
    comment?: XOR<CommentRelationFilter, CommentWhereInput>
  }

  export type NotificationCommentReplyOrderByWithRelationInput = {
    id?: SortOrder
    notificationId?: SortOrder
    commentId?: SortOrder
    notification?: NotificationOrderByWithRelationInput
    comment?: CommentOrderByWithRelationInput
  }

  export type NotificationCommentReplyWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    notificationId?: string
    AND?: NotificationCommentReplyWhereInput | NotificationCommentReplyWhereInput[]
    OR?: NotificationCommentReplyWhereInput[]
    NOT?: NotificationCommentReplyWhereInput | NotificationCommentReplyWhereInput[]
    commentId?: StringFilter<"NotificationCommentReply"> | string
    notification?: XOR<NotificationRelationFilter, NotificationWhereInput>
    comment?: XOR<CommentRelationFilter, CommentWhereInput>
  }, "id" | "notificationId">

  export type NotificationCommentReplyOrderByWithAggregationInput = {
    id?: SortOrder
    notificationId?: SortOrder
    commentId?: SortOrder
    _count?: NotificationCommentReplyCountOrderByAggregateInput
    _max?: NotificationCommentReplyMaxOrderByAggregateInput
    _min?: NotificationCommentReplyMinOrderByAggregateInput
  }

  export type NotificationCommentReplyScalarWhereWithAggregatesInput = {
    AND?: NotificationCommentReplyScalarWhereWithAggregatesInput | NotificationCommentReplyScalarWhereWithAggregatesInput[]
    OR?: NotificationCommentReplyScalarWhereWithAggregatesInput[]
    NOT?: NotificationCommentReplyScalarWhereWithAggregatesInput | NotificationCommentReplyScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"NotificationCommentReply"> | string
    notificationId?: StringWithAggregatesFilter<"NotificationCommentReply"> | string
    commentId?: StringWithAggregatesFilter<"NotificationCommentReply"> | string
  }

  export type UserShareWhereInput = {
    AND?: UserShareWhereInput | UserShareWhereInput[]
    OR?: UserShareWhereInput[]
    NOT?: UserShareWhereInput | UserShareWhereInput[]
    userId?: StringFilter<"UserShare"> | string
    postId?: StringFilter<"UserShare"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
  }

  export type UserShareOrderByWithRelationInput = {
    userId?: SortOrder
    postId?: SortOrder
    user?: UserOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
  }

  export type UserShareWhereUniqueInput = Prisma.AtLeast<{
    userId_postId?: UserShareUserIdPostIdCompoundUniqueInput
    AND?: UserShareWhereInput | UserShareWhereInput[]
    OR?: UserShareWhereInput[]
    NOT?: UserShareWhereInput | UserShareWhereInput[]
    userId?: StringFilter<"UserShare"> | string
    postId?: StringFilter<"UserShare"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
  }, "userId_postId">

  export type UserShareOrderByWithAggregationInput = {
    userId?: SortOrder
    postId?: SortOrder
    _count?: UserShareCountOrderByAggregateInput
    _max?: UserShareMaxOrderByAggregateInput
    _min?: UserShareMinOrderByAggregateInput
  }

  export type UserShareScalarWhereWithAggregatesInput = {
    AND?: UserShareScalarWhereWithAggregatesInput | UserShareScalarWhereWithAggregatesInput[]
    OR?: UserShareScalarWhereWithAggregatesInput[]
    NOT?: UserShareScalarWhereWithAggregatesInput | UserShareScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"UserShare"> | string
    postId?: StringWithAggregatesFilter<"UserShare"> | string
  }

  export type ImageWhereInput = {
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    id?: StringFilter<"Image"> | string
    url?: StringFilter<"Image"> | string
    fallbackUrl?: StringFilter<"Image"> | string
    alt?: StringFilter<"Image"> | string
    postId?: StringFilter<"Image"> | string
    width?: IntFilter<"Image"> | number
    height?: IntFilter<"Image"> | number
    post?: XOR<PostRelationFilter, PostWhereInput>
  }

  export type ImageOrderByWithRelationInput = {
    id?: SortOrder
    url?: SortOrder
    fallbackUrl?: SortOrder
    alt?: SortOrder
    postId?: SortOrder
    width?: SortOrder
    height?: SortOrder
    post?: PostOrderByWithRelationInput
  }

  export type ImageWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: ImageWhereInput | ImageWhereInput[]
    OR?: ImageWhereInput[]
    NOT?: ImageWhereInput | ImageWhereInput[]
    url?: StringFilter<"Image"> | string
    fallbackUrl?: StringFilter<"Image"> | string
    alt?: StringFilter<"Image"> | string
    postId?: StringFilter<"Image"> | string
    width?: IntFilter<"Image"> | number
    height?: IntFilter<"Image"> | number
    post?: XOR<PostRelationFilter, PostWhereInput>
  }, "id">

  export type ImageOrderByWithAggregationInput = {
    id?: SortOrder
    url?: SortOrder
    fallbackUrl?: SortOrder
    alt?: SortOrder
    postId?: SortOrder
    width?: SortOrder
    height?: SortOrder
    _count?: ImageCountOrderByAggregateInput
    _avg?: ImageAvgOrderByAggregateInput
    _max?: ImageMaxOrderByAggregateInput
    _min?: ImageMinOrderByAggregateInput
    _sum?: ImageSumOrderByAggregateInput
  }

  export type ImageScalarWhereWithAggregatesInput = {
    AND?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    OR?: ImageScalarWhereWithAggregatesInput[]
    NOT?: ImageScalarWhereWithAggregatesInput | ImageScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Image"> | string
    url?: StringWithAggregatesFilter<"Image"> | string
    fallbackUrl?: StringWithAggregatesFilter<"Image"> | string
    alt?: StringWithAggregatesFilter<"Image"> | string
    postId?: StringWithAggregatesFilter<"Image"> | string
    width?: IntWithAggregatesFilter<"Image"> | number
    height?: IntWithAggregatesFilter<"Image"> | number
  }

  export type CommentWhereInput = {
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    id?: StringFilter<"Comment"> | string
    message?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    userId?: StringFilter<"Comment"> | string
    postId?: StringFilter<"Comment"> | string
    parentId?: StringNullableFilter<"Comment"> | string | null
    isDeleted?: BoolFilter<"Comment"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
    likes?: CommentLikeListRelationFilter
    parent?: XOR<CommentNullableRelationFilter, CommentWhereInput> | null
    children?: CommentListRelationFilter
    notificationPostComment?: NotificationPostCommentListRelationFilter
    notificationCommentReply?: NotificationCommentReplyListRelationFilter
  }

  export type CommentOrderByWithRelationInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    parentId?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    user?: UserOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
    likes?: CommentLikeOrderByRelationAggregateInput
    parent?: CommentOrderByWithRelationInput
    children?: CommentOrderByRelationAggregateInput
    notificationPostComment?: NotificationPostCommentOrderByRelationAggregateInput
    notificationCommentReply?: NotificationCommentReplyOrderByRelationAggregateInput
  }

  export type CommentWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    AND?: CommentWhereInput | CommentWhereInput[]
    OR?: CommentWhereInput[]
    NOT?: CommentWhereInput | CommentWhereInput[]
    message?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    userId?: StringFilter<"Comment"> | string
    postId?: StringFilter<"Comment"> | string
    parentId?: StringNullableFilter<"Comment"> | string | null
    isDeleted?: BoolFilter<"Comment"> | boolean
    user?: XOR<UserRelationFilter, UserWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
    likes?: CommentLikeListRelationFilter
    parent?: XOR<CommentNullableRelationFilter, CommentWhereInput> | null
    children?: CommentListRelationFilter
    notificationPostComment?: NotificationPostCommentListRelationFilter
    notificationCommentReply?: NotificationCommentReplyListRelationFilter
  }, "id">

  export type CommentOrderByWithAggregationInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    parentId?: SortOrderInput | SortOrder
    isDeleted?: SortOrder
    _count?: CommentCountOrderByAggregateInput
    _max?: CommentMaxOrderByAggregateInput
    _min?: CommentMinOrderByAggregateInput
  }

  export type CommentScalarWhereWithAggregatesInput = {
    AND?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    OR?: CommentScalarWhereWithAggregatesInput[]
    NOT?: CommentScalarWhereWithAggregatesInput | CommentScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Comment"> | string
    message?: StringWithAggregatesFilter<"Comment"> | string
    createdAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    updatedAt?: DateTimeWithAggregatesFilter<"Comment"> | Date | string
    userId?: StringWithAggregatesFilter<"Comment"> | string
    postId?: StringWithAggregatesFilter<"Comment"> | string
    parentId?: StringNullableWithAggregatesFilter<"Comment"> | string | null
    isDeleted?: BoolWithAggregatesFilter<"Comment"> | boolean
  }

  export type PostLikeWhereInput = {
    AND?: PostLikeWhereInput | PostLikeWhereInput[]
    OR?: PostLikeWhereInput[]
    NOT?: PostLikeWhereInput | PostLikeWhereInput[]
    userId?: StringFilter<"PostLike"> | string
    postId?: StringFilter<"PostLike"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
  }

  export type PostLikeOrderByWithRelationInput = {
    userId?: SortOrder
    postId?: SortOrder
    user?: UserOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
  }

  export type PostLikeWhereUniqueInput = Prisma.AtLeast<{
    userId_postId?: PostLikeUserIdPostIdCompoundUniqueInput
    AND?: PostLikeWhereInput | PostLikeWhereInput[]
    OR?: PostLikeWhereInput[]
    NOT?: PostLikeWhereInput | PostLikeWhereInput[]
    userId?: StringFilter<"PostLike"> | string
    postId?: StringFilter<"PostLike"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
  }, "userId_postId">

  export type PostLikeOrderByWithAggregationInput = {
    userId?: SortOrder
    postId?: SortOrder
    _count?: PostLikeCountOrderByAggregateInput
    _max?: PostLikeMaxOrderByAggregateInput
    _min?: PostLikeMinOrderByAggregateInput
  }

  export type PostLikeScalarWhereWithAggregatesInput = {
    AND?: PostLikeScalarWhereWithAggregatesInput | PostLikeScalarWhereWithAggregatesInput[]
    OR?: PostLikeScalarWhereWithAggregatesInput[]
    NOT?: PostLikeScalarWhereWithAggregatesInput | PostLikeScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"PostLike"> | string
    postId?: StringWithAggregatesFilter<"PostLike"> | string
  }

  export type CommentLikeWhereInput = {
    AND?: CommentLikeWhereInput | CommentLikeWhereInput[]
    OR?: CommentLikeWhereInput[]
    NOT?: CommentLikeWhereInput | CommentLikeWhereInput[]
    userId?: StringFilter<"CommentLike"> | string
    commentId?: StringFilter<"CommentLike"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    comment?: XOR<CommentRelationFilter, CommentWhereInput>
  }

  export type CommentLikeOrderByWithRelationInput = {
    userId?: SortOrder
    commentId?: SortOrder
    user?: UserOrderByWithRelationInput
    comment?: CommentOrderByWithRelationInput
  }

  export type CommentLikeWhereUniqueInput = Prisma.AtLeast<{
    userId_commentId?: CommentLikeUserIdCommentIdCompoundUniqueInput
    AND?: CommentLikeWhereInput | CommentLikeWhereInput[]
    OR?: CommentLikeWhereInput[]
    NOT?: CommentLikeWhereInput | CommentLikeWhereInput[]
    userId?: StringFilter<"CommentLike"> | string
    commentId?: StringFilter<"CommentLike"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    comment?: XOR<CommentRelationFilter, CommentWhereInput>
  }, "userId_commentId">

  export type CommentLikeOrderByWithAggregationInput = {
    userId?: SortOrder
    commentId?: SortOrder
    _count?: CommentLikeCountOrderByAggregateInput
    _max?: CommentLikeMaxOrderByAggregateInput
    _min?: CommentLikeMinOrderByAggregateInput
  }

  export type CommentLikeScalarWhereWithAggregatesInput = {
    AND?: CommentLikeScalarWhereWithAggregatesInput | CommentLikeScalarWhereWithAggregatesInput[]
    OR?: CommentLikeScalarWhereWithAggregatesInput[]
    NOT?: CommentLikeScalarWhereWithAggregatesInput | CommentLikeScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"CommentLike"> | string
    commentId?: StringWithAggregatesFilter<"CommentLike"> | string
  }

  export type BookmarkWhereInput = {
    AND?: BookmarkWhereInput | BookmarkWhereInput[]
    OR?: BookmarkWhereInput[]
    NOT?: BookmarkWhereInput | BookmarkWhereInput[]
    userId?: StringFilter<"Bookmark"> | string
    postId?: StringFilter<"Bookmark"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
  }

  export type BookmarkOrderByWithRelationInput = {
    userId?: SortOrder
    postId?: SortOrder
    user?: UserOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
  }

  export type BookmarkWhereUniqueInput = Prisma.AtLeast<{
    userId_postId?: BookmarkUserIdPostIdCompoundUniqueInput
    AND?: BookmarkWhereInput | BookmarkWhereInput[]
    OR?: BookmarkWhereInput[]
    NOT?: BookmarkWhereInput | BookmarkWhereInput[]
    userId?: StringFilter<"Bookmark"> | string
    postId?: StringFilter<"Bookmark"> | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
  }, "userId_postId">

  export type BookmarkOrderByWithAggregationInput = {
    userId?: SortOrder
    postId?: SortOrder
    _count?: BookmarkCountOrderByAggregateInput
    _max?: BookmarkMaxOrderByAggregateInput
    _min?: BookmarkMinOrderByAggregateInput
  }

  export type BookmarkScalarWhereWithAggregatesInput = {
    AND?: BookmarkScalarWhereWithAggregatesInput | BookmarkScalarWhereWithAggregatesInput[]
    OR?: BookmarkScalarWhereWithAggregatesInput[]
    NOT?: BookmarkScalarWhereWithAggregatesInput | BookmarkScalarWhereWithAggregatesInput[]
    userId?: StringWithAggregatesFilter<"Bookmark"> | string
    postId?: StringWithAggregatesFilter<"Bookmark"> | string
  }

  export type TagWhereInput = {
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    name?: StringFilter<"Tag"> | string
    color?: StringFilter<"Tag"> | string
    posts?: PostTagListRelationFilter
  }

  export type TagOrderByWithRelationInput = {
    name?: SortOrder
    color?: SortOrder
    posts?: PostTagOrderByRelationAggregateInput
  }

  export type TagWhereUniqueInput = Prisma.AtLeast<{
    name?: string
    AND?: TagWhereInput | TagWhereInput[]
    OR?: TagWhereInput[]
    NOT?: TagWhereInput | TagWhereInput[]
    color?: StringFilter<"Tag"> | string
    posts?: PostTagListRelationFilter
  }, "name" | "name">

  export type TagOrderByWithAggregationInput = {
    name?: SortOrder
    color?: SortOrder
    _count?: TagCountOrderByAggregateInput
    _max?: TagMaxOrderByAggregateInput
    _min?: TagMinOrderByAggregateInput
  }

  export type TagScalarWhereWithAggregatesInput = {
    AND?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    OR?: TagScalarWhereWithAggregatesInput[]
    NOT?: TagScalarWhereWithAggregatesInput | TagScalarWhereWithAggregatesInput[]
    name?: StringWithAggregatesFilter<"Tag"> | string
    color?: StringWithAggregatesFilter<"Tag"> | string
  }

  export type PostTagWhereInput = {
    AND?: PostTagWhereInput | PostTagWhereInput[]
    OR?: PostTagWhereInput[]
    NOT?: PostTagWhereInput | PostTagWhereInput[]
    tagName?: StringFilter<"PostTag"> | string
    postId?: StringFilter<"PostTag"> | string
    tag?: XOR<TagRelationFilter, TagWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
  }

  export type PostTagOrderByWithRelationInput = {
    tagName?: SortOrder
    postId?: SortOrder
    tag?: TagOrderByWithRelationInput
    post?: PostOrderByWithRelationInput
  }

  export type PostTagWhereUniqueInput = Prisma.AtLeast<{
    postId_tagName?: PostTagPostIdTagNameCompoundUniqueInput
    AND?: PostTagWhereInput | PostTagWhereInput[]
    OR?: PostTagWhereInput[]
    NOT?: PostTagWhereInput | PostTagWhereInput[]
    tagName?: StringFilter<"PostTag"> | string
    postId?: StringFilter<"PostTag"> | string
    tag?: XOR<TagRelationFilter, TagWhereInput>
    post?: XOR<PostRelationFilter, PostWhereInput>
  }, "postId_tagName">

  export type PostTagOrderByWithAggregationInput = {
    tagName?: SortOrder
    postId?: SortOrder
    _count?: PostTagCountOrderByAggregateInput
    _max?: PostTagMaxOrderByAggregateInput
    _min?: PostTagMinOrderByAggregateInput
  }

  export type PostTagScalarWhereWithAggregatesInput = {
    AND?: PostTagScalarWhereWithAggregatesInput | PostTagScalarWhereWithAggregatesInput[]
    OR?: PostTagScalarWhereWithAggregatesInput[]
    NOT?: PostTagScalarWhereWithAggregatesInput | PostTagScalarWhereWithAggregatesInput[]
    tagName?: StringWithAggregatesFilter<"PostTag"> | string
    postId?: StringWithAggregatesFilter<"PostTag"> | string
  }

  export type CommunityWhereInput = {
    AND?: CommunityWhereInput | CommunityWhereInput[]
    OR?: CommunityWhereInput[]
    NOT?: CommunityWhereInput | CommunityWhereInput[]
    id?: StringFilter<"Community"> | string
    name?: StringFilter<"Community"> | string
    image?: StringFilter<"Community"> | string
    bannerImage?: StringFilter<"Community"> | string
    description?: StringFilter<"Community"> | string
    categoryId?: StringFilter<"Community"> | string
    posts?: PostListRelationFilter
    members?: UserCommunityListRelationFilter
    favouriteBy?: FavouriteCommunityListRelationFilter
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    notificationCommunityNewMember?: NotificationCommunityNewMemberListRelationFilter
  }

  export type CommunityOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    bannerImage?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    posts?: PostOrderByRelationAggregateInput
    members?: UserCommunityOrderByRelationAggregateInput
    favouriteBy?: FavouriteCommunityOrderByRelationAggregateInput
    category?: CategoryOrderByWithRelationInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberOrderByRelationAggregateInput
  }

  export type CommunityWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: CommunityWhereInput | CommunityWhereInput[]
    OR?: CommunityWhereInput[]
    NOT?: CommunityWhereInput | CommunityWhereInput[]
    image?: StringFilter<"Community"> | string
    bannerImage?: StringFilter<"Community"> | string
    description?: StringFilter<"Community"> | string
    categoryId?: StringFilter<"Community"> | string
    posts?: PostListRelationFilter
    members?: UserCommunityListRelationFilter
    favouriteBy?: FavouriteCommunityListRelationFilter
    category?: XOR<CategoryRelationFilter, CategoryWhereInput>
    notificationCommunityNewMember?: NotificationCommunityNewMemberListRelationFilter
  }, "id" | "name">

  export type CommunityOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    bannerImage?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
    _count?: CommunityCountOrderByAggregateInput
    _max?: CommunityMaxOrderByAggregateInput
    _min?: CommunityMinOrderByAggregateInput
  }

  export type CommunityScalarWhereWithAggregatesInput = {
    AND?: CommunityScalarWhereWithAggregatesInput | CommunityScalarWhereWithAggregatesInput[]
    OR?: CommunityScalarWhereWithAggregatesInput[]
    NOT?: CommunityScalarWhereWithAggregatesInput | CommunityScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Community"> | string
    name?: StringWithAggregatesFilter<"Community"> | string
    image?: StringWithAggregatesFilter<"Community"> | string
    bannerImage?: StringWithAggregatesFilter<"Community"> | string
    description?: StringWithAggregatesFilter<"Community"> | string
    categoryId?: StringWithAggregatesFilter<"Community"> | string
  }

  export type FavouriteCommunityWhereInput = {
    AND?: FavouriteCommunityWhereInput | FavouriteCommunityWhereInput[]
    OR?: FavouriteCommunityWhereInput[]
    NOT?: FavouriteCommunityWhereInput | FavouriteCommunityWhereInput[]
    communityId?: StringFilter<"FavouriteCommunity"> | string
    userId?: StringFilter<"FavouriteCommunity"> | string
    community?: XOR<CommunityRelationFilter, CommunityWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type FavouriteCommunityOrderByWithRelationInput = {
    communityId?: SortOrder
    userId?: SortOrder
    community?: CommunityOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type FavouriteCommunityWhereUniqueInput = Prisma.AtLeast<{
    userId_communityId?: FavouriteCommunityUserIdCommunityIdCompoundUniqueInput
    AND?: FavouriteCommunityWhereInput | FavouriteCommunityWhereInput[]
    OR?: FavouriteCommunityWhereInput[]
    NOT?: FavouriteCommunityWhereInput | FavouriteCommunityWhereInput[]
    communityId?: StringFilter<"FavouriteCommunity"> | string
    userId?: StringFilter<"FavouriteCommunity"> | string
    community?: XOR<CommunityRelationFilter, CommunityWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "userId_communityId">

  export type FavouriteCommunityOrderByWithAggregationInput = {
    communityId?: SortOrder
    userId?: SortOrder
    _count?: FavouriteCommunityCountOrderByAggregateInput
    _max?: FavouriteCommunityMaxOrderByAggregateInput
    _min?: FavouriteCommunityMinOrderByAggregateInput
  }

  export type FavouriteCommunityScalarWhereWithAggregatesInput = {
    AND?: FavouriteCommunityScalarWhereWithAggregatesInput | FavouriteCommunityScalarWhereWithAggregatesInput[]
    OR?: FavouriteCommunityScalarWhereWithAggregatesInput[]
    NOT?: FavouriteCommunityScalarWhereWithAggregatesInput | FavouriteCommunityScalarWhereWithAggregatesInput[]
    communityId?: StringWithAggregatesFilter<"FavouriteCommunity"> | string
    userId?: StringWithAggregatesFilter<"FavouriteCommunity"> | string
  }

  export type CategoryWhereInput = {
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    id?: StringFilter<"Category"> | string
    name?: StringFilter<"Category"> | string
    comunities?: CommunityListRelationFilter
  }

  export type CategoryOrderByWithRelationInput = {
    id?: SortOrder
    name?: SortOrder
    comunities?: CommunityOrderByRelationAggregateInput
  }

  export type CategoryWhereUniqueInput = Prisma.AtLeast<{
    id?: string
    name?: string
    AND?: CategoryWhereInput | CategoryWhereInput[]
    OR?: CategoryWhereInput[]
    NOT?: CategoryWhereInput | CategoryWhereInput[]
    comunities?: CommunityListRelationFilter
  }, "id" | "name">

  export type CategoryOrderByWithAggregationInput = {
    id?: SortOrder
    name?: SortOrder
    _count?: CategoryCountOrderByAggregateInput
    _max?: CategoryMaxOrderByAggregateInput
    _min?: CategoryMinOrderByAggregateInput
  }

  export type CategoryScalarWhereWithAggregatesInput = {
    AND?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    OR?: CategoryScalarWhereWithAggregatesInput[]
    NOT?: CategoryScalarWhereWithAggregatesInput | CategoryScalarWhereWithAggregatesInput[]
    id?: StringWithAggregatesFilter<"Category"> | string
    name?: StringWithAggregatesFilter<"Category"> | string
  }

  export type UserCommunityWhereInput = {
    AND?: UserCommunityWhereInput | UserCommunityWhereInput[]
    OR?: UserCommunityWhereInput[]
    NOT?: UserCommunityWhereInput | UserCommunityWhereInput[]
    communityId?: StringFilter<"UserCommunity"> | string
    userId?: StringFilter<"UserCommunity"> | string
    role?: EnumRoleFilter<"UserCommunity"> | $Enums.Role
    community?: XOR<CommunityRelationFilter, CommunityWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }

  export type UserCommunityOrderByWithRelationInput = {
    communityId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    community?: CommunityOrderByWithRelationInput
    user?: UserOrderByWithRelationInput
  }

  export type UserCommunityWhereUniqueInput = Prisma.AtLeast<{
    userId_communityId?: UserCommunityUserIdCommunityIdCompoundUniqueInput
    AND?: UserCommunityWhereInput | UserCommunityWhereInput[]
    OR?: UserCommunityWhereInput[]
    NOT?: UserCommunityWhereInput | UserCommunityWhereInput[]
    communityId?: StringFilter<"UserCommunity"> | string
    userId?: StringFilter<"UserCommunity"> | string
    role?: EnumRoleFilter<"UserCommunity"> | $Enums.Role
    community?: XOR<CommunityRelationFilter, CommunityWhereInput>
    user?: XOR<UserRelationFilter, UserWhereInput>
  }, "userId_communityId">

  export type UserCommunityOrderByWithAggregationInput = {
    communityId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
    _count?: UserCommunityCountOrderByAggregateInput
    _max?: UserCommunityMaxOrderByAggregateInput
    _min?: UserCommunityMinOrderByAggregateInput
  }

  export type UserCommunityScalarWhereWithAggregatesInput = {
    AND?: UserCommunityScalarWhereWithAggregatesInput | UserCommunityScalarWhereWithAggregatesInput[]
    OR?: UserCommunityScalarWhereWithAggregatesInput[]
    NOT?: UserCommunityScalarWhereWithAggregatesInput | UserCommunityScalarWhereWithAggregatesInput[]
    communityId?: StringWithAggregatesFilter<"UserCommunity"> | string
    userId?: StringWithAggregatesFilter<"UserCommunity"> | string
    role?: EnumRoleWithAggregatesFilter<"UserCommunity"> | $Enums.Role
  }

  export type ExampleCreateInput = {
    id?: string
  }

  export type ExampleUncheckedCreateInput = {
    id?: string
  }

  export type ExampleUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ExampleUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ExampleCreateManyInput = {
    id?: string
  }

  export type ExampleUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type ExampleUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type AccountCreateInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    refresh_token_expires_in?: number | null
    user: UserCreateNestedOneWithoutAccountsInput
  }

  export type AccountUncheckedCreateInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    refresh_token_expires_in?: number | null
  }

  export type AccountUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token_expires_in?: NullableIntFieldUpdateOperationsInput | number | null
    user?: UserUpdateOneRequiredWithoutAccountsNestedInput
  }

  export type AccountUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token_expires_in?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AccountCreateManyInput = {
    id?: string
    userId: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    refresh_token_expires_in?: number | null
  }

  export type AccountUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token_expires_in?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AccountUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token_expires_in?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SessionCreateInput = {
    id?: string
    sessionToken: string
    expires: Date | string
    user: UserCreateNestedOneWithoutSessionsInput
  }

  export type SessionUncheckedCreateInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutSessionsNestedInput
  }

  export type SessionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionCreateManyInput = {
    id?: string
    sessionToken: string
    userId: string
    expires: Date | string
  }

  export type SessionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    followedBy?: UserCreateNestedManyWithoutFollowingInput
    following?: UserCreateNestedManyWithoutFollowedByInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    communities?: UserCommunityCreateNestedManyWithoutUserInput
    mentions?: MentionCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityCreateNestedManyWithoutUserInput
    sharedPost?: UserShareCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    followedBy?: UserUncheckedCreateNestedManyWithoutFollowingInput
    following?: UserUncheckedCreateNestedManyWithoutFollowedByInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    communities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    mentions?: MentionUncheckedCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityUncheckedCreateNestedManyWithoutUserInput
    sharedPost?: UserShareUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    followedBy?: UserUpdateManyWithoutFollowingNestedInput
    following?: UserUpdateManyWithoutFollowedByNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUpdateManyWithoutUserNestedInput
    mentions?: MentionUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    following?: UserUncheckedUpdateManyWithoutFollowedByNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUncheckedUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
  }

  export type UserUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type VerificationTokenCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUncheckedCreateInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenCreateManyInput = {
    identifier: string
    token: string
    expires: Date | string
  }

  export type VerificationTokenUpdateManyMutationInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type VerificationTokenUncheckedUpdateManyInput = {
    identifier?: StringFieldUpdateOperationsInput | string
    token?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type PostCreateInput = {
    id?: string
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    link?: string | null
    user: UserCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkCreateNestedManyWithoutPostInput
    images?: ImageCreateNestedManyWithoutPostInput
    tags?: PostTagCreateNestedManyWithoutPostInput
    shareParent?: PostCreateNestedOneWithoutSharesInput
    shares?: PostCreateNestedManyWithoutShareParentInput
    community?: CommunityCreateNestedOneWithoutPostsInput
    mentions?: MentionCreateNestedManyWithoutPostInput
    sharedBy?: UserShareCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateInput = {
    id?: string
    content?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    shareParentId?: string | null
    communityId?: string | null
    link?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkUncheckedCreateNestedManyWithoutPostInput
    images?: ImageUncheckedCreateNestedManyWithoutPostInput
    tags?: PostTagUncheckedCreateNestedManyWithoutPostInput
    shares?: PostUncheckedCreateNestedManyWithoutShareParentInput
    mentions?: MentionUncheckedCreateNestedManyWithoutPostInput
    sharedBy?: UserShareUncheckedCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUpdateManyWithoutPostNestedInput
    images?: ImageUpdateManyWithoutPostNestedInput
    tags?: PostTagUpdateManyWithoutPostNestedInput
    shareParent?: PostUpdateOneWithoutSharesNestedInput
    shares?: PostUpdateManyWithoutShareParentNestedInput
    community?: CommunityUpdateOneWithoutPostsNestedInput
    mentions?: MentionUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    shareParentId?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUncheckedUpdateManyWithoutPostNestedInput
    images?: ImageUncheckedUpdateManyWithoutPostNestedInput
    tags?: PostTagUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostUncheckedUpdateManyWithoutShareParentNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUncheckedUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateManyInput = {
    id?: string
    content?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    shareParentId?: string | null
    communityId?: string | null
    link?: string | null
  }

  export type PostUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    shareParentId?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MentionCreateInput = {
    user: UserCreateNestedOneWithoutMentionsInput
    post: PostCreateNestedOneWithoutMentionsInput
  }

  export type MentionUncheckedCreateInput = {
    userId: string
    postId: string
  }

  export type MentionUpdateInput = {
    user?: UserUpdateOneRequiredWithoutMentionsNestedInput
    post?: PostUpdateOneRequiredWithoutMentionsNestedInput
  }

  export type MentionUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type MentionCreateManyInput = {
    userId: string
    postId: string
  }

  export type MentionUpdateManyMutationInput = {

  }

  export type MentionUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCreateInput = {
    id?: string
    createdAt?: Date | string
    isRead?: boolean
    user: UserCreateNestedOneWithoutNotificationsInput
    notificationMention?: NotificationMentionCreateNestedOneWithoutNotificationInput
    notificationStartFollow?: NotificationStartFollowCreateNestedOneWithoutNotificationInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedOneWithoutNotificationInput
    notificationPostComment?: NotificationPostCommentCreateNestedOneWithoutNotificationInput
    notificationCommentReply?: NotificationCommentReplyCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateInput = {
    id?: string
    createdAt?: Date | string
    isRead?: boolean
    userId: string
    notificationMention?: NotificationMentionUncheckedCreateNestedOneWithoutNotificationInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedOneWithoutNotificationInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedOneWithoutNotificationInput
    notificationPostComment?: NotificationPostCommentUncheckedCreateNestedOneWithoutNotificationInput
    notificationCommentReply?: NotificationCommentReplyUncheckedCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    notificationMention?: NotificationMentionUpdateOneWithoutNotificationNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateOneWithoutNotificationNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateOneWithoutNotificationNestedInput
    notificationPostComment?: NotificationPostCommentUpdateOneWithoutNotificationNestedInput
    notificationCommentReply?: NotificationCommentReplyUpdateOneWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    notificationMention?: NotificationMentionUncheckedUpdateOneWithoutNotificationNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateOneWithoutNotificationNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateOneWithoutNotificationNestedInput
    notificationPostComment?: NotificationPostCommentUncheckedUpdateOneWithoutNotificationNestedInput
    notificationCommentReply?: NotificationCommentReplyUncheckedUpdateOneWithoutNotificationNestedInput
  }

  export type NotificationCreateManyInput = {
    id?: string
    createdAt?: Date | string
    isRead?: boolean
    userId: string
  }

  export type NotificationUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationMentionCreateInput = {
    id?: string
    notification: NotificationCreateNestedOneWithoutNotificationMentionInput
    post: PostCreateNestedOneWithoutNotificationMentionInput
  }

  export type NotificationMentionUncheckedCreateInput = {
    id?: string
    notificationId: string
    postId: string
  }

  export type NotificationMentionUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    notification?: NotificationUpdateOneRequiredWithoutNotificationMentionNestedInput
    post?: PostUpdateOneRequiredWithoutNotificationMentionNestedInput
  }

  export type NotificationMentionUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationMentionCreateManyInput = {
    id?: string
    notificationId: string
    postId: string
  }

  export type NotificationMentionUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationMentionUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationStartFollowCreateInput = {
    id?: string
    notification: NotificationCreateNestedOneWithoutNotificationStartFollowInput
    userNotificationStartFollow: UserCreateNestedOneWithoutNotificationStartFollowInput
  }

  export type NotificationStartFollowUncheckedCreateInput = {
    id?: string
    notificationId: string
    userIdNotificationStartFollow: string
  }

  export type NotificationStartFollowUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    notification?: NotificationUpdateOneRequiredWithoutNotificationStartFollowNestedInput
    userNotificationStartFollow?: UserUpdateOneRequiredWithoutNotificationStartFollowNestedInput
  }

  export type NotificationStartFollowUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    userIdNotificationStartFollow?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationStartFollowCreateManyInput = {
    id?: string
    notificationId: string
    userIdNotificationStartFollow: string
  }

  export type NotificationStartFollowUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationStartFollowUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    userIdNotificationStartFollow?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCommunityNewMemberCreateInput = {
    id?: string
    notification: NotificationCreateNestedOneWithoutNotificationCommunityNewMemberInput
    community: CommunityCreateNestedOneWithoutNotificationCommunityNewMemberInput
    user: UserCreateNestedOneWithoutNotificationCommunityNewMemberInput
  }

  export type NotificationCommunityNewMemberUncheckedCreateInput = {
    id?: string
    notificationId: string
    communityId: string
    userId: string
  }

  export type NotificationCommunityNewMemberUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    notification?: NotificationUpdateOneRequiredWithoutNotificationCommunityNewMemberNestedInput
    community?: CommunityUpdateOneRequiredWithoutNotificationCommunityNewMemberNestedInput
    user?: UserUpdateOneRequiredWithoutNotificationCommunityNewMemberNestedInput
  }

  export type NotificationCommunityNewMemberUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCommunityNewMemberCreateManyInput = {
    id?: string
    notificationId: string
    communityId: string
    userId: string
  }

  export type NotificationCommunityNewMemberUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCommunityNewMemberUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationPostCommentCreateInput = {
    id?: string
    notification: NotificationCreateNestedOneWithoutNotificationPostCommentInput
    comment: CommentCreateNestedOneWithoutNotificationPostCommentInput
  }

  export type NotificationPostCommentUncheckedCreateInput = {
    id?: string
    notificationId: string
    commentId: string
  }

  export type NotificationPostCommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    notification?: NotificationUpdateOneRequiredWithoutNotificationPostCommentNestedInput
    comment?: CommentUpdateOneRequiredWithoutNotificationPostCommentNestedInput
  }

  export type NotificationPostCommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationPostCommentCreateManyInput = {
    id?: string
    notificationId: string
    commentId: string
  }

  export type NotificationPostCommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationPostCommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCommentReplyCreateInput = {
    id?: string
    notification: NotificationCreateNestedOneWithoutNotificationCommentReplyInput
    comment: CommentCreateNestedOneWithoutNotificationCommentReplyInput
  }

  export type NotificationCommentReplyUncheckedCreateInput = {
    id?: string
    notificationId: string
    commentId: string
  }

  export type NotificationCommentReplyUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    notification?: NotificationUpdateOneRequiredWithoutNotificationCommentReplyNestedInput
    comment?: CommentUpdateOneRequiredWithoutNotificationCommentReplyNestedInput
  }

  export type NotificationCommentReplyUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCommentReplyCreateManyInput = {
    id?: string
    notificationId: string
    commentId: string
  }

  export type NotificationCommentReplyUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCommentReplyUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type UserShareCreateInput = {
    user: UserCreateNestedOneWithoutSharedPostInput
    post: PostCreateNestedOneWithoutSharedByInput
  }

  export type UserShareUncheckedCreateInput = {
    userId: string
    postId: string
  }

  export type UserShareUpdateInput = {
    user?: UserUpdateOneRequiredWithoutSharedPostNestedInput
    post?: PostUpdateOneRequiredWithoutSharedByNestedInput
  }

  export type UserShareUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type UserShareCreateManyInput = {
    userId: string
    postId: string
  }

  export type UserShareUpdateManyMutationInput = {

  }

  export type UserShareUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type ImageCreateInput = {
    id?: string
    url: string
    fallbackUrl: string
    alt: string
    width: number
    height: number
    post: PostCreateNestedOneWithoutImagesInput
  }

  export type ImageUncheckedCreateInput = {
    id?: string
    url: string
    fallbackUrl: string
    alt: string
    postId: string
    width: number
    height: number
  }

  export type ImageUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fallbackUrl?: StringFieldUpdateOperationsInput | string
    alt?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
    post?: PostUpdateOneRequiredWithoutImagesNestedInput
  }

  export type ImageUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fallbackUrl?: StringFieldUpdateOperationsInput | string
    alt?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
  }

  export type ImageCreateManyInput = {
    id?: string
    url: string
    fallbackUrl: string
    alt: string
    postId: string
    width: number
    height: number
  }

  export type ImageUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fallbackUrl?: StringFieldUpdateOperationsInput | string
    alt?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
  }

  export type ImageUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fallbackUrl?: StringFieldUpdateOperationsInput | string
    alt?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
  }

  export type CommentCreateInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutCommentsInput
    post: PostCreateNestedOneWithoutCommentsInput
    likes?: CommentLikeCreateNestedManyWithoutCommentInput
    parent?: CommentCreateNestedOneWithoutChildrenInput
    children?: CommentCreateNestedManyWithoutParentInput
    notificationPostComment?: NotificationPostCommentCreateNestedManyWithoutCommentInput
    notificationCommentReply?: NotificationCommentReplyCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    postId: string
    parentId?: string | null
    isDeleted?: boolean
    likes?: CommentLikeUncheckedCreateNestedManyWithoutCommentInput
    children?: CommentUncheckedCreateNestedManyWithoutParentInput
    notificationPostComment?: NotificationPostCommentUncheckedCreateNestedManyWithoutCommentInput
    notificationCommentReply?: NotificationCommentReplyUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    likes?: CommentLikeUpdateManyWithoutCommentNestedInput
    parent?: CommentUpdateOneWithoutChildrenNestedInput
    children?: CommentUpdateManyWithoutParentNestedInput
    notificationPostComment?: NotificationPostCommentUpdateManyWithoutCommentNestedInput
    notificationCommentReply?: NotificationCommentReplyUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    likes?: CommentLikeUncheckedUpdateManyWithoutCommentNestedInput
    children?: CommentUncheckedUpdateManyWithoutParentNestedInput
    notificationPostComment?: NotificationPostCommentUncheckedUpdateManyWithoutCommentNestedInput
    notificationCommentReply?: NotificationCommentReplyUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentCreateManyInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    postId: string
    parentId?: string | null
    isDeleted?: boolean
  }

  export type CommentUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type CommentUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PostLikeCreateInput = {
    user: UserCreateNestedOneWithoutLikedPostsInput
    post: PostCreateNestedOneWithoutLikesInput
  }

  export type PostLikeUncheckedCreateInput = {
    userId: string
    postId: string
  }

  export type PostLikeUpdateInput = {
    user?: UserUpdateOneRequiredWithoutLikedPostsNestedInput
    post?: PostUpdateOneRequiredWithoutLikesNestedInput
  }

  export type PostLikeUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostLikeCreateManyInput = {
    userId: string
    postId: string
  }

  export type PostLikeUpdateManyMutationInput = {

  }

  export type PostLikeUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentLikeCreateInput = {
    user: UserCreateNestedOneWithoutLikedCommentsInput
    comment: CommentCreateNestedOneWithoutLikesInput
  }

  export type CommentLikeUncheckedCreateInput = {
    userId: string
    commentId: string
  }

  export type CommentLikeUpdateInput = {
    user?: UserUpdateOneRequiredWithoutLikedCommentsNestedInput
    comment?: CommentUpdateOneRequiredWithoutLikesNestedInput
  }

  export type CommentLikeUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentLikeCreateManyInput = {
    userId: string
    commentId: string
  }

  export type CommentLikeUpdateManyMutationInput = {

  }

  export type CommentLikeUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type BookmarkCreateInput = {
    user: UserCreateNestedOneWithoutBookmarksInput
    post: PostCreateNestedOneWithoutBookmarkedByInput
  }

  export type BookmarkUncheckedCreateInput = {
    userId: string
    postId: string
  }

  export type BookmarkUpdateInput = {
    user?: UserUpdateOneRequiredWithoutBookmarksNestedInput
    post?: PostUpdateOneRequiredWithoutBookmarkedByNestedInput
  }

  export type BookmarkUncheckedUpdateInput = {
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type BookmarkCreateManyInput = {
    userId: string
    postId: string
  }

  export type BookmarkUpdateManyMutationInput = {

  }

  export type BookmarkUncheckedUpdateManyInput = {
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type TagCreateInput = {
    name: string
    color: string
    posts?: PostTagCreateNestedManyWithoutTagInput
  }

  export type TagUncheckedCreateInput = {
    name: string
    color: string
    posts?: PostTagUncheckedCreateNestedManyWithoutTagInput
  }

  export type TagUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    posts?: PostTagUpdateManyWithoutTagNestedInput
  }

  export type TagUncheckedUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
    posts?: PostTagUncheckedUpdateManyWithoutTagNestedInput
  }

  export type TagCreateManyInput = {
    name: string
    color: string
  }

  export type TagUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateManyInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type PostTagCreateInput = {
    tag: TagCreateNestedOneWithoutPostsInput
    post: PostCreateNestedOneWithoutTagsInput
  }

  export type PostTagUncheckedCreateInput = {
    tagName: string
    postId: string
  }

  export type PostTagUpdateInput = {
    tag?: TagUpdateOneRequiredWithoutPostsNestedInput
    post?: PostUpdateOneRequiredWithoutTagsNestedInput
  }

  export type PostTagUncheckedUpdateInput = {
    tagName?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostTagCreateManyInput = {
    tagName: string
    postId: string
  }

  export type PostTagUpdateManyMutationInput = {

  }

  export type PostTagUncheckedUpdateManyInput = {
    tagName?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type CommunityCreateInput = {
    id?: string
    name: string
    image?: string
    bannerImage?: string
    description?: string
    posts?: PostCreateNestedManyWithoutCommunityInput
    members?: UserCommunityCreateNestedManyWithoutCommunityInput
    favouriteBy?: FavouriteCommunityCreateNestedManyWithoutCommunityInput
    category: CategoryCreateNestedOneWithoutComunitiesInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUncheckedCreateInput = {
    id?: string
    name: string
    image?: string
    bannerImage?: string
    description?: string
    categoryId: string
    posts?: PostUncheckedCreateNestedManyWithoutCommunityInput
    members?: UserCommunityUncheckedCreateNestedManyWithoutCommunityInput
    favouriteBy?: FavouriteCommunityUncheckedCreateNestedManyWithoutCommunityInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    bannerImage?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    posts?: PostUpdateManyWithoutCommunityNestedInput
    members?: UserCommunityUpdateManyWithoutCommunityNestedInput
    favouriteBy?: FavouriteCommunityUpdateManyWithoutCommunityNestedInput
    category?: CategoryUpdateOneRequiredWithoutComunitiesNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    bannerImage?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    posts?: PostUncheckedUpdateManyWithoutCommunityNestedInput
    members?: UserCommunityUncheckedUpdateManyWithoutCommunityNestedInput
    favouriteBy?: FavouriteCommunityUncheckedUpdateManyWithoutCommunityNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityCreateManyInput = {
    id?: string
    name: string
    image?: string
    bannerImage?: string
    description?: string
    categoryId: string
  }

  export type CommunityUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    bannerImage?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }

  export type CommunityUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    bannerImage?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
  }

  export type FavouriteCommunityCreateInput = {
    community: CommunityCreateNestedOneWithoutFavouriteByInput
    user: UserCreateNestedOneWithoutFavouriteCommunitiesInput
  }

  export type FavouriteCommunityUncheckedCreateInput = {
    communityId: string
    userId: string
  }

  export type FavouriteCommunityUpdateInput = {
    community?: CommunityUpdateOneRequiredWithoutFavouriteByNestedInput
    user?: UserUpdateOneRequiredWithoutFavouriteCommunitiesNestedInput
  }

  export type FavouriteCommunityUncheckedUpdateInput = {
    communityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type FavouriteCommunityCreateManyInput = {
    communityId: string
    userId: string
  }

  export type FavouriteCommunityUpdateManyMutationInput = {

  }

  export type FavouriteCommunityUncheckedUpdateManyInput = {
    communityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryCreateInput = {
    id?: string
    name: string
    comunities?: CommunityCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUncheckedCreateInput = {
    id?: string
    name: string
    comunities?: CommunityUncheckedCreateNestedManyWithoutCategoryInput
  }

  export type CategoryUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    comunities?: CommunityUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryUncheckedUpdateInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    comunities?: CommunityUncheckedUpdateManyWithoutCategoryNestedInput
  }

  export type CategoryCreateManyInput = {
    id?: string
    name: string
  }

  export type CategoryUpdateManyMutationInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateManyInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type UserCommunityCreateInput = {
    role?: $Enums.Role
    community: CommunityCreateNestedOneWithoutMembersInput
    user: UserCreateNestedOneWithoutCommunitiesInput
  }

  export type UserCommunityUncheckedCreateInput = {
    communityId: string
    userId: string
    role?: $Enums.Role
  }

  export type UserCommunityUpdateInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    community?: CommunityUpdateOneRequiredWithoutMembersNestedInput
    user?: UserUpdateOneRequiredWithoutCommunitiesNestedInput
  }

  export type UserCommunityUncheckedUpdateInput = {
    communityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type UserCommunityCreateManyInput = {
    communityId: string
    userId: string
    role?: $Enums.Role
  }

  export type UserCommunityUpdateManyMutationInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type UserCommunityUncheckedUpdateManyInput = {
    communityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type ExampleCountOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ExampleMaxOrderByAggregateInput = {
    id?: SortOrder
  }

  export type ExampleMinOrderByAggregateInput = {
    id?: SortOrder
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type AccountProviderProviderAccountIdCompoundUniqueInput = {
    provider: string
    providerAccountId: string
  }

  export type AccountCountOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    refresh_token_expires_in?: SortOrder
  }

  export type AccountAvgOrderByAggregateInput = {
    expires_at?: SortOrder
    refresh_token_expires_in?: SortOrder
  }

  export type AccountMaxOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    refresh_token_expires_in?: SortOrder
  }

  export type AccountMinOrderByAggregateInput = {
    id?: SortOrder
    userId?: SortOrder
    type?: SortOrder
    provider?: SortOrder
    providerAccountId?: SortOrder
    refresh_token?: SortOrder
    access_token?: SortOrder
    expires_at?: SortOrder
    token_type?: SortOrder
    scope?: SortOrder
    id_token?: SortOrder
    session_state?: SortOrder
    refresh_token_expires_in?: SortOrder
  }

  export type AccountSumOrderByAggregateInput = {
    expires_at?: SortOrder
    refresh_token_expires_in?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type SessionCountOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMaxOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type SessionMinOrderByAggregateInput = {
    id?: SortOrder
    sessionToken?: SortOrder
    userId?: SortOrder
    expires?: SortOrder
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type DateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type AccountListRelationFilter = {
    every?: AccountWhereInput
    some?: AccountWhereInput
    none?: AccountWhereInput
  }

  export type SessionListRelationFilter = {
    every?: SessionWhereInput
    some?: SessionWhereInput
    none?: SessionWhereInput
  }

  export type UserListRelationFilter = {
    every?: UserWhereInput
    some?: UserWhereInput
    none?: UserWhereInput
  }

  export type PostListRelationFilter = {
    every?: PostWhereInput
    some?: PostWhereInput
    none?: PostWhereInput
  }

  export type CommentListRelationFilter = {
    every?: CommentWhereInput
    some?: CommentWhereInput
    none?: CommentWhereInput
  }

  export type PostLikeListRelationFilter = {
    every?: PostLikeWhereInput
    some?: PostLikeWhereInput
    none?: PostLikeWhereInput
  }

  export type CommentLikeListRelationFilter = {
    every?: CommentLikeWhereInput
    some?: CommentLikeWhereInput
    none?: CommentLikeWhereInput
  }

  export type BookmarkListRelationFilter = {
    every?: BookmarkWhereInput
    some?: BookmarkWhereInput
    none?: BookmarkWhereInput
  }

  export type UserCommunityListRelationFilter = {
    every?: UserCommunityWhereInput
    some?: UserCommunityWhereInput
    none?: UserCommunityWhereInput
  }

  export type MentionListRelationFilter = {
    every?: MentionWhereInput
    some?: MentionWhereInput
    none?: MentionWhereInput
  }

  export type FavouriteCommunityListRelationFilter = {
    every?: FavouriteCommunityWhereInput
    some?: FavouriteCommunityWhereInput
    none?: FavouriteCommunityWhereInput
  }

  export type UserShareListRelationFilter = {
    every?: UserShareWhereInput
    some?: UserShareWhereInput
    none?: UserShareWhereInput
  }

  export type NotificationListRelationFilter = {
    every?: NotificationWhereInput
    some?: NotificationWhereInput
    none?: NotificationWhereInput
  }

  export type NotificationStartFollowListRelationFilter = {
    every?: NotificationStartFollowWhereInput
    some?: NotificationStartFollowWhereInput
    none?: NotificationStartFollowWhereInput
  }

  export type NotificationCommunityNewMemberListRelationFilter = {
    every?: NotificationCommunityNewMemberWhereInput
    some?: NotificationCommunityNewMemberWhereInput
    none?: NotificationCommunityNewMemberWhereInput
  }

  export type AccountOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SessionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentLikeOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type BookmarkOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCommunityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type MentionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FavouriteCommunityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserShareOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationStartFollowOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationCommunityNewMemberOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    bannerImage?: SortOrder
    bio?: SortOrder
    facebook?: SortOrder
    instagram?: SortOrder
    twitter?: SortOrder
    whatsapp?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    bannerImage?: SortOrder
    bio?: SortOrder
    facebook?: SortOrder
    instagram?: SortOrder
    twitter?: SortOrder
    whatsapp?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    email?: SortOrder
    emailVerified?: SortOrder
    image?: SortOrder
    bannerImage?: SortOrder
    bio?: SortOrder
    facebook?: SortOrder
    instagram?: SortOrder
    twitter?: SortOrder
    whatsapp?: SortOrder
  }

  export type DateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type VerificationTokenIdentifierTokenCompoundUniqueInput = {
    identifier: string
    token: string
  }

  export type VerificationTokenCountOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMaxOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type VerificationTokenMinOrderByAggregateInput = {
    identifier?: SortOrder
    token?: SortOrder
    expires?: SortOrder
  }

  export type BoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type ImageListRelationFilter = {
    every?: ImageWhereInput
    some?: ImageWhereInput
    none?: ImageWhereInput
  }

  export type PostTagListRelationFilter = {
    every?: PostTagWhereInput
    some?: PostTagWhereInput
    none?: PostTagWhereInput
  }

  export type PostNullableRelationFilter = {
    is?: PostWhereInput | null
    isNot?: PostWhereInput | null
  }

  export type CommunityNullableRelationFilter = {
    is?: CommunityWhereInput | null
    isNot?: CommunityWhereInput | null
  }

  export type NotificationMentionListRelationFilter = {
    every?: NotificationMentionWhereInput
    some?: NotificationMentionWhereInput
    none?: NotificationMentionWhereInput
  }

  export type ImageOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostTagOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationMentionOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type PostCountOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    shareParentId?: SortOrder
    communityId?: SortOrder
    link?: SortOrder
  }

  export type PostMaxOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    shareParentId?: SortOrder
    communityId?: SortOrder
    link?: SortOrder
  }

  export type PostMinOrderByAggregateInput = {
    id?: SortOrder
    content?: SortOrder
    userId?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    isDeleted?: SortOrder
    shareParentId?: SortOrder
    communityId?: SortOrder
    link?: SortOrder
  }

  export type BoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type PostRelationFilter = {
    is?: PostWhereInput
    isNot?: PostWhereInput
  }

  export type MentionUserIdPostIdCompoundUniqueInput = {
    userId: string
    postId: string
  }

  export type MentionCountOrderByAggregateInput = {
    userId?: SortOrder
    postId?: SortOrder
  }

  export type MentionMaxOrderByAggregateInput = {
    userId?: SortOrder
    postId?: SortOrder
  }

  export type MentionMinOrderByAggregateInput = {
    userId?: SortOrder
    postId?: SortOrder
  }

  export type NotificationMentionNullableRelationFilter = {
    is?: NotificationMentionWhereInput | null
    isNot?: NotificationMentionWhereInput | null
  }

  export type NotificationStartFollowNullableRelationFilter = {
    is?: NotificationStartFollowWhereInput | null
    isNot?: NotificationStartFollowWhereInput | null
  }

  export type NotificationCommunityNewMemberNullableRelationFilter = {
    is?: NotificationCommunityNewMemberWhereInput | null
    isNot?: NotificationCommunityNewMemberWhereInput | null
  }

  export type NotificationPostCommentNullableRelationFilter = {
    is?: NotificationPostCommentWhereInput | null
    isNot?: NotificationPostCommentWhereInput | null
  }

  export type NotificationCommentReplyNullableRelationFilter = {
    is?: NotificationCommentReplyWhereInput | null
    isNot?: NotificationCommentReplyWhereInput | null
  }

  export type NotificationCountOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
  }

  export type NotificationMaxOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
  }

  export type NotificationMinOrderByAggregateInput = {
    id?: SortOrder
    createdAt?: SortOrder
    isRead?: SortOrder
    userId?: SortOrder
  }

  export type NotificationRelationFilter = {
    is?: NotificationWhereInput
    isNot?: NotificationWhereInput
  }

  export type NotificationMentionCountOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    postId?: SortOrder
  }

  export type NotificationMentionMaxOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    postId?: SortOrder
  }

  export type NotificationMentionMinOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    postId?: SortOrder
  }

  export type NotificationStartFollowCountOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    userIdNotificationStartFollow?: SortOrder
  }

  export type NotificationStartFollowMaxOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    userIdNotificationStartFollow?: SortOrder
  }

  export type NotificationStartFollowMinOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    userIdNotificationStartFollow?: SortOrder
  }

  export type CommunityRelationFilter = {
    is?: CommunityWhereInput
    isNot?: CommunityWhereInput
  }

  export type NotificationCommunityNewMemberCountOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    communityId?: SortOrder
    userId?: SortOrder
  }

  export type NotificationCommunityNewMemberMaxOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    communityId?: SortOrder
    userId?: SortOrder
  }

  export type NotificationCommunityNewMemberMinOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    communityId?: SortOrder
    userId?: SortOrder
  }

  export type CommentRelationFilter = {
    is?: CommentWhereInput
    isNot?: CommentWhereInput
  }

  export type NotificationPostCommentCountOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    commentId?: SortOrder
  }

  export type NotificationPostCommentMaxOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    commentId?: SortOrder
  }

  export type NotificationPostCommentMinOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    commentId?: SortOrder
  }

  export type NotificationCommentReplyCountOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    commentId?: SortOrder
  }

  export type NotificationCommentReplyMaxOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    commentId?: SortOrder
  }

  export type NotificationCommentReplyMinOrderByAggregateInput = {
    id?: SortOrder
    notificationId?: SortOrder
    commentId?: SortOrder
  }

  export type UserShareUserIdPostIdCompoundUniqueInput = {
    userId: string
    postId: string
  }

  export type UserShareCountOrderByAggregateInput = {
    userId?: SortOrder
    postId?: SortOrder
  }

  export type UserShareMaxOrderByAggregateInput = {
    userId?: SortOrder
    postId?: SortOrder
  }

  export type UserShareMinOrderByAggregateInput = {
    userId?: SortOrder
    postId?: SortOrder
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type ImageCountOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    fallbackUrl?: SortOrder
    alt?: SortOrder
    postId?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type ImageAvgOrderByAggregateInput = {
    width?: SortOrder
    height?: SortOrder
  }

  export type ImageMaxOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    fallbackUrl?: SortOrder
    alt?: SortOrder
    postId?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type ImageMinOrderByAggregateInput = {
    id?: SortOrder
    url?: SortOrder
    fallbackUrl?: SortOrder
    alt?: SortOrder
    postId?: SortOrder
    width?: SortOrder
    height?: SortOrder
  }

  export type ImageSumOrderByAggregateInput = {
    width?: SortOrder
    height?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type CommentNullableRelationFilter = {
    is?: CommentWhereInput | null
    isNot?: CommentWhereInput | null
  }

  export type NotificationPostCommentListRelationFilter = {
    every?: NotificationPostCommentWhereInput
    some?: NotificationPostCommentWhereInput
    none?: NotificationPostCommentWhereInput
  }

  export type NotificationCommentReplyListRelationFilter = {
    every?: NotificationCommentReplyWhereInput
    some?: NotificationCommentReplyWhereInput
    none?: NotificationCommentReplyWhereInput
  }

  export type NotificationPostCommentOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type NotificationCommentReplyOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CommentCountOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    parentId?: SortOrder
    isDeleted?: SortOrder
  }

  export type CommentMaxOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    parentId?: SortOrder
    isDeleted?: SortOrder
  }

  export type CommentMinOrderByAggregateInput = {
    id?: SortOrder
    message?: SortOrder
    createdAt?: SortOrder
    updatedAt?: SortOrder
    userId?: SortOrder
    postId?: SortOrder
    parentId?: SortOrder
    isDeleted?: SortOrder
  }

  export type PostLikeUserIdPostIdCompoundUniqueInput = {
    userId: string
    postId: string
  }

  export type PostLikeCountOrderByAggregateInput = {
    userId?: SortOrder
    postId?: SortOrder
  }

  export type PostLikeMaxOrderByAggregateInput = {
    userId?: SortOrder
    postId?: SortOrder
  }

  export type PostLikeMinOrderByAggregateInput = {
    userId?: SortOrder
    postId?: SortOrder
  }

  export type CommentLikeUserIdCommentIdCompoundUniqueInput = {
    userId: string
    commentId: string
  }

  export type CommentLikeCountOrderByAggregateInput = {
    userId?: SortOrder
    commentId?: SortOrder
  }

  export type CommentLikeMaxOrderByAggregateInput = {
    userId?: SortOrder
    commentId?: SortOrder
  }

  export type CommentLikeMinOrderByAggregateInput = {
    userId?: SortOrder
    commentId?: SortOrder
  }

  export type BookmarkUserIdPostIdCompoundUniqueInput = {
    userId: string
    postId: string
  }

  export type BookmarkCountOrderByAggregateInput = {
    userId?: SortOrder
    postId?: SortOrder
  }

  export type BookmarkMaxOrderByAggregateInput = {
    userId?: SortOrder
    postId?: SortOrder
  }

  export type BookmarkMinOrderByAggregateInput = {
    userId?: SortOrder
    postId?: SortOrder
  }

  export type TagCountOrderByAggregateInput = {
    name?: SortOrder
    color?: SortOrder
  }

  export type TagMaxOrderByAggregateInput = {
    name?: SortOrder
    color?: SortOrder
  }

  export type TagMinOrderByAggregateInput = {
    name?: SortOrder
    color?: SortOrder
  }

  export type TagRelationFilter = {
    is?: TagWhereInput
    isNot?: TagWhereInput
  }

  export type PostTagPostIdTagNameCompoundUniqueInput = {
    postId: string
    tagName: string
  }

  export type PostTagCountOrderByAggregateInput = {
    tagName?: SortOrder
    postId?: SortOrder
  }

  export type PostTagMaxOrderByAggregateInput = {
    tagName?: SortOrder
    postId?: SortOrder
  }

  export type PostTagMinOrderByAggregateInput = {
    tagName?: SortOrder
    postId?: SortOrder
  }

  export type CategoryRelationFilter = {
    is?: CategoryWhereInput
    isNot?: CategoryWhereInput
  }

  export type CommunityCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    bannerImage?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
  }

  export type CommunityMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    bannerImage?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
  }

  export type CommunityMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
    image?: SortOrder
    bannerImage?: SortOrder
    description?: SortOrder
    categoryId?: SortOrder
  }

  export type FavouriteCommunityUserIdCommunityIdCompoundUniqueInput = {
    userId: string
    communityId: string
  }

  export type FavouriteCommunityCountOrderByAggregateInput = {
    communityId?: SortOrder
    userId?: SortOrder
  }

  export type FavouriteCommunityMaxOrderByAggregateInput = {
    communityId?: SortOrder
    userId?: SortOrder
  }

  export type FavouriteCommunityMinOrderByAggregateInput = {
    communityId?: SortOrder
    userId?: SortOrder
  }

  export type CommunityListRelationFilter = {
    every?: CommunityWhereInput
    some?: CommunityWhereInput
    none?: CommunityWhereInput
  }

  export type CommunityOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type CategoryCountOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryMaxOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type CategoryMinOrderByAggregateInput = {
    id?: SortOrder
    name?: SortOrder
  }

  export type EnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type UserCommunityUserIdCommunityIdCompoundUniqueInput = {
    userId: string
    communityId: string
  }

  export type UserCommunityCountOrderByAggregateInput = {
    communityId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
  }

  export type UserCommunityMaxOrderByAggregateInput = {
    communityId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
  }

  export type UserCommunityMinOrderByAggregateInput = {
    communityId?: SortOrder
    userId?: SortOrder
    role?: SortOrder
  }

  export type EnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type UserCreateNestedOneWithoutAccountsInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    connect?: UserWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserUpdateOneRequiredWithoutAccountsNestedInput = {
    create?: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    connectOrCreate?: UserCreateOrConnectWithoutAccountsInput
    upsert?: UserUpsertWithoutAccountsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAccountsInput, UserUpdateWithoutAccountsInput>, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserCreateNestedOneWithoutSessionsInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    connect?: UserWhereUniqueInput
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type UserUpdateOneRequiredWithoutSessionsNestedInput = {
    create?: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutSessionsInput
    upsert?: UserUpsertWithoutSessionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSessionsInput, UserUpdateWithoutSessionsInput>, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type AccountCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutFollowingInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput> | UserCreateWithoutFollowingInput[] | UserUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput | UserCreateOrConnectWithoutFollowingInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserCreateNestedManyWithoutFollowedByInput = {
    create?: XOR<UserCreateWithoutFollowedByInput, UserUncheckedCreateWithoutFollowedByInput> | UserCreateWithoutFollowedByInput[] | UserUncheckedCreateWithoutFollowedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFollowedByInput | UserCreateOrConnectWithoutFollowedByInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type PostCreateNestedManyWithoutUserInput = {
    create?: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput> | PostCreateWithoutUserInput[] | PostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostCreateOrConnectWithoutUserInput | PostCreateOrConnectWithoutUserInput[]
    createMany?: PostCreateManyUserInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type CommentCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type PostLikeCreateNestedManyWithoutUserInput = {
    create?: XOR<PostLikeCreateWithoutUserInput, PostLikeUncheckedCreateWithoutUserInput> | PostLikeCreateWithoutUserInput[] | PostLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutUserInput | PostLikeCreateOrConnectWithoutUserInput[]
    createMany?: PostLikeCreateManyUserInputEnvelope
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
  }

  export type CommentLikeCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentLikeCreateWithoutUserInput, CommentLikeUncheckedCreateWithoutUserInput> | CommentLikeCreateWithoutUserInput[] | CommentLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutUserInput | CommentLikeCreateOrConnectWithoutUserInput[]
    createMany?: CommentLikeCreateManyUserInputEnvelope
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
  }

  export type BookmarkCreateNestedManyWithoutUserInput = {
    create?: XOR<BookmarkCreateWithoutUserInput, BookmarkUncheckedCreateWithoutUserInput> | BookmarkCreateWithoutUserInput[] | BookmarkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutUserInput | BookmarkCreateOrConnectWithoutUserInput[]
    createMany?: BookmarkCreateManyUserInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type UserCommunityCreateNestedManyWithoutUserInput = {
    create?: XOR<UserCommunityCreateWithoutUserInput, UserCommunityUncheckedCreateWithoutUserInput> | UserCommunityCreateWithoutUserInput[] | UserCommunityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCommunityCreateOrConnectWithoutUserInput | UserCommunityCreateOrConnectWithoutUserInput[]
    createMany?: UserCommunityCreateManyUserInputEnvelope
    connect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
  }

  export type MentionCreateNestedManyWithoutUserInput = {
    create?: XOR<MentionCreateWithoutUserInput, MentionUncheckedCreateWithoutUserInput> | MentionCreateWithoutUserInput[] | MentionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MentionCreateOrConnectWithoutUserInput | MentionCreateOrConnectWithoutUserInput[]
    createMany?: MentionCreateManyUserInputEnvelope
    connect?: MentionWhereUniqueInput | MentionWhereUniqueInput[]
  }

  export type FavouriteCommunityCreateNestedManyWithoutUserInput = {
    create?: XOR<FavouriteCommunityCreateWithoutUserInput, FavouriteCommunityUncheckedCreateWithoutUserInput> | FavouriteCommunityCreateWithoutUserInput[] | FavouriteCommunityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavouriteCommunityCreateOrConnectWithoutUserInput | FavouriteCommunityCreateOrConnectWithoutUserInput[]
    createMany?: FavouriteCommunityCreateManyUserInputEnvelope
    connect?: FavouriteCommunityWhereUniqueInput | FavouriteCommunityWhereUniqueInput[]
  }

  export type UserShareCreateNestedManyWithoutUserInput = {
    create?: XOR<UserShareCreateWithoutUserInput, UserShareUncheckedCreateWithoutUserInput> | UserShareCreateWithoutUserInput[] | UserShareUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserShareCreateOrConnectWithoutUserInput | UserShareCreateOrConnectWithoutUserInput[]
    createMany?: UserShareCreateManyUserInputEnvelope
    connect?: UserShareWhereUniqueInput | UserShareWhereUniqueInput[]
  }

  export type NotificationCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationStartFollowCreateNestedManyWithoutUserNotificationStartFollowInput = {
    create?: XOR<NotificationStartFollowCreateWithoutUserNotificationStartFollowInput, NotificationStartFollowUncheckedCreateWithoutUserNotificationStartFollowInput> | NotificationStartFollowCreateWithoutUserNotificationStartFollowInput[] | NotificationStartFollowUncheckedCreateWithoutUserNotificationStartFollowInput[]
    connectOrCreate?: NotificationStartFollowCreateOrConnectWithoutUserNotificationStartFollowInput | NotificationStartFollowCreateOrConnectWithoutUserNotificationStartFollowInput[]
    createMany?: NotificationStartFollowCreateManyUserNotificationStartFollowInputEnvelope
    connect?: NotificationStartFollowWhereUniqueInput | NotificationStartFollowWhereUniqueInput[]
  }

  export type NotificationCommunityNewMemberCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCommunityNewMemberCreateWithoutUserInput, NotificationCommunityNewMemberUncheckedCreateWithoutUserInput> | NotificationCommunityNewMemberCreateWithoutUserInput[] | NotificationCommunityNewMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCommunityNewMemberCreateOrConnectWithoutUserInput | NotificationCommunityNewMemberCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCommunityNewMemberCreateManyUserInputEnvelope
    connect?: NotificationCommunityNewMemberWhereUniqueInput | NotificationCommunityNewMemberWhereUniqueInput[]
  }

  export type AccountUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
  }

  export type SessionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutFollowingInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput> | UserCreateWithoutFollowingInput[] | UserUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput | UserCreateOrConnectWithoutFollowingInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type UserUncheckedCreateNestedManyWithoutFollowedByInput = {
    create?: XOR<UserCreateWithoutFollowedByInput, UserUncheckedCreateWithoutFollowedByInput> | UserCreateWithoutFollowedByInput[] | UserUncheckedCreateWithoutFollowedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFollowedByInput | UserCreateOrConnectWithoutFollowedByInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput> | PostCreateWithoutUserInput[] | PostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostCreateOrConnectWithoutUserInput | PostCreateOrConnectWithoutUserInput[]
    createMany?: PostCreateManyUserInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type PostLikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<PostLikeCreateWithoutUserInput, PostLikeUncheckedCreateWithoutUserInput> | PostLikeCreateWithoutUserInput[] | PostLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutUserInput | PostLikeCreateOrConnectWithoutUserInput[]
    createMany?: PostLikeCreateManyUserInputEnvelope
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
  }

  export type CommentLikeUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<CommentLikeCreateWithoutUserInput, CommentLikeUncheckedCreateWithoutUserInput> | CommentLikeCreateWithoutUserInput[] | CommentLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutUserInput | CommentLikeCreateOrConnectWithoutUserInput[]
    createMany?: CommentLikeCreateManyUserInputEnvelope
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
  }

  export type BookmarkUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<BookmarkCreateWithoutUserInput, BookmarkUncheckedCreateWithoutUserInput> | BookmarkCreateWithoutUserInput[] | BookmarkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutUserInput | BookmarkCreateOrConnectWithoutUserInput[]
    createMany?: BookmarkCreateManyUserInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type UserCommunityUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserCommunityCreateWithoutUserInput, UserCommunityUncheckedCreateWithoutUserInput> | UserCommunityCreateWithoutUserInput[] | UserCommunityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCommunityCreateOrConnectWithoutUserInput | UserCommunityCreateOrConnectWithoutUserInput[]
    createMany?: UserCommunityCreateManyUserInputEnvelope
    connect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
  }

  export type MentionUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<MentionCreateWithoutUserInput, MentionUncheckedCreateWithoutUserInput> | MentionCreateWithoutUserInput[] | MentionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MentionCreateOrConnectWithoutUserInput | MentionCreateOrConnectWithoutUserInput[]
    createMany?: MentionCreateManyUserInputEnvelope
    connect?: MentionWhereUniqueInput | MentionWhereUniqueInput[]
  }

  export type FavouriteCommunityUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FavouriteCommunityCreateWithoutUserInput, FavouriteCommunityUncheckedCreateWithoutUserInput> | FavouriteCommunityCreateWithoutUserInput[] | FavouriteCommunityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavouriteCommunityCreateOrConnectWithoutUserInput | FavouriteCommunityCreateOrConnectWithoutUserInput[]
    createMany?: FavouriteCommunityCreateManyUserInputEnvelope
    connect?: FavouriteCommunityWhereUniqueInput | FavouriteCommunityWhereUniqueInput[]
  }

  export type UserShareUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<UserShareCreateWithoutUserInput, UserShareUncheckedCreateWithoutUserInput> | UserShareCreateWithoutUserInput[] | UserShareUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserShareCreateOrConnectWithoutUserInput | UserShareCreateOrConnectWithoutUserInput[]
    createMany?: UserShareCreateManyUserInputEnvelope
    connect?: UserShareWhereUniqueInput | UserShareWhereUniqueInput[]
  }

  export type NotificationUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
  }

  export type NotificationStartFollowUncheckedCreateNestedManyWithoutUserNotificationStartFollowInput = {
    create?: XOR<NotificationStartFollowCreateWithoutUserNotificationStartFollowInput, NotificationStartFollowUncheckedCreateWithoutUserNotificationStartFollowInput> | NotificationStartFollowCreateWithoutUserNotificationStartFollowInput[] | NotificationStartFollowUncheckedCreateWithoutUserNotificationStartFollowInput[]
    connectOrCreate?: NotificationStartFollowCreateOrConnectWithoutUserNotificationStartFollowInput | NotificationStartFollowCreateOrConnectWithoutUserNotificationStartFollowInput[]
    createMany?: NotificationStartFollowCreateManyUserNotificationStartFollowInputEnvelope
    connect?: NotificationStartFollowWhereUniqueInput | NotificationStartFollowWhereUniqueInput[]
  }

  export type NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<NotificationCommunityNewMemberCreateWithoutUserInput, NotificationCommunityNewMemberUncheckedCreateWithoutUserInput> | NotificationCommunityNewMemberCreateWithoutUserInput[] | NotificationCommunityNewMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCommunityNewMemberCreateOrConnectWithoutUserInput | NotificationCommunityNewMemberCreateOrConnectWithoutUserInput[]
    createMany?: NotificationCommunityNewMemberCreateManyUserInputEnvelope
    connect?: NotificationCommunityNewMemberWhereUniqueInput | NotificationCommunityNewMemberWhereUniqueInput[]
  }

  export type NullableDateTimeFieldUpdateOperationsInput = {
    set?: Date | string | null
  }

  export type AccountUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput> | UserCreateWithoutFollowingInput[] | UserUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput | UserCreateOrConnectWithoutFollowingInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutFollowingInput | UserUpsertWithWhereUniqueWithoutFollowingInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutFollowingInput | UserUpdateWithWhereUniqueWithoutFollowingInput[]
    updateMany?: UserUpdateManyWithWhereWithoutFollowingInput | UserUpdateManyWithWhereWithoutFollowingInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUpdateManyWithoutFollowedByNestedInput = {
    create?: XOR<UserCreateWithoutFollowedByInput, UserUncheckedCreateWithoutFollowedByInput> | UserCreateWithoutFollowedByInput[] | UserUncheckedCreateWithoutFollowedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFollowedByInput | UserCreateOrConnectWithoutFollowedByInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutFollowedByInput | UserUpsertWithWhereUniqueWithoutFollowedByInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutFollowedByInput | UserUpdateWithWhereUniqueWithoutFollowedByInput[]
    updateMany?: UserUpdateManyWithWhereWithoutFollowedByInput | UserUpdateManyWithWhereWithoutFollowedByInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PostUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput> | PostCreateWithoutUserInput[] | PostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostCreateOrConnectWithoutUserInput | PostCreateOrConnectWithoutUserInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutUserInput | PostUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PostCreateManyUserInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutUserInput | PostUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostUpdateManyWithWhereWithoutUserInput | PostUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type CommentUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type PostLikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostLikeCreateWithoutUserInput, PostLikeUncheckedCreateWithoutUserInput> | PostLikeCreateWithoutUserInput[] | PostLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutUserInput | PostLikeCreateOrConnectWithoutUserInput[]
    upsert?: PostLikeUpsertWithWhereUniqueWithoutUserInput | PostLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PostLikeCreateManyUserInputEnvelope
    set?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    disconnect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    delete?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    update?: PostLikeUpdateWithWhereUniqueWithoutUserInput | PostLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostLikeUpdateManyWithWhereWithoutUserInput | PostLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostLikeScalarWhereInput | PostLikeScalarWhereInput[]
  }

  export type CommentLikeUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentLikeCreateWithoutUserInput, CommentLikeUncheckedCreateWithoutUserInput> | CommentLikeCreateWithoutUserInput[] | CommentLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutUserInput | CommentLikeCreateOrConnectWithoutUserInput[]
    upsert?: CommentLikeUpsertWithWhereUniqueWithoutUserInput | CommentLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentLikeCreateManyUserInputEnvelope
    set?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    disconnect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    delete?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    update?: CommentLikeUpdateWithWhereUniqueWithoutUserInput | CommentLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentLikeUpdateManyWithWhereWithoutUserInput | CommentLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentLikeScalarWhereInput | CommentLikeScalarWhereInput[]
  }

  export type BookmarkUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookmarkCreateWithoutUserInput, BookmarkUncheckedCreateWithoutUserInput> | BookmarkCreateWithoutUserInput[] | BookmarkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutUserInput | BookmarkCreateOrConnectWithoutUserInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutUserInput | BookmarkUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookmarkCreateManyUserInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutUserInput | BookmarkUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutUserInput | BookmarkUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type UserCommunityUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserCommunityCreateWithoutUserInput, UserCommunityUncheckedCreateWithoutUserInput> | UserCommunityCreateWithoutUserInput[] | UserCommunityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCommunityCreateOrConnectWithoutUserInput | UserCommunityCreateOrConnectWithoutUserInput[]
    upsert?: UserCommunityUpsertWithWhereUniqueWithoutUserInput | UserCommunityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserCommunityCreateManyUserInputEnvelope
    set?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    disconnect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    delete?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    connect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    update?: UserCommunityUpdateWithWhereUniqueWithoutUserInput | UserCommunityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserCommunityUpdateManyWithWhereWithoutUserInput | UserCommunityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserCommunityScalarWhereInput | UserCommunityScalarWhereInput[]
  }

  export type MentionUpdateManyWithoutUserNestedInput = {
    create?: XOR<MentionCreateWithoutUserInput, MentionUncheckedCreateWithoutUserInput> | MentionCreateWithoutUserInput[] | MentionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MentionCreateOrConnectWithoutUserInput | MentionCreateOrConnectWithoutUserInput[]
    upsert?: MentionUpsertWithWhereUniqueWithoutUserInput | MentionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MentionCreateManyUserInputEnvelope
    set?: MentionWhereUniqueInput | MentionWhereUniqueInput[]
    disconnect?: MentionWhereUniqueInput | MentionWhereUniqueInput[]
    delete?: MentionWhereUniqueInput | MentionWhereUniqueInput[]
    connect?: MentionWhereUniqueInput | MentionWhereUniqueInput[]
    update?: MentionUpdateWithWhereUniqueWithoutUserInput | MentionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MentionUpdateManyWithWhereWithoutUserInput | MentionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MentionScalarWhereInput | MentionScalarWhereInput[]
  }

  export type FavouriteCommunityUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavouriteCommunityCreateWithoutUserInput, FavouriteCommunityUncheckedCreateWithoutUserInput> | FavouriteCommunityCreateWithoutUserInput[] | FavouriteCommunityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavouriteCommunityCreateOrConnectWithoutUserInput | FavouriteCommunityCreateOrConnectWithoutUserInput[]
    upsert?: FavouriteCommunityUpsertWithWhereUniqueWithoutUserInput | FavouriteCommunityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavouriteCommunityCreateManyUserInputEnvelope
    set?: FavouriteCommunityWhereUniqueInput | FavouriteCommunityWhereUniqueInput[]
    disconnect?: FavouriteCommunityWhereUniqueInput | FavouriteCommunityWhereUniqueInput[]
    delete?: FavouriteCommunityWhereUniqueInput | FavouriteCommunityWhereUniqueInput[]
    connect?: FavouriteCommunityWhereUniqueInput | FavouriteCommunityWhereUniqueInput[]
    update?: FavouriteCommunityUpdateWithWhereUniqueWithoutUserInput | FavouriteCommunityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavouriteCommunityUpdateManyWithWhereWithoutUserInput | FavouriteCommunityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavouriteCommunityScalarWhereInput | FavouriteCommunityScalarWhereInput[]
  }

  export type UserShareUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserShareCreateWithoutUserInput, UserShareUncheckedCreateWithoutUserInput> | UserShareCreateWithoutUserInput[] | UserShareUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserShareCreateOrConnectWithoutUserInput | UserShareCreateOrConnectWithoutUserInput[]
    upsert?: UserShareUpsertWithWhereUniqueWithoutUserInput | UserShareUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserShareCreateManyUserInputEnvelope
    set?: UserShareWhereUniqueInput | UserShareWhereUniqueInput[]
    disconnect?: UserShareWhereUniqueInput | UserShareWhereUniqueInput[]
    delete?: UserShareWhereUniqueInput | UserShareWhereUniqueInput[]
    connect?: UserShareWhereUniqueInput | UserShareWhereUniqueInput[]
    update?: UserShareUpdateWithWhereUniqueWithoutUserInput | UserShareUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserShareUpdateManyWithWhereWithoutUserInput | UserShareUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserShareScalarWhereInput | UserShareScalarWhereInput[]
  }

  export type NotificationUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationStartFollowUpdateManyWithoutUserNotificationStartFollowNestedInput = {
    create?: XOR<NotificationStartFollowCreateWithoutUserNotificationStartFollowInput, NotificationStartFollowUncheckedCreateWithoutUserNotificationStartFollowInput> | NotificationStartFollowCreateWithoutUserNotificationStartFollowInput[] | NotificationStartFollowUncheckedCreateWithoutUserNotificationStartFollowInput[]
    connectOrCreate?: NotificationStartFollowCreateOrConnectWithoutUserNotificationStartFollowInput | NotificationStartFollowCreateOrConnectWithoutUserNotificationStartFollowInput[]
    upsert?: NotificationStartFollowUpsertWithWhereUniqueWithoutUserNotificationStartFollowInput | NotificationStartFollowUpsertWithWhereUniqueWithoutUserNotificationStartFollowInput[]
    createMany?: NotificationStartFollowCreateManyUserNotificationStartFollowInputEnvelope
    set?: NotificationStartFollowWhereUniqueInput | NotificationStartFollowWhereUniqueInput[]
    disconnect?: NotificationStartFollowWhereUniqueInput | NotificationStartFollowWhereUniqueInput[]
    delete?: NotificationStartFollowWhereUniqueInput | NotificationStartFollowWhereUniqueInput[]
    connect?: NotificationStartFollowWhereUniqueInput | NotificationStartFollowWhereUniqueInput[]
    update?: NotificationStartFollowUpdateWithWhereUniqueWithoutUserNotificationStartFollowInput | NotificationStartFollowUpdateWithWhereUniqueWithoutUserNotificationStartFollowInput[]
    updateMany?: NotificationStartFollowUpdateManyWithWhereWithoutUserNotificationStartFollowInput | NotificationStartFollowUpdateManyWithWhereWithoutUserNotificationStartFollowInput[]
    deleteMany?: NotificationStartFollowScalarWhereInput | NotificationStartFollowScalarWhereInput[]
  }

  export type NotificationCommunityNewMemberUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCommunityNewMemberCreateWithoutUserInput, NotificationCommunityNewMemberUncheckedCreateWithoutUserInput> | NotificationCommunityNewMemberCreateWithoutUserInput[] | NotificationCommunityNewMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCommunityNewMemberCreateOrConnectWithoutUserInput | NotificationCommunityNewMemberCreateOrConnectWithoutUserInput[]
    upsert?: NotificationCommunityNewMemberUpsertWithWhereUniqueWithoutUserInput | NotificationCommunityNewMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCommunityNewMemberCreateManyUserInputEnvelope
    set?: NotificationCommunityNewMemberWhereUniqueInput | NotificationCommunityNewMemberWhereUniqueInput[]
    disconnect?: NotificationCommunityNewMemberWhereUniqueInput | NotificationCommunityNewMemberWhereUniqueInput[]
    delete?: NotificationCommunityNewMemberWhereUniqueInput | NotificationCommunityNewMemberWhereUniqueInput[]
    connect?: NotificationCommunityNewMemberWhereUniqueInput | NotificationCommunityNewMemberWhereUniqueInput[]
    update?: NotificationCommunityNewMemberUpdateWithWhereUniqueWithoutUserInput | NotificationCommunityNewMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationCommunityNewMemberUpdateManyWithWhereWithoutUserInput | NotificationCommunityNewMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationCommunityNewMemberScalarWhereInput | NotificationCommunityNewMemberScalarWhereInput[]
  }

  export type AccountUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput> | AccountCreateWithoutUserInput[] | AccountUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AccountCreateOrConnectWithoutUserInput | AccountCreateOrConnectWithoutUserInput[]
    upsert?: AccountUpsertWithWhereUniqueWithoutUserInput | AccountUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AccountCreateManyUserInputEnvelope
    set?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    disconnect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    delete?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    connect?: AccountWhereUniqueInput | AccountWhereUniqueInput[]
    update?: AccountUpdateWithWhereUniqueWithoutUserInput | AccountUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AccountUpdateManyWithWhereWithoutUserInput | AccountUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AccountScalarWhereInput | AccountScalarWhereInput[]
  }

  export type SessionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput> | SessionCreateWithoutUserInput[] | SessionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SessionCreateOrConnectWithoutUserInput | SessionCreateOrConnectWithoutUserInput[]
    upsert?: SessionUpsertWithWhereUniqueWithoutUserInput | SessionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SessionCreateManyUserInputEnvelope
    set?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    disconnect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    delete?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    connect?: SessionWhereUniqueInput | SessionWhereUniqueInput[]
    update?: SessionUpdateWithWhereUniqueWithoutUserInput | SessionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SessionUpdateManyWithWhereWithoutUserInput | SessionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SessionScalarWhereInput | SessionScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutFollowingNestedInput = {
    create?: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput> | UserCreateWithoutFollowingInput[] | UserUncheckedCreateWithoutFollowingInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFollowingInput | UserCreateOrConnectWithoutFollowingInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutFollowingInput | UserUpsertWithWhereUniqueWithoutFollowingInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutFollowingInput | UserUpdateWithWhereUniqueWithoutFollowingInput[]
    updateMany?: UserUpdateManyWithWhereWithoutFollowingInput | UserUpdateManyWithWhereWithoutFollowingInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type UserUncheckedUpdateManyWithoutFollowedByNestedInput = {
    create?: XOR<UserCreateWithoutFollowedByInput, UserUncheckedCreateWithoutFollowedByInput> | UserCreateWithoutFollowedByInput[] | UserUncheckedCreateWithoutFollowedByInput[]
    connectOrCreate?: UserCreateOrConnectWithoutFollowedByInput | UserCreateOrConnectWithoutFollowedByInput[]
    upsert?: UserUpsertWithWhereUniqueWithoutFollowedByInput | UserUpsertWithWhereUniqueWithoutFollowedByInput[]
    set?: UserWhereUniqueInput | UserWhereUniqueInput[]
    disconnect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    delete?: UserWhereUniqueInput | UserWhereUniqueInput[]
    connect?: UserWhereUniqueInput | UserWhereUniqueInput[]
    update?: UserUpdateWithWhereUniqueWithoutFollowedByInput | UserUpdateWithWhereUniqueWithoutFollowedByInput[]
    updateMany?: UserUpdateManyWithWhereWithoutFollowedByInput | UserUpdateManyWithWhereWithoutFollowedByInput[]
    deleteMany?: UserScalarWhereInput | UserScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput> | PostCreateWithoutUserInput[] | PostUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostCreateOrConnectWithoutUserInput | PostCreateOrConnectWithoutUserInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutUserInput | PostUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PostCreateManyUserInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutUserInput | PostUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostUpdateManyWithWhereWithoutUserInput | PostUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput> | CommentCreateWithoutUserInput[] | CommentUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutUserInput | CommentCreateOrConnectWithoutUserInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutUserInput | CommentUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentCreateManyUserInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutUserInput | CommentUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutUserInput | CommentUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type PostLikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<PostLikeCreateWithoutUserInput, PostLikeUncheckedCreateWithoutUserInput> | PostLikeCreateWithoutUserInput[] | PostLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutUserInput | PostLikeCreateOrConnectWithoutUserInput[]
    upsert?: PostLikeUpsertWithWhereUniqueWithoutUserInput | PostLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: PostLikeCreateManyUserInputEnvelope
    set?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    disconnect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    delete?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    update?: PostLikeUpdateWithWhereUniqueWithoutUserInput | PostLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: PostLikeUpdateManyWithWhereWithoutUserInput | PostLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: PostLikeScalarWhereInput | PostLikeScalarWhereInput[]
  }

  export type CommentLikeUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<CommentLikeCreateWithoutUserInput, CommentLikeUncheckedCreateWithoutUserInput> | CommentLikeCreateWithoutUserInput[] | CommentLikeUncheckedCreateWithoutUserInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutUserInput | CommentLikeCreateOrConnectWithoutUserInput[]
    upsert?: CommentLikeUpsertWithWhereUniqueWithoutUserInput | CommentLikeUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: CommentLikeCreateManyUserInputEnvelope
    set?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    disconnect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    delete?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    update?: CommentLikeUpdateWithWhereUniqueWithoutUserInput | CommentLikeUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: CommentLikeUpdateManyWithWhereWithoutUserInput | CommentLikeUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: CommentLikeScalarWhereInput | CommentLikeScalarWhereInput[]
  }

  export type BookmarkUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<BookmarkCreateWithoutUserInput, BookmarkUncheckedCreateWithoutUserInput> | BookmarkCreateWithoutUserInput[] | BookmarkUncheckedCreateWithoutUserInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutUserInput | BookmarkCreateOrConnectWithoutUserInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutUserInput | BookmarkUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: BookmarkCreateManyUserInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutUserInput | BookmarkUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutUserInput | BookmarkUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type UserCommunityUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserCommunityCreateWithoutUserInput, UserCommunityUncheckedCreateWithoutUserInput> | UserCommunityCreateWithoutUserInput[] | UserCommunityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserCommunityCreateOrConnectWithoutUserInput | UserCommunityCreateOrConnectWithoutUserInput[]
    upsert?: UserCommunityUpsertWithWhereUniqueWithoutUserInput | UserCommunityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserCommunityCreateManyUserInputEnvelope
    set?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    disconnect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    delete?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    connect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    update?: UserCommunityUpdateWithWhereUniqueWithoutUserInput | UserCommunityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserCommunityUpdateManyWithWhereWithoutUserInput | UserCommunityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserCommunityScalarWhereInput | UserCommunityScalarWhereInput[]
  }

  export type MentionUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<MentionCreateWithoutUserInput, MentionUncheckedCreateWithoutUserInput> | MentionCreateWithoutUserInput[] | MentionUncheckedCreateWithoutUserInput[]
    connectOrCreate?: MentionCreateOrConnectWithoutUserInput | MentionCreateOrConnectWithoutUserInput[]
    upsert?: MentionUpsertWithWhereUniqueWithoutUserInput | MentionUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: MentionCreateManyUserInputEnvelope
    set?: MentionWhereUniqueInput | MentionWhereUniqueInput[]
    disconnect?: MentionWhereUniqueInput | MentionWhereUniqueInput[]
    delete?: MentionWhereUniqueInput | MentionWhereUniqueInput[]
    connect?: MentionWhereUniqueInput | MentionWhereUniqueInput[]
    update?: MentionUpdateWithWhereUniqueWithoutUserInput | MentionUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: MentionUpdateManyWithWhereWithoutUserInput | MentionUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: MentionScalarWhereInput | MentionScalarWhereInput[]
  }

  export type FavouriteCommunityUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavouriteCommunityCreateWithoutUserInput, FavouriteCommunityUncheckedCreateWithoutUserInput> | FavouriteCommunityCreateWithoutUserInput[] | FavouriteCommunityUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavouriteCommunityCreateOrConnectWithoutUserInput | FavouriteCommunityCreateOrConnectWithoutUserInput[]
    upsert?: FavouriteCommunityUpsertWithWhereUniqueWithoutUserInput | FavouriteCommunityUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavouriteCommunityCreateManyUserInputEnvelope
    set?: FavouriteCommunityWhereUniqueInput | FavouriteCommunityWhereUniqueInput[]
    disconnect?: FavouriteCommunityWhereUniqueInput | FavouriteCommunityWhereUniqueInput[]
    delete?: FavouriteCommunityWhereUniqueInput | FavouriteCommunityWhereUniqueInput[]
    connect?: FavouriteCommunityWhereUniqueInput | FavouriteCommunityWhereUniqueInput[]
    update?: FavouriteCommunityUpdateWithWhereUniqueWithoutUserInput | FavouriteCommunityUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavouriteCommunityUpdateManyWithWhereWithoutUserInput | FavouriteCommunityUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavouriteCommunityScalarWhereInput | FavouriteCommunityScalarWhereInput[]
  }

  export type UserShareUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<UserShareCreateWithoutUserInput, UserShareUncheckedCreateWithoutUserInput> | UserShareCreateWithoutUserInput[] | UserShareUncheckedCreateWithoutUserInput[]
    connectOrCreate?: UserShareCreateOrConnectWithoutUserInput | UserShareCreateOrConnectWithoutUserInput[]
    upsert?: UserShareUpsertWithWhereUniqueWithoutUserInput | UserShareUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: UserShareCreateManyUserInputEnvelope
    set?: UserShareWhereUniqueInput | UserShareWhereUniqueInput[]
    disconnect?: UserShareWhereUniqueInput | UserShareWhereUniqueInput[]
    delete?: UserShareWhereUniqueInput | UserShareWhereUniqueInput[]
    connect?: UserShareWhereUniqueInput | UserShareWhereUniqueInput[]
    update?: UserShareUpdateWithWhereUniqueWithoutUserInput | UserShareUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: UserShareUpdateManyWithWhereWithoutUserInput | UserShareUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: UserShareScalarWhereInput | UserShareScalarWhereInput[]
  }

  export type NotificationUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput> | NotificationCreateWithoutUserInput[] | NotificationUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCreateOrConnectWithoutUserInput | NotificationCreateOrConnectWithoutUserInput[]
    upsert?: NotificationUpsertWithWhereUniqueWithoutUserInput | NotificationUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCreateManyUserInputEnvelope
    set?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    disconnect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    delete?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    connect?: NotificationWhereUniqueInput | NotificationWhereUniqueInput[]
    update?: NotificationUpdateWithWhereUniqueWithoutUserInput | NotificationUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationUpdateManyWithWhereWithoutUserInput | NotificationUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
  }

  export type NotificationStartFollowUncheckedUpdateManyWithoutUserNotificationStartFollowNestedInput = {
    create?: XOR<NotificationStartFollowCreateWithoutUserNotificationStartFollowInput, NotificationStartFollowUncheckedCreateWithoutUserNotificationStartFollowInput> | NotificationStartFollowCreateWithoutUserNotificationStartFollowInput[] | NotificationStartFollowUncheckedCreateWithoutUserNotificationStartFollowInput[]
    connectOrCreate?: NotificationStartFollowCreateOrConnectWithoutUserNotificationStartFollowInput | NotificationStartFollowCreateOrConnectWithoutUserNotificationStartFollowInput[]
    upsert?: NotificationStartFollowUpsertWithWhereUniqueWithoutUserNotificationStartFollowInput | NotificationStartFollowUpsertWithWhereUniqueWithoutUserNotificationStartFollowInput[]
    createMany?: NotificationStartFollowCreateManyUserNotificationStartFollowInputEnvelope
    set?: NotificationStartFollowWhereUniqueInput | NotificationStartFollowWhereUniqueInput[]
    disconnect?: NotificationStartFollowWhereUniqueInput | NotificationStartFollowWhereUniqueInput[]
    delete?: NotificationStartFollowWhereUniqueInput | NotificationStartFollowWhereUniqueInput[]
    connect?: NotificationStartFollowWhereUniqueInput | NotificationStartFollowWhereUniqueInput[]
    update?: NotificationStartFollowUpdateWithWhereUniqueWithoutUserNotificationStartFollowInput | NotificationStartFollowUpdateWithWhereUniqueWithoutUserNotificationStartFollowInput[]
    updateMany?: NotificationStartFollowUpdateManyWithWhereWithoutUserNotificationStartFollowInput | NotificationStartFollowUpdateManyWithWhereWithoutUserNotificationStartFollowInput[]
    deleteMany?: NotificationStartFollowScalarWhereInput | NotificationStartFollowScalarWhereInput[]
  }

  export type NotificationCommunityNewMemberUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<NotificationCommunityNewMemberCreateWithoutUserInput, NotificationCommunityNewMemberUncheckedCreateWithoutUserInput> | NotificationCommunityNewMemberCreateWithoutUserInput[] | NotificationCommunityNewMemberUncheckedCreateWithoutUserInput[]
    connectOrCreate?: NotificationCommunityNewMemberCreateOrConnectWithoutUserInput | NotificationCommunityNewMemberCreateOrConnectWithoutUserInput[]
    upsert?: NotificationCommunityNewMemberUpsertWithWhereUniqueWithoutUserInput | NotificationCommunityNewMemberUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: NotificationCommunityNewMemberCreateManyUserInputEnvelope
    set?: NotificationCommunityNewMemberWhereUniqueInput | NotificationCommunityNewMemberWhereUniqueInput[]
    disconnect?: NotificationCommunityNewMemberWhereUniqueInput | NotificationCommunityNewMemberWhereUniqueInput[]
    delete?: NotificationCommunityNewMemberWhereUniqueInput | NotificationCommunityNewMemberWhereUniqueInput[]
    connect?: NotificationCommunityNewMemberWhereUniqueInput | NotificationCommunityNewMemberWhereUniqueInput[]
    update?: NotificationCommunityNewMemberUpdateWithWhereUniqueWithoutUserInput | NotificationCommunityNewMemberUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: NotificationCommunityNewMemberUpdateManyWithWhereWithoutUserInput | NotificationCommunityNewMemberUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: NotificationCommunityNewMemberScalarWhereInput | NotificationCommunityNewMemberScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutPostsInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutPostInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    createMany?: CommentCreateManyPostInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type PostLikeCreateNestedManyWithoutPostInput = {
    create?: XOR<PostLikeCreateWithoutPostInput, PostLikeUncheckedCreateWithoutPostInput> | PostLikeCreateWithoutPostInput[] | PostLikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutPostInput | PostLikeCreateOrConnectWithoutPostInput[]
    createMany?: PostLikeCreateManyPostInputEnvelope
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
  }

  export type BookmarkCreateNestedManyWithoutPostInput = {
    create?: XOR<BookmarkCreateWithoutPostInput, BookmarkUncheckedCreateWithoutPostInput> | BookmarkCreateWithoutPostInput[] | BookmarkUncheckedCreateWithoutPostInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutPostInput | BookmarkCreateOrConnectWithoutPostInput[]
    createMany?: BookmarkCreateManyPostInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type ImageCreateNestedManyWithoutPostInput = {
    create?: XOR<ImageCreateWithoutPostInput, ImageUncheckedCreateWithoutPostInput> | ImageCreateWithoutPostInput[] | ImageUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutPostInput | ImageCreateOrConnectWithoutPostInput[]
    createMany?: ImageCreateManyPostInputEnvelope
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type PostTagCreateNestedManyWithoutPostInput = {
    create?: XOR<PostTagCreateWithoutPostInput, PostTagUncheckedCreateWithoutPostInput> | PostTagCreateWithoutPostInput[] | PostTagUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostTagCreateOrConnectWithoutPostInput | PostTagCreateOrConnectWithoutPostInput[]
    createMany?: PostTagCreateManyPostInputEnvelope
    connect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[]
  }

  export type PostCreateNestedOneWithoutSharesInput = {
    create?: XOR<PostCreateWithoutSharesInput, PostUncheckedCreateWithoutSharesInput>
    connectOrCreate?: PostCreateOrConnectWithoutSharesInput
    connect?: PostWhereUniqueInput
  }

  export type PostCreateNestedManyWithoutShareParentInput = {
    create?: XOR<PostCreateWithoutShareParentInput, PostUncheckedCreateWithoutShareParentInput> | PostCreateWithoutShareParentInput[] | PostUncheckedCreateWithoutShareParentInput[]
    connectOrCreate?: PostCreateOrConnectWithoutShareParentInput | PostCreateOrConnectWithoutShareParentInput[]
    createMany?: PostCreateManyShareParentInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type CommunityCreateNestedOneWithoutPostsInput = {
    create?: XOR<CommunityCreateWithoutPostsInput, CommunityUncheckedCreateWithoutPostsInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutPostsInput
    connect?: CommunityWhereUniqueInput
  }

  export type MentionCreateNestedManyWithoutPostInput = {
    create?: XOR<MentionCreateWithoutPostInput, MentionUncheckedCreateWithoutPostInput> | MentionCreateWithoutPostInput[] | MentionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: MentionCreateOrConnectWithoutPostInput | MentionCreateOrConnectWithoutPostInput[]
    createMany?: MentionCreateManyPostInputEnvelope
    connect?: MentionWhereUniqueInput | MentionWhereUniqueInput[]
  }

  export type UserShareCreateNestedManyWithoutPostInput = {
    create?: XOR<UserShareCreateWithoutPostInput, UserShareUncheckedCreateWithoutPostInput> | UserShareCreateWithoutPostInput[] | UserShareUncheckedCreateWithoutPostInput[]
    connectOrCreate?: UserShareCreateOrConnectWithoutPostInput | UserShareCreateOrConnectWithoutPostInput[]
    createMany?: UserShareCreateManyPostInputEnvelope
    connect?: UserShareWhereUniqueInput | UserShareWhereUniqueInput[]
  }

  export type NotificationMentionCreateNestedManyWithoutPostInput = {
    create?: XOR<NotificationMentionCreateWithoutPostInput, NotificationMentionUncheckedCreateWithoutPostInput> | NotificationMentionCreateWithoutPostInput[] | NotificationMentionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: NotificationMentionCreateOrConnectWithoutPostInput | NotificationMentionCreateOrConnectWithoutPostInput[]
    createMany?: NotificationMentionCreateManyPostInputEnvelope
    connect?: NotificationMentionWhereUniqueInput | NotificationMentionWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    createMany?: CommentCreateManyPostInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type PostLikeUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<PostLikeCreateWithoutPostInput, PostLikeUncheckedCreateWithoutPostInput> | PostLikeCreateWithoutPostInput[] | PostLikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutPostInput | PostLikeCreateOrConnectWithoutPostInput[]
    createMany?: PostLikeCreateManyPostInputEnvelope
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
  }

  export type BookmarkUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<BookmarkCreateWithoutPostInput, BookmarkUncheckedCreateWithoutPostInput> | BookmarkCreateWithoutPostInput[] | BookmarkUncheckedCreateWithoutPostInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutPostInput | BookmarkCreateOrConnectWithoutPostInput[]
    createMany?: BookmarkCreateManyPostInputEnvelope
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
  }

  export type ImageUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<ImageCreateWithoutPostInput, ImageUncheckedCreateWithoutPostInput> | ImageCreateWithoutPostInput[] | ImageUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutPostInput | ImageCreateOrConnectWithoutPostInput[]
    createMany?: ImageCreateManyPostInputEnvelope
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
  }

  export type PostTagUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<PostTagCreateWithoutPostInput, PostTagUncheckedCreateWithoutPostInput> | PostTagCreateWithoutPostInput[] | PostTagUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostTagCreateOrConnectWithoutPostInput | PostTagCreateOrConnectWithoutPostInput[]
    createMany?: PostTagCreateManyPostInputEnvelope
    connect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutShareParentInput = {
    create?: XOR<PostCreateWithoutShareParentInput, PostUncheckedCreateWithoutShareParentInput> | PostCreateWithoutShareParentInput[] | PostUncheckedCreateWithoutShareParentInput[]
    connectOrCreate?: PostCreateOrConnectWithoutShareParentInput | PostCreateOrConnectWithoutShareParentInput[]
    createMany?: PostCreateManyShareParentInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type MentionUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<MentionCreateWithoutPostInput, MentionUncheckedCreateWithoutPostInput> | MentionCreateWithoutPostInput[] | MentionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: MentionCreateOrConnectWithoutPostInput | MentionCreateOrConnectWithoutPostInput[]
    createMany?: MentionCreateManyPostInputEnvelope
    connect?: MentionWhereUniqueInput | MentionWhereUniqueInput[]
  }

  export type UserShareUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<UserShareCreateWithoutPostInput, UserShareUncheckedCreateWithoutPostInput> | UserShareCreateWithoutPostInput[] | UserShareUncheckedCreateWithoutPostInput[]
    connectOrCreate?: UserShareCreateOrConnectWithoutPostInput | UserShareCreateOrConnectWithoutPostInput[]
    createMany?: UserShareCreateManyPostInputEnvelope
    connect?: UserShareWhereUniqueInput | UserShareWhereUniqueInput[]
  }

  export type NotificationMentionUncheckedCreateNestedManyWithoutPostInput = {
    create?: XOR<NotificationMentionCreateWithoutPostInput, NotificationMentionUncheckedCreateWithoutPostInput> | NotificationMentionCreateWithoutPostInput[] | NotificationMentionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: NotificationMentionCreateOrConnectWithoutPostInput | NotificationMentionCreateOrConnectWithoutPostInput[]
    createMany?: NotificationMentionCreateManyPostInputEnvelope
    connect?: NotificationMentionWhereUniqueInput | NotificationMentionWhereUniqueInput[]
  }

  export type BoolFieldUpdateOperationsInput = {
    set?: boolean
  }

  export type UserUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutPostsInput
    upsert?: UserUpsertWithoutPostsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutPostsInput, UserUpdateWithoutPostsInput>, UserUncheckedUpdateWithoutPostsInput>
  }

  export type CommentUpdateManyWithoutPostNestedInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutPostInput | CommentUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: CommentCreateManyPostInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutPostInput | CommentUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutPostInput | CommentUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type PostLikeUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostLikeCreateWithoutPostInput, PostLikeUncheckedCreateWithoutPostInput> | PostLikeCreateWithoutPostInput[] | PostLikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutPostInput | PostLikeCreateOrConnectWithoutPostInput[]
    upsert?: PostLikeUpsertWithWhereUniqueWithoutPostInput | PostLikeUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostLikeCreateManyPostInputEnvelope
    set?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    disconnect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    delete?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    update?: PostLikeUpdateWithWhereUniqueWithoutPostInput | PostLikeUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostLikeUpdateManyWithWhereWithoutPostInput | PostLikeUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostLikeScalarWhereInput | PostLikeScalarWhereInput[]
  }

  export type BookmarkUpdateManyWithoutPostNestedInput = {
    create?: XOR<BookmarkCreateWithoutPostInput, BookmarkUncheckedCreateWithoutPostInput> | BookmarkCreateWithoutPostInput[] | BookmarkUncheckedCreateWithoutPostInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutPostInput | BookmarkCreateOrConnectWithoutPostInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutPostInput | BookmarkUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: BookmarkCreateManyPostInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutPostInput | BookmarkUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutPostInput | BookmarkUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type ImageUpdateManyWithoutPostNestedInput = {
    create?: XOR<ImageCreateWithoutPostInput, ImageUncheckedCreateWithoutPostInput> | ImageCreateWithoutPostInput[] | ImageUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutPostInput | ImageCreateOrConnectWithoutPostInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutPostInput | ImageUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ImageCreateManyPostInputEnvelope
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutPostInput | ImageUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutPostInput | ImageUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type PostTagUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostTagCreateWithoutPostInput, PostTagUncheckedCreateWithoutPostInput> | PostTagCreateWithoutPostInput[] | PostTagUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostTagCreateOrConnectWithoutPostInput | PostTagCreateOrConnectWithoutPostInput[]
    upsert?: PostTagUpsertWithWhereUniqueWithoutPostInput | PostTagUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostTagCreateManyPostInputEnvelope
    set?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[]
    disconnect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[]
    delete?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[]
    connect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[]
    update?: PostTagUpdateWithWhereUniqueWithoutPostInput | PostTagUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostTagUpdateManyWithWhereWithoutPostInput | PostTagUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostTagScalarWhereInput | PostTagScalarWhereInput[]
  }

  export type PostUpdateOneWithoutSharesNestedInput = {
    create?: XOR<PostCreateWithoutSharesInput, PostUncheckedCreateWithoutSharesInput>
    connectOrCreate?: PostCreateOrConnectWithoutSharesInput
    upsert?: PostUpsertWithoutSharesInput
    disconnect?: PostWhereInput | boolean
    delete?: PostWhereInput | boolean
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutSharesInput, PostUpdateWithoutSharesInput>, PostUncheckedUpdateWithoutSharesInput>
  }

  export type PostUpdateManyWithoutShareParentNestedInput = {
    create?: XOR<PostCreateWithoutShareParentInput, PostUncheckedCreateWithoutShareParentInput> | PostCreateWithoutShareParentInput[] | PostUncheckedCreateWithoutShareParentInput[]
    connectOrCreate?: PostCreateOrConnectWithoutShareParentInput | PostCreateOrConnectWithoutShareParentInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutShareParentInput | PostUpsertWithWhereUniqueWithoutShareParentInput[]
    createMany?: PostCreateManyShareParentInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutShareParentInput | PostUpdateWithWhereUniqueWithoutShareParentInput[]
    updateMany?: PostUpdateManyWithWhereWithoutShareParentInput | PostUpdateManyWithWhereWithoutShareParentInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type CommunityUpdateOneWithoutPostsNestedInput = {
    create?: XOR<CommunityCreateWithoutPostsInput, CommunityUncheckedCreateWithoutPostsInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutPostsInput
    upsert?: CommunityUpsertWithoutPostsInput
    disconnect?: CommunityWhereInput | boolean
    delete?: CommunityWhereInput | boolean
    connect?: CommunityWhereUniqueInput
    update?: XOR<XOR<CommunityUpdateToOneWithWhereWithoutPostsInput, CommunityUpdateWithoutPostsInput>, CommunityUncheckedUpdateWithoutPostsInput>
  }

  export type MentionUpdateManyWithoutPostNestedInput = {
    create?: XOR<MentionCreateWithoutPostInput, MentionUncheckedCreateWithoutPostInput> | MentionCreateWithoutPostInput[] | MentionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: MentionCreateOrConnectWithoutPostInput | MentionCreateOrConnectWithoutPostInput[]
    upsert?: MentionUpsertWithWhereUniqueWithoutPostInput | MentionUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: MentionCreateManyPostInputEnvelope
    set?: MentionWhereUniqueInput | MentionWhereUniqueInput[]
    disconnect?: MentionWhereUniqueInput | MentionWhereUniqueInput[]
    delete?: MentionWhereUniqueInput | MentionWhereUniqueInput[]
    connect?: MentionWhereUniqueInput | MentionWhereUniqueInput[]
    update?: MentionUpdateWithWhereUniqueWithoutPostInput | MentionUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: MentionUpdateManyWithWhereWithoutPostInput | MentionUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: MentionScalarWhereInput | MentionScalarWhereInput[]
  }

  export type UserShareUpdateManyWithoutPostNestedInput = {
    create?: XOR<UserShareCreateWithoutPostInput, UserShareUncheckedCreateWithoutPostInput> | UserShareCreateWithoutPostInput[] | UserShareUncheckedCreateWithoutPostInput[]
    connectOrCreate?: UserShareCreateOrConnectWithoutPostInput | UserShareCreateOrConnectWithoutPostInput[]
    upsert?: UserShareUpsertWithWhereUniqueWithoutPostInput | UserShareUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: UserShareCreateManyPostInputEnvelope
    set?: UserShareWhereUniqueInput | UserShareWhereUniqueInput[]
    disconnect?: UserShareWhereUniqueInput | UserShareWhereUniqueInput[]
    delete?: UserShareWhereUniqueInput | UserShareWhereUniqueInput[]
    connect?: UserShareWhereUniqueInput | UserShareWhereUniqueInput[]
    update?: UserShareUpdateWithWhereUniqueWithoutPostInput | UserShareUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: UserShareUpdateManyWithWhereWithoutPostInput | UserShareUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: UserShareScalarWhereInput | UserShareScalarWhereInput[]
  }

  export type NotificationMentionUpdateManyWithoutPostNestedInput = {
    create?: XOR<NotificationMentionCreateWithoutPostInput, NotificationMentionUncheckedCreateWithoutPostInput> | NotificationMentionCreateWithoutPostInput[] | NotificationMentionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: NotificationMentionCreateOrConnectWithoutPostInput | NotificationMentionCreateOrConnectWithoutPostInput[]
    upsert?: NotificationMentionUpsertWithWhereUniqueWithoutPostInput | NotificationMentionUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: NotificationMentionCreateManyPostInputEnvelope
    set?: NotificationMentionWhereUniqueInput | NotificationMentionWhereUniqueInput[]
    disconnect?: NotificationMentionWhereUniqueInput | NotificationMentionWhereUniqueInput[]
    delete?: NotificationMentionWhereUniqueInput | NotificationMentionWhereUniqueInput[]
    connect?: NotificationMentionWhereUniqueInput | NotificationMentionWhereUniqueInput[]
    update?: NotificationMentionUpdateWithWhereUniqueWithoutPostInput | NotificationMentionUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: NotificationMentionUpdateManyWithWhereWithoutPostInput | NotificationMentionUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: NotificationMentionScalarWhereInput | NotificationMentionScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput> | CommentCreateWithoutPostInput[] | CommentUncheckedCreateWithoutPostInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutPostInput | CommentCreateOrConnectWithoutPostInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutPostInput | CommentUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: CommentCreateManyPostInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutPostInput | CommentUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutPostInput | CommentUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type PostLikeUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostLikeCreateWithoutPostInput, PostLikeUncheckedCreateWithoutPostInput> | PostLikeCreateWithoutPostInput[] | PostLikeUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostLikeCreateOrConnectWithoutPostInput | PostLikeCreateOrConnectWithoutPostInput[]
    upsert?: PostLikeUpsertWithWhereUniqueWithoutPostInput | PostLikeUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostLikeCreateManyPostInputEnvelope
    set?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    disconnect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    delete?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    connect?: PostLikeWhereUniqueInput | PostLikeWhereUniqueInput[]
    update?: PostLikeUpdateWithWhereUniqueWithoutPostInput | PostLikeUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostLikeUpdateManyWithWhereWithoutPostInput | PostLikeUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostLikeScalarWhereInput | PostLikeScalarWhereInput[]
  }

  export type BookmarkUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<BookmarkCreateWithoutPostInput, BookmarkUncheckedCreateWithoutPostInput> | BookmarkCreateWithoutPostInput[] | BookmarkUncheckedCreateWithoutPostInput[]
    connectOrCreate?: BookmarkCreateOrConnectWithoutPostInput | BookmarkCreateOrConnectWithoutPostInput[]
    upsert?: BookmarkUpsertWithWhereUniqueWithoutPostInput | BookmarkUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: BookmarkCreateManyPostInputEnvelope
    set?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    disconnect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    delete?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    connect?: BookmarkWhereUniqueInput | BookmarkWhereUniqueInput[]
    update?: BookmarkUpdateWithWhereUniqueWithoutPostInput | BookmarkUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: BookmarkUpdateManyWithWhereWithoutPostInput | BookmarkUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
  }

  export type ImageUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<ImageCreateWithoutPostInput, ImageUncheckedCreateWithoutPostInput> | ImageCreateWithoutPostInput[] | ImageUncheckedCreateWithoutPostInput[]
    connectOrCreate?: ImageCreateOrConnectWithoutPostInput | ImageCreateOrConnectWithoutPostInput[]
    upsert?: ImageUpsertWithWhereUniqueWithoutPostInput | ImageUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: ImageCreateManyPostInputEnvelope
    set?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    disconnect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    delete?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    connect?: ImageWhereUniqueInput | ImageWhereUniqueInput[]
    update?: ImageUpdateWithWhereUniqueWithoutPostInput | ImageUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: ImageUpdateManyWithWhereWithoutPostInput | ImageUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: ImageScalarWhereInput | ImageScalarWhereInput[]
  }

  export type PostTagUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<PostTagCreateWithoutPostInput, PostTagUncheckedCreateWithoutPostInput> | PostTagCreateWithoutPostInput[] | PostTagUncheckedCreateWithoutPostInput[]
    connectOrCreate?: PostTagCreateOrConnectWithoutPostInput | PostTagCreateOrConnectWithoutPostInput[]
    upsert?: PostTagUpsertWithWhereUniqueWithoutPostInput | PostTagUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: PostTagCreateManyPostInputEnvelope
    set?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[]
    disconnect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[]
    delete?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[]
    connect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[]
    update?: PostTagUpdateWithWhereUniqueWithoutPostInput | PostTagUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: PostTagUpdateManyWithWhereWithoutPostInput | PostTagUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: PostTagScalarWhereInput | PostTagScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutShareParentNestedInput = {
    create?: XOR<PostCreateWithoutShareParentInput, PostUncheckedCreateWithoutShareParentInput> | PostCreateWithoutShareParentInput[] | PostUncheckedCreateWithoutShareParentInput[]
    connectOrCreate?: PostCreateOrConnectWithoutShareParentInput | PostCreateOrConnectWithoutShareParentInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutShareParentInput | PostUpsertWithWhereUniqueWithoutShareParentInput[]
    createMany?: PostCreateManyShareParentInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutShareParentInput | PostUpdateWithWhereUniqueWithoutShareParentInput[]
    updateMany?: PostUpdateManyWithWhereWithoutShareParentInput | PostUpdateManyWithWhereWithoutShareParentInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type MentionUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<MentionCreateWithoutPostInput, MentionUncheckedCreateWithoutPostInput> | MentionCreateWithoutPostInput[] | MentionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: MentionCreateOrConnectWithoutPostInput | MentionCreateOrConnectWithoutPostInput[]
    upsert?: MentionUpsertWithWhereUniqueWithoutPostInput | MentionUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: MentionCreateManyPostInputEnvelope
    set?: MentionWhereUniqueInput | MentionWhereUniqueInput[]
    disconnect?: MentionWhereUniqueInput | MentionWhereUniqueInput[]
    delete?: MentionWhereUniqueInput | MentionWhereUniqueInput[]
    connect?: MentionWhereUniqueInput | MentionWhereUniqueInput[]
    update?: MentionUpdateWithWhereUniqueWithoutPostInput | MentionUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: MentionUpdateManyWithWhereWithoutPostInput | MentionUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: MentionScalarWhereInput | MentionScalarWhereInput[]
  }

  export type UserShareUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<UserShareCreateWithoutPostInput, UserShareUncheckedCreateWithoutPostInput> | UserShareCreateWithoutPostInput[] | UserShareUncheckedCreateWithoutPostInput[]
    connectOrCreate?: UserShareCreateOrConnectWithoutPostInput | UserShareCreateOrConnectWithoutPostInput[]
    upsert?: UserShareUpsertWithWhereUniqueWithoutPostInput | UserShareUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: UserShareCreateManyPostInputEnvelope
    set?: UserShareWhereUniqueInput | UserShareWhereUniqueInput[]
    disconnect?: UserShareWhereUniqueInput | UserShareWhereUniqueInput[]
    delete?: UserShareWhereUniqueInput | UserShareWhereUniqueInput[]
    connect?: UserShareWhereUniqueInput | UserShareWhereUniqueInput[]
    update?: UserShareUpdateWithWhereUniqueWithoutPostInput | UserShareUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: UserShareUpdateManyWithWhereWithoutPostInput | UserShareUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: UserShareScalarWhereInput | UserShareScalarWhereInput[]
  }

  export type NotificationMentionUncheckedUpdateManyWithoutPostNestedInput = {
    create?: XOR<NotificationMentionCreateWithoutPostInput, NotificationMentionUncheckedCreateWithoutPostInput> | NotificationMentionCreateWithoutPostInput[] | NotificationMentionUncheckedCreateWithoutPostInput[]
    connectOrCreate?: NotificationMentionCreateOrConnectWithoutPostInput | NotificationMentionCreateOrConnectWithoutPostInput[]
    upsert?: NotificationMentionUpsertWithWhereUniqueWithoutPostInput | NotificationMentionUpsertWithWhereUniqueWithoutPostInput[]
    createMany?: NotificationMentionCreateManyPostInputEnvelope
    set?: NotificationMentionWhereUniqueInput | NotificationMentionWhereUniqueInput[]
    disconnect?: NotificationMentionWhereUniqueInput | NotificationMentionWhereUniqueInput[]
    delete?: NotificationMentionWhereUniqueInput | NotificationMentionWhereUniqueInput[]
    connect?: NotificationMentionWhereUniqueInput | NotificationMentionWhereUniqueInput[]
    update?: NotificationMentionUpdateWithWhereUniqueWithoutPostInput | NotificationMentionUpdateWithWhereUniqueWithoutPostInput[]
    updateMany?: NotificationMentionUpdateManyWithWhereWithoutPostInput | NotificationMentionUpdateManyWithWhereWithoutPostInput[]
    deleteMany?: NotificationMentionScalarWhereInput | NotificationMentionScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutMentionsInput = {
    create?: XOR<UserCreateWithoutMentionsInput, UserUncheckedCreateWithoutMentionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMentionsInput
    connect?: UserWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutMentionsInput = {
    create?: XOR<PostCreateWithoutMentionsInput, PostUncheckedCreateWithoutMentionsInput>
    connectOrCreate?: PostCreateOrConnectWithoutMentionsInput
    connect?: PostWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutMentionsNestedInput = {
    create?: XOR<UserCreateWithoutMentionsInput, UserUncheckedCreateWithoutMentionsInput>
    connectOrCreate?: UserCreateOrConnectWithoutMentionsInput
    upsert?: UserUpsertWithoutMentionsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutMentionsInput, UserUpdateWithoutMentionsInput>, UserUncheckedUpdateWithoutMentionsInput>
  }

  export type PostUpdateOneRequiredWithoutMentionsNestedInput = {
    create?: XOR<PostCreateWithoutMentionsInput, PostUncheckedCreateWithoutMentionsInput>
    connectOrCreate?: PostCreateOrConnectWithoutMentionsInput
    upsert?: PostUpsertWithoutMentionsInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutMentionsInput, PostUpdateWithoutMentionsInput>, PostUncheckedUpdateWithoutMentionsInput>
  }

  export type UserCreateNestedOneWithoutNotificationsInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    connect?: UserWhereUniqueInput
  }

  export type NotificationMentionCreateNestedOneWithoutNotificationInput = {
    create?: XOR<NotificationMentionCreateWithoutNotificationInput, NotificationMentionUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: NotificationMentionCreateOrConnectWithoutNotificationInput
    connect?: NotificationMentionWhereUniqueInput
  }

  export type NotificationStartFollowCreateNestedOneWithoutNotificationInput = {
    create?: XOR<NotificationStartFollowCreateWithoutNotificationInput, NotificationStartFollowUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: NotificationStartFollowCreateOrConnectWithoutNotificationInput
    connect?: NotificationStartFollowWhereUniqueInput
  }

  export type NotificationCommunityNewMemberCreateNestedOneWithoutNotificationInput = {
    create?: XOR<NotificationCommunityNewMemberCreateWithoutNotificationInput, NotificationCommunityNewMemberUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: NotificationCommunityNewMemberCreateOrConnectWithoutNotificationInput
    connect?: NotificationCommunityNewMemberWhereUniqueInput
  }

  export type NotificationPostCommentCreateNestedOneWithoutNotificationInput = {
    create?: XOR<NotificationPostCommentCreateWithoutNotificationInput, NotificationPostCommentUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: NotificationPostCommentCreateOrConnectWithoutNotificationInput
    connect?: NotificationPostCommentWhereUniqueInput
  }

  export type NotificationCommentReplyCreateNestedOneWithoutNotificationInput = {
    create?: XOR<NotificationCommentReplyCreateWithoutNotificationInput, NotificationCommentReplyUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: NotificationCommentReplyCreateOrConnectWithoutNotificationInput
    connect?: NotificationCommentReplyWhereUniqueInput
  }

  export type NotificationMentionUncheckedCreateNestedOneWithoutNotificationInput = {
    create?: XOR<NotificationMentionCreateWithoutNotificationInput, NotificationMentionUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: NotificationMentionCreateOrConnectWithoutNotificationInput
    connect?: NotificationMentionWhereUniqueInput
  }

  export type NotificationStartFollowUncheckedCreateNestedOneWithoutNotificationInput = {
    create?: XOR<NotificationStartFollowCreateWithoutNotificationInput, NotificationStartFollowUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: NotificationStartFollowCreateOrConnectWithoutNotificationInput
    connect?: NotificationStartFollowWhereUniqueInput
  }

  export type NotificationCommunityNewMemberUncheckedCreateNestedOneWithoutNotificationInput = {
    create?: XOR<NotificationCommunityNewMemberCreateWithoutNotificationInput, NotificationCommunityNewMemberUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: NotificationCommunityNewMemberCreateOrConnectWithoutNotificationInput
    connect?: NotificationCommunityNewMemberWhereUniqueInput
  }

  export type NotificationPostCommentUncheckedCreateNestedOneWithoutNotificationInput = {
    create?: XOR<NotificationPostCommentCreateWithoutNotificationInput, NotificationPostCommentUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: NotificationPostCommentCreateOrConnectWithoutNotificationInput
    connect?: NotificationPostCommentWhereUniqueInput
  }

  export type NotificationCommentReplyUncheckedCreateNestedOneWithoutNotificationInput = {
    create?: XOR<NotificationCommentReplyCreateWithoutNotificationInput, NotificationCommentReplyUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: NotificationCommentReplyCreateOrConnectWithoutNotificationInput
    connect?: NotificationCommentReplyWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutNotificationsNestedInput = {
    create?: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationsInput
    upsert?: UserUpsertWithoutNotificationsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationsInput, UserUpdateWithoutNotificationsInput>, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type NotificationMentionUpdateOneWithoutNotificationNestedInput = {
    create?: XOR<NotificationMentionCreateWithoutNotificationInput, NotificationMentionUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: NotificationMentionCreateOrConnectWithoutNotificationInput
    upsert?: NotificationMentionUpsertWithoutNotificationInput
    disconnect?: NotificationMentionWhereInput | boolean
    delete?: NotificationMentionWhereInput | boolean
    connect?: NotificationMentionWhereUniqueInput
    update?: XOR<XOR<NotificationMentionUpdateToOneWithWhereWithoutNotificationInput, NotificationMentionUpdateWithoutNotificationInput>, NotificationMentionUncheckedUpdateWithoutNotificationInput>
  }

  export type NotificationStartFollowUpdateOneWithoutNotificationNestedInput = {
    create?: XOR<NotificationStartFollowCreateWithoutNotificationInput, NotificationStartFollowUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: NotificationStartFollowCreateOrConnectWithoutNotificationInput
    upsert?: NotificationStartFollowUpsertWithoutNotificationInput
    disconnect?: NotificationStartFollowWhereInput | boolean
    delete?: NotificationStartFollowWhereInput | boolean
    connect?: NotificationStartFollowWhereUniqueInput
    update?: XOR<XOR<NotificationStartFollowUpdateToOneWithWhereWithoutNotificationInput, NotificationStartFollowUpdateWithoutNotificationInput>, NotificationStartFollowUncheckedUpdateWithoutNotificationInput>
  }

  export type NotificationCommunityNewMemberUpdateOneWithoutNotificationNestedInput = {
    create?: XOR<NotificationCommunityNewMemberCreateWithoutNotificationInput, NotificationCommunityNewMemberUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: NotificationCommunityNewMemberCreateOrConnectWithoutNotificationInput
    upsert?: NotificationCommunityNewMemberUpsertWithoutNotificationInput
    disconnect?: NotificationCommunityNewMemberWhereInput | boolean
    delete?: NotificationCommunityNewMemberWhereInput | boolean
    connect?: NotificationCommunityNewMemberWhereUniqueInput
    update?: XOR<XOR<NotificationCommunityNewMemberUpdateToOneWithWhereWithoutNotificationInput, NotificationCommunityNewMemberUpdateWithoutNotificationInput>, NotificationCommunityNewMemberUncheckedUpdateWithoutNotificationInput>
  }

  export type NotificationPostCommentUpdateOneWithoutNotificationNestedInput = {
    create?: XOR<NotificationPostCommentCreateWithoutNotificationInput, NotificationPostCommentUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: NotificationPostCommentCreateOrConnectWithoutNotificationInput
    upsert?: NotificationPostCommentUpsertWithoutNotificationInput
    disconnect?: NotificationPostCommentWhereInput | boolean
    delete?: NotificationPostCommentWhereInput | boolean
    connect?: NotificationPostCommentWhereUniqueInput
    update?: XOR<XOR<NotificationPostCommentUpdateToOneWithWhereWithoutNotificationInput, NotificationPostCommentUpdateWithoutNotificationInput>, NotificationPostCommentUncheckedUpdateWithoutNotificationInput>
  }

  export type NotificationCommentReplyUpdateOneWithoutNotificationNestedInput = {
    create?: XOR<NotificationCommentReplyCreateWithoutNotificationInput, NotificationCommentReplyUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: NotificationCommentReplyCreateOrConnectWithoutNotificationInput
    upsert?: NotificationCommentReplyUpsertWithoutNotificationInput
    disconnect?: NotificationCommentReplyWhereInput | boolean
    delete?: NotificationCommentReplyWhereInput | boolean
    connect?: NotificationCommentReplyWhereUniqueInput
    update?: XOR<XOR<NotificationCommentReplyUpdateToOneWithWhereWithoutNotificationInput, NotificationCommentReplyUpdateWithoutNotificationInput>, NotificationCommentReplyUncheckedUpdateWithoutNotificationInput>
  }

  export type NotificationMentionUncheckedUpdateOneWithoutNotificationNestedInput = {
    create?: XOR<NotificationMentionCreateWithoutNotificationInput, NotificationMentionUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: NotificationMentionCreateOrConnectWithoutNotificationInput
    upsert?: NotificationMentionUpsertWithoutNotificationInput
    disconnect?: NotificationMentionWhereInput | boolean
    delete?: NotificationMentionWhereInput | boolean
    connect?: NotificationMentionWhereUniqueInput
    update?: XOR<XOR<NotificationMentionUpdateToOneWithWhereWithoutNotificationInput, NotificationMentionUpdateWithoutNotificationInput>, NotificationMentionUncheckedUpdateWithoutNotificationInput>
  }

  export type NotificationStartFollowUncheckedUpdateOneWithoutNotificationNestedInput = {
    create?: XOR<NotificationStartFollowCreateWithoutNotificationInput, NotificationStartFollowUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: NotificationStartFollowCreateOrConnectWithoutNotificationInput
    upsert?: NotificationStartFollowUpsertWithoutNotificationInput
    disconnect?: NotificationStartFollowWhereInput | boolean
    delete?: NotificationStartFollowWhereInput | boolean
    connect?: NotificationStartFollowWhereUniqueInput
    update?: XOR<XOR<NotificationStartFollowUpdateToOneWithWhereWithoutNotificationInput, NotificationStartFollowUpdateWithoutNotificationInput>, NotificationStartFollowUncheckedUpdateWithoutNotificationInput>
  }

  export type NotificationCommunityNewMemberUncheckedUpdateOneWithoutNotificationNestedInput = {
    create?: XOR<NotificationCommunityNewMemberCreateWithoutNotificationInput, NotificationCommunityNewMemberUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: NotificationCommunityNewMemberCreateOrConnectWithoutNotificationInput
    upsert?: NotificationCommunityNewMemberUpsertWithoutNotificationInput
    disconnect?: NotificationCommunityNewMemberWhereInput | boolean
    delete?: NotificationCommunityNewMemberWhereInput | boolean
    connect?: NotificationCommunityNewMemberWhereUniqueInput
    update?: XOR<XOR<NotificationCommunityNewMemberUpdateToOneWithWhereWithoutNotificationInput, NotificationCommunityNewMemberUpdateWithoutNotificationInput>, NotificationCommunityNewMemberUncheckedUpdateWithoutNotificationInput>
  }

  export type NotificationPostCommentUncheckedUpdateOneWithoutNotificationNestedInput = {
    create?: XOR<NotificationPostCommentCreateWithoutNotificationInput, NotificationPostCommentUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: NotificationPostCommentCreateOrConnectWithoutNotificationInput
    upsert?: NotificationPostCommentUpsertWithoutNotificationInput
    disconnect?: NotificationPostCommentWhereInput | boolean
    delete?: NotificationPostCommentWhereInput | boolean
    connect?: NotificationPostCommentWhereUniqueInput
    update?: XOR<XOR<NotificationPostCommentUpdateToOneWithWhereWithoutNotificationInput, NotificationPostCommentUpdateWithoutNotificationInput>, NotificationPostCommentUncheckedUpdateWithoutNotificationInput>
  }

  export type NotificationCommentReplyUncheckedUpdateOneWithoutNotificationNestedInput = {
    create?: XOR<NotificationCommentReplyCreateWithoutNotificationInput, NotificationCommentReplyUncheckedCreateWithoutNotificationInput>
    connectOrCreate?: NotificationCommentReplyCreateOrConnectWithoutNotificationInput
    upsert?: NotificationCommentReplyUpsertWithoutNotificationInput
    disconnect?: NotificationCommentReplyWhereInput | boolean
    delete?: NotificationCommentReplyWhereInput | boolean
    connect?: NotificationCommentReplyWhereUniqueInput
    update?: XOR<XOR<NotificationCommentReplyUpdateToOneWithWhereWithoutNotificationInput, NotificationCommentReplyUpdateWithoutNotificationInput>, NotificationCommentReplyUncheckedUpdateWithoutNotificationInput>
  }

  export type NotificationCreateNestedOneWithoutNotificationMentionInput = {
    create?: XOR<NotificationCreateWithoutNotificationMentionInput, NotificationUncheckedCreateWithoutNotificationMentionInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutNotificationMentionInput
    connect?: NotificationWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutNotificationMentionInput = {
    create?: XOR<PostCreateWithoutNotificationMentionInput, PostUncheckedCreateWithoutNotificationMentionInput>
    connectOrCreate?: PostCreateOrConnectWithoutNotificationMentionInput
    connect?: PostWhereUniqueInput
  }

  export type NotificationUpdateOneRequiredWithoutNotificationMentionNestedInput = {
    create?: XOR<NotificationCreateWithoutNotificationMentionInput, NotificationUncheckedCreateWithoutNotificationMentionInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutNotificationMentionInput
    upsert?: NotificationUpsertWithoutNotificationMentionInput
    connect?: NotificationWhereUniqueInput
    update?: XOR<XOR<NotificationUpdateToOneWithWhereWithoutNotificationMentionInput, NotificationUpdateWithoutNotificationMentionInput>, NotificationUncheckedUpdateWithoutNotificationMentionInput>
  }

  export type PostUpdateOneRequiredWithoutNotificationMentionNestedInput = {
    create?: XOR<PostCreateWithoutNotificationMentionInput, PostUncheckedCreateWithoutNotificationMentionInput>
    connectOrCreate?: PostCreateOrConnectWithoutNotificationMentionInput
    upsert?: PostUpsertWithoutNotificationMentionInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutNotificationMentionInput, PostUpdateWithoutNotificationMentionInput>, PostUncheckedUpdateWithoutNotificationMentionInput>
  }

  export type NotificationCreateNestedOneWithoutNotificationStartFollowInput = {
    create?: XOR<NotificationCreateWithoutNotificationStartFollowInput, NotificationUncheckedCreateWithoutNotificationStartFollowInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutNotificationStartFollowInput
    connect?: NotificationWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutNotificationStartFollowInput = {
    create?: XOR<UserCreateWithoutNotificationStartFollowInput, UserUncheckedCreateWithoutNotificationStartFollowInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationStartFollowInput
    connect?: UserWhereUniqueInput
  }

  export type NotificationUpdateOneRequiredWithoutNotificationStartFollowNestedInput = {
    create?: XOR<NotificationCreateWithoutNotificationStartFollowInput, NotificationUncheckedCreateWithoutNotificationStartFollowInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutNotificationStartFollowInput
    upsert?: NotificationUpsertWithoutNotificationStartFollowInput
    connect?: NotificationWhereUniqueInput
    update?: XOR<XOR<NotificationUpdateToOneWithWhereWithoutNotificationStartFollowInput, NotificationUpdateWithoutNotificationStartFollowInput>, NotificationUncheckedUpdateWithoutNotificationStartFollowInput>
  }

  export type UserUpdateOneRequiredWithoutNotificationStartFollowNestedInput = {
    create?: XOR<UserCreateWithoutNotificationStartFollowInput, UserUncheckedCreateWithoutNotificationStartFollowInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationStartFollowInput
    upsert?: UserUpsertWithoutNotificationStartFollowInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationStartFollowInput, UserUpdateWithoutNotificationStartFollowInput>, UserUncheckedUpdateWithoutNotificationStartFollowInput>
  }

  export type NotificationCreateNestedOneWithoutNotificationCommunityNewMemberInput = {
    create?: XOR<NotificationCreateWithoutNotificationCommunityNewMemberInput, NotificationUncheckedCreateWithoutNotificationCommunityNewMemberInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutNotificationCommunityNewMemberInput
    connect?: NotificationWhereUniqueInput
  }

  export type CommunityCreateNestedOneWithoutNotificationCommunityNewMemberInput = {
    create?: XOR<CommunityCreateWithoutNotificationCommunityNewMemberInput, CommunityUncheckedCreateWithoutNotificationCommunityNewMemberInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutNotificationCommunityNewMemberInput
    connect?: CommunityWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutNotificationCommunityNewMemberInput = {
    create?: XOR<UserCreateWithoutNotificationCommunityNewMemberInput, UserUncheckedCreateWithoutNotificationCommunityNewMemberInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationCommunityNewMemberInput
    connect?: UserWhereUniqueInput
  }

  export type NotificationUpdateOneRequiredWithoutNotificationCommunityNewMemberNestedInput = {
    create?: XOR<NotificationCreateWithoutNotificationCommunityNewMemberInput, NotificationUncheckedCreateWithoutNotificationCommunityNewMemberInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutNotificationCommunityNewMemberInput
    upsert?: NotificationUpsertWithoutNotificationCommunityNewMemberInput
    connect?: NotificationWhereUniqueInput
    update?: XOR<XOR<NotificationUpdateToOneWithWhereWithoutNotificationCommunityNewMemberInput, NotificationUpdateWithoutNotificationCommunityNewMemberInput>, NotificationUncheckedUpdateWithoutNotificationCommunityNewMemberInput>
  }

  export type CommunityUpdateOneRequiredWithoutNotificationCommunityNewMemberNestedInput = {
    create?: XOR<CommunityCreateWithoutNotificationCommunityNewMemberInput, CommunityUncheckedCreateWithoutNotificationCommunityNewMemberInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutNotificationCommunityNewMemberInput
    upsert?: CommunityUpsertWithoutNotificationCommunityNewMemberInput
    connect?: CommunityWhereUniqueInput
    update?: XOR<XOR<CommunityUpdateToOneWithWhereWithoutNotificationCommunityNewMemberInput, CommunityUpdateWithoutNotificationCommunityNewMemberInput>, CommunityUncheckedUpdateWithoutNotificationCommunityNewMemberInput>
  }

  export type UserUpdateOneRequiredWithoutNotificationCommunityNewMemberNestedInput = {
    create?: XOR<UserCreateWithoutNotificationCommunityNewMemberInput, UserUncheckedCreateWithoutNotificationCommunityNewMemberInput>
    connectOrCreate?: UserCreateOrConnectWithoutNotificationCommunityNewMemberInput
    upsert?: UserUpsertWithoutNotificationCommunityNewMemberInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutNotificationCommunityNewMemberInput, UserUpdateWithoutNotificationCommunityNewMemberInput>, UserUncheckedUpdateWithoutNotificationCommunityNewMemberInput>
  }

  export type NotificationCreateNestedOneWithoutNotificationPostCommentInput = {
    create?: XOR<NotificationCreateWithoutNotificationPostCommentInput, NotificationUncheckedCreateWithoutNotificationPostCommentInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutNotificationPostCommentInput
    connect?: NotificationWhereUniqueInput
  }

  export type CommentCreateNestedOneWithoutNotificationPostCommentInput = {
    create?: XOR<CommentCreateWithoutNotificationPostCommentInput, CommentUncheckedCreateWithoutNotificationPostCommentInput>
    connectOrCreate?: CommentCreateOrConnectWithoutNotificationPostCommentInput
    connect?: CommentWhereUniqueInput
  }

  export type NotificationUpdateOneRequiredWithoutNotificationPostCommentNestedInput = {
    create?: XOR<NotificationCreateWithoutNotificationPostCommentInput, NotificationUncheckedCreateWithoutNotificationPostCommentInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutNotificationPostCommentInput
    upsert?: NotificationUpsertWithoutNotificationPostCommentInput
    connect?: NotificationWhereUniqueInput
    update?: XOR<XOR<NotificationUpdateToOneWithWhereWithoutNotificationPostCommentInput, NotificationUpdateWithoutNotificationPostCommentInput>, NotificationUncheckedUpdateWithoutNotificationPostCommentInput>
  }

  export type CommentUpdateOneRequiredWithoutNotificationPostCommentNestedInput = {
    create?: XOR<CommentCreateWithoutNotificationPostCommentInput, CommentUncheckedCreateWithoutNotificationPostCommentInput>
    connectOrCreate?: CommentCreateOrConnectWithoutNotificationPostCommentInput
    upsert?: CommentUpsertWithoutNotificationPostCommentInput
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutNotificationPostCommentInput, CommentUpdateWithoutNotificationPostCommentInput>, CommentUncheckedUpdateWithoutNotificationPostCommentInput>
  }

  export type NotificationCreateNestedOneWithoutNotificationCommentReplyInput = {
    create?: XOR<NotificationCreateWithoutNotificationCommentReplyInput, NotificationUncheckedCreateWithoutNotificationCommentReplyInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutNotificationCommentReplyInput
    connect?: NotificationWhereUniqueInput
  }

  export type CommentCreateNestedOneWithoutNotificationCommentReplyInput = {
    create?: XOR<CommentCreateWithoutNotificationCommentReplyInput, CommentUncheckedCreateWithoutNotificationCommentReplyInput>
    connectOrCreate?: CommentCreateOrConnectWithoutNotificationCommentReplyInput
    connect?: CommentWhereUniqueInput
  }

  export type NotificationUpdateOneRequiredWithoutNotificationCommentReplyNestedInput = {
    create?: XOR<NotificationCreateWithoutNotificationCommentReplyInput, NotificationUncheckedCreateWithoutNotificationCommentReplyInput>
    connectOrCreate?: NotificationCreateOrConnectWithoutNotificationCommentReplyInput
    upsert?: NotificationUpsertWithoutNotificationCommentReplyInput
    connect?: NotificationWhereUniqueInput
    update?: XOR<XOR<NotificationUpdateToOneWithWhereWithoutNotificationCommentReplyInput, NotificationUpdateWithoutNotificationCommentReplyInput>, NotificationUncheckedUpdateWithoutNotificationCommentReplyInput>
  }

  export type CommentUpdateOneRequiredWithoutNotificationCommentReplyNestedInput = {
    create?: XOR<CommentCreateWithoutNotificationCommentReplyInput, CommentUncheckedCreateWithoutNotificationCommentReplyInput>
    connectOrCreate?: CommentCreateOrConnectWithoutNotificationCommentReplyInput
    upsert?: CommentUpsertWithoutNotificationCommentReplyInput
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutNotificationCommentReplyInput, CommentUpdateWithoutNotificationCommentReplyInput>, CommentUncheckedUpdateWithoutNotificationCommentReplyInput>
  }

  export type UserCreateNestedOneWithoutSharedPostInput = {
    create?: XOR<UserCreateWithoutSharedPostInput, UserUncheckedCreateWithoutSharedPostInput>
    connectOrCreate?: UserCreateOrConnectWithoutSharedPostInput
    connect?: UserWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutSharedByInput = {
    create?: XOR<PostCreateWithoutSharedByInput, PostUncheckedCreateWithoutSharedByInput>
    connectOrCreate?: PostCreateOrConnectWithoutSharedByInput
    connect?: PostWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutSharedPostNestedInput = {
    create?: XOR<UserCreateWithoutSharedPostInput, UserUncheckedCreateWithoutSharedPostInput>
    connectOrCreate?: UserCreateOrConnectWithoutSharedPostInput
    upsert?: UserUpsertWithoutSharedPostInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSharedPostInput, UserUpdateWithoutSharedPostInput>, UserUncheckedUpdateWithoutSharedPostInput>
  }

  export type PostUpdateOneRequiredWithoutSharedByNestedInput = {
    create?: XOR<PostCreateWithoutSharedByInput, PostUncheckedCreateWithoutSharedByInput>
    connectOrCreate?: PostCreateOrConnectWithoutSharedByInput
    upsert?: PostUpsertWithoutSharedByInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutSharedByInput, PostUpdateWithoutSharedByInput>, PostUncheckedUpdateWithoutSharedByInput>
  }

  export type PostCreateNestedOneWithoutImagesInput = {
    create?: XOR<PostCreateWithoutImagesInput, PostUncheckedCreateWithoutImagesInput>
    connectOrCreate?: PostCreateOrConnectWithoutImagesInput
    connect?: PostWhereUniqueInput
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type PostUpdateOneRequiredWithoutImagesNestedInput = {
    create?: XOR<PostCreateWithoutImagesInput, PostUncheckedCreateWithoutImagesInput>
    connectOrCreate?: PostCreateOrConnectWithoutImagesInput
    upsert?: PostUpsertWithoutImagesInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutImagesInput, PostUpdateWithoutImagesInput>, PostUncheckedUpdateWithoutImagesInput>
  }

  export type UserCreateNestedOneWithoutCommentsInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutCommentsInput = {
    create?: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: PostCreateOrConnectWithoutCommentsInput
    connect?: PostWhereUniqueInput
  }

  export type CommentLikeCreateNestedManyWithoutCommentInput = {
    create?: XOR<CommentLikeCreateWithoutCommentInput, CommentLikeUncheckedCreateWithoutCommentInput> | CommentLikeCreateWithoutCommentInput[] | CommentLikeUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutCommentInput | CommentLikeCreateOrConnectWithoutCommentInput[]
    createMany?: CommentLikeCreateManyCommentInputEnvelope
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
  }

  export type CommentCreateNestedOneWithoutChildrenInput = {
    create?: XOR<CommentCreateWithoutChildrenInput, CommentUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CommentCreateOrConnectWithoutChildrenInput
    connect?: CommentWhereUniqueInput
  }

  export type CommentCreateNestedManyWithoutParentInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    createMany?: CommentCreateManyParentInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type NotificationPostCommentCreateNestedManyWithoutCommentInput = {
    create?: XOR<NotificationPostCommentCreateWithoutCommentInput, NotificationPostCommentUncheckedCreateWithoutCommentInput> | NotificationPostCommentCreateWithoutCommentInput[] | NotificationPostCommentUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: NotificationPostCommentCreateOrConnectWithoutCommentInput | NotificationPostCommentCreateOrConnectWithoutCommentInput[]
    createMany?: NotificationPostCommentCreateManyCommentInputEnvelope
    connect?: NotificationPostCommentWhereUniqueInput | NotificationPostCommentWhereUniqueInput[]
  }

  export type NotificationCommentReplyCreateNestedManyWithoutCommentInput = {
    create?: XOR<NotificationCommentReplyCreateWithoutCommentInput, NotificationCommentReplyUncheckedCreateWithoutCommentInput> | NotificationCommentReplyCreateWithoutCommentInput[] | NotificationCommentReplyUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: NotificationCommentReplyCreateOrConnectWithoutCommentInput | NotificationCommentReplyCreateOrConnectWithoutCommentInput[]
    createMany?: NotificationCommentReplyCreateManyCommentInputEnvelope
    connect?: NotificationCommentReplyWhereUniqueInput | NotificationCommentReplyWhereUniqueInput[]
  }

  export type CommentLikeUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<CommentLikeCreateWithoutCommentInput, CommentLikeUncheckedCreateWithoutCommentInput> | CommentLikeCreateWithoutCommentInput[] | CommentLikeUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutCommentInput | CommentLikeCreateOrConnectWithoutCommentInput[]
    createMany?: CommentLikeCreateManyCommentInputEnvelope
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
  }

  export type CommentUncheckedCreateNestedManyWithoutParentInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    createMany?: CommentCreateManyParentInputEnvelope
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
  }

  export type NotificationPostCommentUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<NotificationPostCommentCreateWithoutCommentInput, NotificationPostCommentUncheckedCreateWithoutCommentInput> | NotificationPostCommentCreateWithoutCommentInput[] | NotificationPostCommentUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: NotificationPostCommentCreateOrConnectWithoutCommentInput | NotificationPostCommentCreateOrConnectWithoutCommentInput[]
    createMany?: NotificationPostCommentCreateManyCommentInputEnvelope
    connect?: NotificationPostCommentWhereUniqueInput | NotificationPostCommentWhereUniqueInput[]
  }

  export type NotificationCommentReplyUncheckedCreateNestedManyWithoutCommentInput = {
    create?: XOR<NotificationCommentReplyCreateWithoutCommentInput, NotificationCommentReplyUncheckedCreateWithoutCommentInput> | NotificationCommentReplyCreateWithoutCommentInput[] | NotificationCommentReplyUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: NotificationCommentReplyCreateOrConnectWithoutCommentInput | NotificationCommentReplyCreateOrConnectWithoutCommentInput[]
    createMany?: NotificationCommentReplyCreateManyCommentInputEnvelope
    connect?: NotificationCommentReplyWhereUniqueInput | NotificationCommentReplyWhereUniqueInput[]
  }

  export type UserUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommentsInput
    upsert?: UserUpsertWithoutCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommentsInput, UserUpdateWithoutCommentsInput>, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type PostUpdateOneRequiredWithoutCommentsNestedInput = {
    create?: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
    connectOrCreate?: PostCreateOrConnectWithoutCommentsInput
    upsert?: PostUpsertWithoutCommentsInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutCommentsInput, PostUpdateWithoutCommentsInput>, PostUncheckedUpdateWithoutCommentsInput>
  }

  export type CommentLikeUpdateManyWithoutCommentNestedInput = {
    create?: XOR<CommentLikeCreateWithoutCommentInput, CommentLikeUncheckedCreateWithoutCommentInput> | CommentLikeCreateWithoutCommentInput[] | CommentLikeUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutCommentInput | CommentLikeCreateOrConnectWithoutCommentInput[]
    upsert?: CommentLikeUpsertWithWhereUniqueWithoutCommentInput | CommentLikeUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: CommentLikeCreateManyCommentInputEnvelope
    set?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    disconnect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    delete?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    update?: CommentLikeUpdateWithWhereUniqueWithoutCommentInput | CommentLikeUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: CommentLikeUpdateManyWithWhereWithoutCommentInput | CommentLikeUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: CommentLikeScalarWhereInput | CommentLikeScalarWhereInput[]
  }

  export type CommentUpdateOneWithoutChildrenNestedInput = {
    create?: XOR<CommentCreateWithoutChildrenInput, CommentUncheckedCreateWithoutChildrenInput>
    connectOrCreate?: CommentCreateOrConnectWithoutChildrenInput
    upsert?: CommentUpsertWithoutChildrenInput
    disconnect?: CommentWhereInput | boolean
    delete?: CommentWhereInput | boolean
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutChildrenInput, CommentUpdateWithoutChildrenInput>, CommentUncheckedUpdateWithoutChildrenInput>
  }

  export type CommentUpdateManyWithoutParentNestedInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutParentInput | CommentUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CommentCreateManyParentInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutParentInput | CommentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutParentInput | CommentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type NotificationPostCommentUpdateManyWithoutCommentNestedInput = {
    create?: XOR<NotificationPostCommentCreateWithoutCommentInput, NotificationPostCommentUncheckedCreateWithoutCommentInput> | NotificationPostCommentCreateWithoutCommentInput[] | NotificationPostCommentUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: NotificationPostCommentCreateOrConnectWithoutCommentInput | NotificationPostCommentCreateOrConnectWithoutCommentInput[]
    upsert?: NotificationPostCommentUpsertWithWhereUniqueWithoutCommentInput | NotificationPostCommentUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: NotificationPostCommentCreateManyCommentInputEnvelope
    set?: NotificationPostCommentWhereUniqueInput | NotificationPostCommentWhereUniqueInput[]
    disconnect?: NotificationPostCommentWhereUniqueInput | NotificationPostCommentWhereUniqueInput[]
    delete?: NotificationPostCommentWhereUniqueInput | NotificationPostCommentWhereUniqueInput[]
    connect?: NotificationPostCommentWhereUniqueInput | NotificationPostCommentWhereUniqueInput[]
    update?: NotificationPostCommentUpdateWithWhereUniqueWithoutCommentInput | NotificationPostCommentUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: NotificationPostCommentUpdateManyWithWhereWithoutCommentInput | NotificationPostCommentUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: NotificationPostCommentScalarWhereInput | NotificationPostCommentScalarWhereInput[]
  }

  export type NotificationCommentReplyUpdateManyWithoutCommentNestedInput = {
    create?: XOR<NotificationCommentReplyCreateWithoutCommentInput, NotificationCommentReplyUncheckedCreateWithoutCommentInput> | NotificationCommentReplyCreateWithoutCommentInput[] | NotificationCommentReplyUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: NotificationCommentReplyCreateOrConnectWithoutCommentInput | NotificationCommentReplyCreateOrConnectWithoutCommentInput[]
    upsert?: NotificationCommentReplyUpsertWithWhereUniqueWithoutCommentInput | NotificationCommentReplyUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: NotificationCommentReplyCreateManyCommentInputEnvelope
    set?: NotificationCommentReplyWhereUniqueInput | NotificationCommentReplyWhereUniqueInput[]
    disconnect?: NotificationCommentReplyWhereUniqueInput | NotificationCommentReplyWhereUniqueInput[]
    delete?: NotificationCommentReplyWhereUniqueInput | NotificationCommentReplyWhereUniqueInput[]
    connect?: NotificationCommentReplyWhereUniqueInput | NotificationCommentReplyWhereUniqueInput[]
    update?: NotificationCommentReplyUpdateWithWhereUniqueWithoutCommentInput | NotificationCommentReplyUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: NotificationCommentReplyUpdateManyWithWhereWithoutCommentInput | NotificationCommentReplyUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: NotificationCommentReplyScalarWhereInput | NotificationCommentReplyScalarWhereInput[]
  }

  export type CommentLikeUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<CommentLikeCreateWithoutCommentInput, CommentLikeUncheckedCreateWithoutCommentInput> | CommentLikeCreateWithoutCommentInput[] | CommentLikeUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: CommentLikeCreateOrConnectWithoutCommentInput | CommentLikeCreateOrConnectWithoutCommentInput[]
    upsert?: CommentLikeUpsertWithWhereUniqueWithoutCommentInput | CommentLikeUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: CommentLikeCreateManyCommentInputEnvelope
    set?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    disconnect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    delete?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    connect?: CommentLikeWhereUniqueInput | CommentLikeWhereUniqueInput[]
    update?: CommentLikeUpdateWithWhereUniqueWithoutCommentInput | CommentLikeUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: CommentLikeUpdateManyWithWhereWithoutCommentInput | CommentLikeUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: CommentLikeScalarWhereInput | CommentLikeScalarWhereInput[]
  }

  export type CommentUncheckedUpdateManyWithoutParentNestedInput = {
    create?: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput> | CommentCreateWithoutParentInput[] | CommentUncheckedCreateWithoutParentInput[]
    connectOrCreate?: CommentCreateOrConnectWithoutParentInput | CommentCreateOrConnectWithoutParentInput[]
    upsert?: CommentUpsertWithWhereUniqueWithoutParentInput | CommentUpsertWithWhereUniqueWithoutParentInput[]
    createMany?: CommentCreateManyParentInputEnvelope
    set?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    disconnect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    delete?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    connect?: CommentWhereUniqueInput | CommentWhereUniqueInput[]
    update?: CommentUpdateWithWhereUniqueWithoutParentInput | CommentUpdateWithWhereUniqueWithoutParentInput[]
    updateMany?: CommentUpdateManyWithWhereWithoutParentInput | CommentUpdateManyWithWhereWithoutParentInput[]
    deleteMany?: CommentScalarWhereInput | CommentScalarWhereInput[]
  }

  export type NotificationPostCommentUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<NotificationPostCommentCreateWithoutCommentInput, NotificationPostCommentUncheckedCreateWithoutCommentInput> | NotificationPostCommentCreateWithoutCommentInput[] | NotificationPostCommentUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: NotificationPostCommentCreateOrConnectWithoutCommentInput | NotificationPostCommentCreateOrConnectWithoutCommentInput[]
    upsert?: NotificationPostCommentUpsertWithWhereUniqueWithoutCommentInput | NotificationPostCommentUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: NotificationPostCommentCreateManyCommentInputEnvelope
    set?: NotificationPostCommentWhereUniqueInput | NotificationPostCommentWhereUniqueInput[]
    disconnect?: NotificationPostCommentWhereUniqueInput | NotificationPostCommentWhereUniqueInput[]
    delete?: NotificationPostCommentWhereUniqueInput | NotificationPostCommentWhereUniqueInput[]
    connect?: NotificationPostCommentWhereUniqueInput | NotificationPostCommentWhereUniqueInput[]
    update?: NotificationPostCommentUpdateWithWhereUniqueWithoutCommentInput | NotificationPostCommentUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: NotificationPostCommentUpdateManyWithWhereWithoutCommentInput | NotificationPostCommentUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: NotificationPostCommentScalarWhereInput | NotificationPostCommentScalarWhereInput[]
  }

  export type NotificationCommentReplyUncheckedUpdateManyWithoutCommentNestedInput = {
    create?: XOR<NotificationCommentReplyCreateWithoutCommentInput, NotificationCommentReplyUncheckedCreateWithoutCommentInput> | NotificationCommentReplyCreateWithoutCommentInput[] | NotificationCommentReplyUncheckedCreateWithoutCommentInput[]
    connectOrCreate?: NotificationCommentReplyCreateOrConnectWithoutCommentInput | NotificationCommentReplyCreateOrConnectWithoutCommentInput[]
    upsert?: NotificationCommentReplyUpsertWithWhereUniqueWithoutCommentInput | NotificationCommentReplyUpsertWithWhereUniqueWithoutCommentInput[]
    createMany?: NotificationCommentReplyCreateManyCommentInputEnvelope
    set?: NotificationCommentReplyWhereUniqueInput | NotificationCommentReplyWhereUniqueInput[]
    disconnect?: NotificationCommentReplyWhereUniqueInput | NotificationCommentReplyWhereUniqueInput[]
    delete?: NotificationCommentReplyWhereUniqueInput | NotificationCommentReplyWhereUniqueInput[]
    connect?: NotificationCommentReplyWhereUniqueInput | NotificationCommentReplyWhereUniqueInput[]
    update?: NotificationCommentReplyUpdateWithWhereUniqueWithoutCommentInput | NotificationCommentReplyUpdateWithWhereUniqueWithoutCommentInput[]
    updateMany?: NotificationCommentReplyUpdateManyWithWhereWithoutCommentInput | NotificationCommentReplyUpdateManyWithWhereWithoutCommentInput[]
    deleteMany?: NotificationCommentReplyScalarWhereInput | NotificationCommentReplyScalarWhereInput[]
  }

  export type UserCreateNestedOneWithoutLikedPostsInput = {
    create?: XOR<UserCreateWithoutLikedPostsInput, UserUncheckedCreateWithoutLikedPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikedPostsInput
    connect?: UserWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutLikesInput = {
    create?: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
    connectOrCreate?: PostCreateOrConnectWithoutLikesInput
    connect?: PostWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutLikedPostsNestedInput = {
    create?: XOR<UserCreateWithoutLikedPostsInput, UserUncheckedCreateWithoutLikedPostsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikedPostsInput
    upsert?: UserUpsertWithoutLikedPostsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLikedPostsInput, UserUpdateWithoutLikedPostsInput>, UserUncheckedUpdateWithoutLikedPostsInput>
  }

  export type PostUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
    connectOrCreate?: PostCreateOrConnectWithoutLikesInput
    upsert?: PostUpsertWithoutLikesInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutLikesInput, PostUpdateWithoutLikesInput>, PostUncheckedUpdateWithoutLikesInput>
  }

  export type UserCreateNestedOneWithoutLikedCommentsInput = {
    create?: XOR<UserCreateWithoutLikedCommentsInput, UserUncheckedCreateWithoutLikedCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikedCommentsInput
    connect?: UserWhereUniqueInput
  }

  export type CommentCreateNestedOneWithoutLikesInput = {
    create?: XOR<CommentCreateWithoutLikesInput, CommentUncheckedCreateWithoutLikesInput>
    connectOrCreate?: CommentCreateOrConnectWithoutLikesInput
    connect?: CommentWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutLikedCommentsNestedInput = {
    create?: XOR<UserCreateWithoutLikedCommentsInput, UserUncheckedCreateWithoutLikedCommentsInput>
    connectOrCreate?: UserCreateOrConnectWithoutLikedCommentsInput
    upsert?: UserUpsertWithoutLikedCommentsInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutLikedCommentsInput, UserUpdateWithoutLikedCommentsInput>, UserUncheckedUpdateWithoutLikedCommentsInput>
  }

  export type CommentUpdateOneRequiredWithoutLikesNestedInput = {
    create?: XOR<CommentCreateWithoutLikesInput, CommentUncheckedCreateWithoutLikesInput>
    connectOrCreate?: CommentCreateOrConnectWithoutLikesInput
    upsert?: CommentUpsertWithoutLikesInput
    connect?: CommentWhereUniqueInput
    update?: XOR<XOR<CommentUpdateToOneWithWhereWithoutLikesInput, CommentUpdateWithoutLikesInput>, CommentUncheckedUpdateWithoutLikesInput>
  }

  export type UserCreateNestedOneWithoutBookmarksInput = {
    create?: XOR<UserCreateWithoutBookmarksInput, UserUncheckedCreateWithoutBookmarksInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookmarksInput
    connect?: UserWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutBookmarkedByInput = {
    create?: XOR<PostCreateWithoutBookmarkedByInput, PostUncheckedCreateWithoutBookmarkedByInput>
    connectOrCreate?: PostCreateOrConnectWithoutBookmarkedByInput
    connect?: PostWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutBookmarksNestedInput = {
    create?: XOR<UserCreateWithoutBookmarksInput, UserUncheckedCreateWithoutBookmarksInput>
    connectOrCreate?: UserCreateOrConnectWithoutBookmarksInput
    upsert?: UserUpsertWithoutBookmarksInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutBookmarksInput, UserUpdateWithoutBookmarksInput>, UserUncheckedUpdateWithoutBookmarksInput>
  }

  export type PostUpdateOneRequiredWithoutBookmarkedByNestedInput = {
    create?: XOR<PostCreateWithoutBookmarkedByInput, PostUncheckedCreateWithoutBookmarkedByInput>
    connectOrCreate?: PostCreateOrConnectWithoutBookmarkedByInput
    upsert?: PostUpsertWithoutBookmarkedByInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutBookmarkedByInput, PostUpdateWithoutBookmarkedByInput>, PostUncheckedUpdateWithoutBookmarkedByInput>
  }

  export type PostTagCreateNestedManyWithoutTagInput = {
    create?: XOR<PostTagCreateWithoutTagInput, PostTagUncheckedCreateWithoutTagInput> | PostTagCreateWithoutTagInput[] | PostTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: PostTagCreateOrConnectWithoutTagInput | PostTagCreateOrConnectWithoutTagInput[]
    createMany?: PostTagCreateManyTagInputEnvelope
    connect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[]
  }

  export type PostTagUncheckedCreateNestedManyWithoutTagInput = {
    create?: XOR<PostTagCreateWithoutTagInput, PostTagUncheckedCreateWithoutTagInput> | PostTagCreateWithoutTagInput[] | PostTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: PostTagCreateOrConnectWithoutTagInput | PostTagCreateOrConnectWithoutTagInput[]
    createMany?: PostTagCreateManyTagInputEnvelope
    connect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[]
  }

  export type PostTagUpdateManyWithoutTagNestedInput = {
    create?: XOR<PostTagCreateWithoutTagInput, PostTagUncheckedCreateWithoutTagInput> | PostTagCreateWithoutTagInput[] | PostTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: PostTagCreateOrConnectWithoutTagInput | PostTagCreateOrConnectWithoutTagInput[]
    upsert?: PostTagUpsertWithWhereUniqueWithoutTagInput | PostTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: PostTagCreateManyTagInputEnvelope
    set?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[]
    disconnect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[]
    delete?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[]
    connect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[]
    update?: PostTagUpdateWithWhereUniqueWithoutTagInput | PostTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: PostTagUpdateManyWithWhereWithoutTagInput | PostTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: PostTagScalarWhereInput | PostTagScalarWhereInput[]
  }

  export type PostTagUncheckedUpdateManyWithoutTagNestedInput = {
    create?: XOR<PostTagCreateWithoutTagInput, PostTagUncheckedCreateWithoutTagInput> | PostTagCreateWithoutTagInput[] | PostTagUncheckedCreateWithoutTagInput[]
    connectOrCreate?: PostTagCreateOrConnectWithoutTagInput | PostTagCreateOrConnectWithoutTagInput[]
    upsert?: PostTagUpsertWithWhereUniqueWithoutTagInput | PostTagUpsertWithWhereUniqueWithoutTagInput[]
    createMany?: PostTagCreateManyTagInputEnvelope
    set?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[]
    disconnect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[]
    delete?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[]
    connect?: PostTagWhereUniqueInput | PostTagWhereUniqueInput[]
    update?: PostTagUpdateWithWhereUniqueWithoutTagInput | PostTagUpdateWithWhereUniqueWithoutTagInput[]
    updateMany?: PostTagUpdateManyWithWhereWithoutTagInput | PostTagUpdateManyWithWhereWithoutTagInput[]
    deleteMany?: PostTagScalarWhereInput | PostTagScalarWhereInput[]
  }

  export type TagCreateNestedOneWithoutPostsInput = {
    create?: XOR<TagCreateWithoutPostsInput, TagUncheckedCreateWithoutPostsInput>
    connectOrCreate?: TagCreateOrConnectWithoutPostsInput
    connect?: TagWhereUniqueInput
  }

  export type PostCreateNestedOneWithoutTagsInput = {
    create?: XOR<PostCreateWithoutTagsInput, PostUncheckedCreateWithoutTagsInput>
    connectOrCreate?: PostCreateOrConnectWithoutTagsInput
    connect?: PostWhereUniqueInput
  }

  export type TagUpdateOneRequiredWithoutPostsNestedInput = {
    create?: XOR<TagCreateWithoutPostsInput, TagUncheckedCreateWithoutPostsInput>
    connectOrCreate?: TagCreateOrConnectWithoutPostsInput
    upsert?: TagUpsertWithoutPostsInput
    connect?: TagWhereUniqueInput
    update?: XOR<XOR<TagUpdateToOneWithWhereWithoutPostsInput, TagUpdateWithoutPostsInput>, TagUncheckedUpdateWithoutPostsInput>
  }

  export type PostUpdateOneRequiredWithoutTagsNestedInput = {
    create?: XOR<PostCreateWithoutTagsInput, PostUncheckedCreateWithoutTagsInput>
    connectOrCreate?: PostCreateOrConnectWithoutTagsInput
    upsert?: PostUpsertWithoutTagsInput
    connect?: PostWhereUniqueInput
    update?: XOR<XOR<PostUpdateToOneWithWhereWithoutTagsInput, PostUpdateWithoutTagsInput>, PostUncheckedUpdateWithoutTagsInput>
  }

  export type PostCreateNestedManyWithoutCommunityInput = {
    create?: XOR<PostCreateWithoutCommunityInput, PostUncheckedCreateWithoutCommunityInput> | PostCreateWithoutCommunityInput[] | PostUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: PostCreateOrConnectWithoutCommunityInput | PostCreateOrConnectWithoutCommunityInput[]
    createMany?: PostCreateManyCommunityInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type UserCommunityCreateNestedManyWithoutCommunityInput = {
    create?: XOR<UserCommunityCreateWithoutCommunityInput, UserCommunityUncheckedCreateWithoutCommunityInput> | UserCommunityCreateWithoutCommunityInput[] | UserCommunityUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: UserCommunityCreateOrConnectWithoutCommunityInput | UserCommunityCreateOrConnectWithoutCommunityInput[]
    createMany?: UserCommunityCreateManyCommunityInputEnvelope
    connect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
  }

  export type FavouriteCommunityCreateNestedManyWithoutCommunityInput = {
    create?: XOR<FavouriteCommunityCreateWithoutCommunityInput, FavouriteCommunityUncheckedCreateWithoutCommunityInput> | FavouriteCommunityCreateWithoutCommunityInput[] | FavouriteCommunityUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: FavouriteCommunityCreateOrConnectWithoutCommunityInput | FavouriteCommunityCreateOrConnectWithoutCommunityInput[]
    createMany?: FavouriteCommunityCreateManyCommunityInputEnvelope
    connect?: FavouriteCommunityWhereUniqueInput | FavouriteCommunityWhereUniqueInput[]
  }

  export type CategoryCreateNestedOneWithoutComunitiesInput = {
    create?: XOR<CategoryCreateWithoutComunitiesInput, CategoryUncheckedCreateWithoutComunitiesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutComunitiesInput
    connect?: CategoryWhereUniqueInput
  }

  export type NotificationCommunityNewMemberCreateNestedManyWithoutCommunityInput = {
    create?: XOR<NotificationCommunityNewMemberCreateWithoutCommunityInput, NotificationCommunityNewMemberUncheckedCreateWithoutCommunityInput> | NotificationCommunityNewMemberCreateWithoutCommunityInput[] | NotificationCommunityNewMemberUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: NotificationCommunityNewMemberCreateOrConnectWithoutCommunityInput | NotificationCommunityNewMemberCreateOrConnectWithoutCommunityInput[]
    createMany?: NotificationCommunityNewMemberCreateManyCommunityInputEnvelope
    connect?: NotificationCommunityNewMemberWhereUniqueInput | NotificationCommunityNewMemberWhereUniqueInput[]
  }

  export type PostUncheckedCreateNestedManyWithoutCommunityInput = {
    create?: XOR<PostCreateWithoutCommunityInput, PostUncheckedCreateWithoutCommunityInput> | PostCreateWithoutCommunityInput[] | PostUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: PostCreateOrConnectWithoutCommunityInput | PostCreateOrConnectWithoutCommunityInput[]
    createMany?: PostCreateManyCommunityInputEnvelope
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
  }

  export type UserCommunityUncheckedCreateNestedManyWithoutCommunityInput = {
    create?: XOR<UserCommunityCreateWithoutCommunityInput, UserCommunityUncheckedCreateWithoutCommunityInput> | UserCommunityCreateWithoutCommunityInput[] | UserCommunityUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: UserCommunityCreateOrConnectWithoutCommunityInput | UserCommunityCreateOrConnectWithoutCommunityInput[]
    createMany?: UserCommunityCreateManyCommunityInputEnvelope
    connect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
  }

  export type FavouriteCommunityUncheckedCreateNestedManyWithoutCommunityInput = {
    create?: XOR<FavouriteCommunityCreateWithoutCommunityInput, FavouriteCommunityUncheckedCreateWithoutCommunityInput> | FavouriteCommunityCreateWithoutCommunityInput[] | FavouriteCommunityUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: FavouriteCommunityCreateOrConnectWithoutCommunityInput | FavouriteCommunityCreateOrConnectWithoutCommunityInput[]
    createMany?: FavouriteCommunityCreateManyCommunityInputEnvelope
    connect?: FavouriteCommunityWhereUniqueInput | FavouriteCommunityWhereUniqueInput[]
  }

  export type NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutCommunityInput = {
    create?: XOR<NotificationCommunityNewMemberCreateWithoutCommunityInput, NotificationCommunityNewMemberUncheckedCreateWithoutCommunityInput> | NotificationCommunityNewMemberCreateWithoutCommunityInput[] | NotificationCommunityNewMemberUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: NotificationCommunityNewMemberCreateOrConnectWithoutCommunityInput | NotificationCommunityNewMemberCreateOrConnectWithoutCommunityInput[]
    createMany?: NotificationCommunityNewMemberCreateManyCommunityInputEnvelope
    connect?: NotificationCommunityNewMemberWhereUniqueInput | NotificationCommunityNewMemberWhereUniqueInput[]
  }

  export type PostUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<PostCreateWithoutCommunityInput, PostUncheckedCreateWithoutCommunityInput> | PostCreateWithoutCommunityInput[] | PostUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: PostCreateOrConnectWithoutCommunityInput | PostCreateOrConnectWithoutCommunityInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutCommunityInput | PostUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: PostCreateManyCommunityInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutCommunityInput | PostUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: PostUpdateManyWithWhereWithoutCommunityInput | PostUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type UserCommunityUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<UserCommunityCreateWithoutCommunityInput, UserCommunityUncheckedCreateWithoutCommunityInput> | UserCommunityCreateWithoutCommunityInput[] | UserCommunityUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: UserCommunityCreateOrConnectWithoutCommunityInput | UserCommunityCreateOrConnectWithoutCommunityInput[]
    upsert?: UserCommunityUpsertWithWhereUniqueWithoutCommunityInput | UserCommunityUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: UserCommunityCreateManyCommunityInputEnvelope
    set?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    disconnect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    delete?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    connect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    update?: UserCommunityUpdateWithWhereUniqueWithoutCommunityInput | UserCommunityUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: UserCommunityUpdateManyWithWhereWithoutCommunityInput | UserCommunityUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: UserCommunityScalarWhereInput | UserCommunityScalarWhereInput[]
  }

  export type FavouriteCommunityUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<FavouriteCommunityCreateWithoutCommunityInput, FavouriteCommunityUncheckedCreateWithoutCommunityInput> | FavouriteCommunityCreateWithoutCommunityInput[] | FavouriteCommunityUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: FavouriteCommunityCreateOrConnectWithoutCommunityInput | FavouriteCommunityCreateOrConnectWithoutCommunityInput[]
    upsert?: FavouriteCommunityUpsertWithWhereUniqueWithoutCommunityInput | FavouriteCommunityUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: FavouriteCommunityCreateManyCommunityInputEnvelope
    set?: FavouriteCommunityWhereUniqueInput | FavouriteCommunityWhereUniqueInput[]
    disconnect?: FavouriteCommunityWhereUniqueInput | FavouriteCommunityWhereUniqueInput[]
    delete?: FavouriteCommunityWhereUniqueInput | FavouriteCommunityWhereUniqueInput[]
    connect?: FavouriteCommunityWhereUniqueInput | FavouriteCommunityWhereUniqueInput[]
    update?: FavouriteCommunityUpdateWithWhereUniqueWithoutCommunityInput | FavouriteCommunityUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: FavouriteCommunityUpdateManyWithWhereWithoutCommunityInput | FavouriteCommunityUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: FavouriteCommunityScalarWhereInput | FavouriteCommunityScalarWhereInput[]
  }

  export type CategoryUpdateOneRequiredWithoutComunitiesNestedInput = {
    create?: XOR<CategoryCreateWithoutComunitiesInput, CategoryUncheckedCreateWithoutComunitiesInput>
    connectOrCreate?: CategoryCreateOrConnectWithoutComunitiesInput
    upsert?: CategoryUpsertWithoutComunitiesInput
    connect?: CategoryWhereUniqueInput
    update?: XOR<XOR<CategoryUpdateToOneWithWhereWithoutComunitiesInput, CategoryUpdateWithoutComunitiesInput>, CategoryUncheckedUpdateWithoutComunitiesInput>
  }

  export type NotificationCommunityNewMemberUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<NotificationCommunityNewMemberCreateWithoutCommunityInput, NotificationCommunityNewMemberUncheckedCreateWithoutCommunityInput> | NotificationCommunityNewMemberCreateWithoutCommunityInput[] | NotificationCommunityNewMemberUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: NotificationCommunityNewMemberCreateOrConnectWithoutCommunityInput | NotificationCommunityNewMemberCreateOrConnectWithoutCommunityInput[]
    upsert?: NotificationCommunityNewMemberUpsertWithWhereUniqueWithoutCommunityInput | NotificationCommunityNewMemberUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: NotificationCommunityNewMemberCreateManyCommunityInputEnvelope
    set?: NotificationCommunityNewMemberWhereUniqueInput | NotificationCommunityNewMemberWhereUniqueInput[]
    disconnect?: NotificationCommunityNewMemberWhereUniqueInput | NotificationCommunityNewMemberWhereUniqueInput[]
    delete?: NotificationCommunityNewMemberWhereUniqueInput | NotificationCommunityNewMemberWhereUniqueInput[]
    connect?: NotificationCommunityNewMemberWhereUniqueInput | NotificationCommunityNewMemberWhereUniqueInput[]
    update?: NotificationCommunityNewMemberUpdateWithWhereUniqueWithoutCommunityInput | NotificationCommunityNewMemberUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: NotificationCommunityNewMemberUpdateManyWithWhereWithoutCommunityInput | NotificationCommunityNewMemberUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: NotificationCommunityNewMemberScalarWhereInput | NotificationCommunityNewMemberScalarWhereInput[]
  }

  export type PostUncheckedUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<PostCreateWithoutCommunityInput, PostUncheckedCreateWithoutCommunityInput> | PostCreateWithoutCommunityInput[] | PostUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: PostCreateOrConnectWithoutCommunityInput | PostCreateOrConnectWithoutCommunityInput[]
    upsert?: PostUpsertWithWhereUniqueWithoutCommunityInput | PostUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: PostCreateManyCommunityInputEnvelope
    set?: PostWhereUniqueInput | PostWhereUniqueInput[]
    disconnect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    delete?: PostWhereUniqueInput | PostWhereUniqueInput[]
    connect?: PostWhereUniqueInput | PostWhereUniqueInput[]
    update?: PostUpdateWithWhereUniqueWithoutCommunityInput | PostUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: PostUpdateManyWithWhereWithoutCommunityInput | PostUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: PostScalarWhereInput | PostScalarWhereInput[]
  }

  export type UserCommunityUncheckedUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<UserCommunityCreateWithoutCommunityInput, UserCommunityUncheckedCreateWithoutCommunityInput> | UserCommunityCreateWithoutCommunityInput[] | UserCommunityUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: UserCommunityCreateOrConnectWithoutCommunityInput | UserCommunityCreateOrConnectWithoutCommunityInput[]
    upsert?: UserCommunityUpsertWithWhereUniqueWithoutCommunityInput | UserCommunityUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: UserCommunityCreateManyCommunityInputEnvelope
    set?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    disconnect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    delete?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    connect?: UserCommunityWhereUniqueInput | UserCommunityWhereUniqueInput[]
    update?: UserCommunityUpdateWithWhereUniqueWithoutCommunityInput | UserCommunityUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: UserCommunityUpdateManyWithWhereWithoutCommunityInput | UserCommunityUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: UserCommunityScalarWhereInput | UserCommunityScalarWhereInput[]
  }

  export type FavouriteCommunityUncheckedUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<FavouriteCommunityCreateWithoutCommunityInput, FavouriteCommunityUncheckedCreateWithoutCommunityInput> | FavouriteCommunityCreateWithoutCommunityInput[] | FavouriteCommunityUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: FavouriteCommunityCreateOrConnectWithoutCommunityInput | FavouriteCommunityCreateOrConnectWithoutCommunityInput[]
    upsert?: FavouriteCommunityUpsertWithWhereUniqueWithoutCommunityInput | FavouriteCommunityUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: FavouriteCommunityCreateManyCommunityInputEnvelope
    set?: FavouriteCommunityWhereUniqueInput | FavouriteCommunityWhereUniqueInput[]
    disconnect?: FavouriteCommunityWhereUniqueInput | FavouriteCommunityWhereUniqueInput[]
    delete?: FavouriteCommunityWhereUniqueInput | FavouriteCommunityWhereUniqueInput[]
    connect?: FavouriteCommunityWhereUniqueInput | FavouriteCommunityWhereUniqueInput[]
    update?: FavouriteCommunityUpdateWithWhereUniqueWithoutCommunityInput | FavouriteCommunityUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: FavouriteCommunityUpdateManyWithWhereWithoutCommunityInput | FavouriteCommunityUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: FavouriteCommunityScalarWhereInput | FavouriteCommunityScalarWhereInput[]
  }

  export type NotificationCommunityNewMemberUncheckedUpdateManyWithoutCommunityNestedInput = {
    create?: XOR<NotificationCommunityNewMemberCreateWithoutCommunityInput, NotificationCommunityNewMemberUncheckedCreateWithoutCommunityInput> | NotificationCommunityNewMemberCreateWithoutCommunityInput[] | NotificationCommunityNewMemberUncheckedCreateWithoutCommunityInput[]
    connectOrCreate?: NotificationCommunityNewMemberCreateOrConnectWithoutCommunityInput | NotificationCommunityNewMemberCreateOrConnectWithoutCommunityInput[]
    upsert?: NotificationCommunityNewMemberUpsertWithWhereUniqueWithoutCommunityInput | NotificationCommunityNewMemberUpsertWithWhereUniqueWithoutCommunityInput[]
    createMany?: NotificationCommunityNewMemberCreateManyCommunityInputEnvelope
    set?: NotificationCommunityNewMemberWhereUniqueInput | NotificationCommunityNewMemberWhereUniqueInput[]
    disconnect?: NotificationCommunityNewMemberWhereUniqueInput | NotificationCommunityNewMemberWhereUniqueInput[]
    delete?: NotificationCommunityNewMemberWhereUniqueInput | NotificationCommunityNewMemberWhereUniqueInput[]
    connect?: NotificationCommunityNewMemberWhereUniqueInput | NotificationCommunityNewMemberWhereUniqueInput[]
    update?: NotificationCommunityNewMemberUpdateWithWhereUniqueWithoutCommunityInput | NotificationCommunityNewMemberUpdateWithWhereUniqueWithoutCommunityInput[]
    updateMany?: NotificationCommunityNewMemberUpdateManyWithWhereWithoutCommunityInput | NotificationCommunityNewMemberUpdateManyWithWhereWithoutCommunityInput[]
    deleteMany?: NotificationCommunityNewMemberScalarWhereInput | NotificationCommunityNewMemberScalarWhereInput[]
  }

  export type CommunityCreateNestedOneWithoutFavouriteByInput = {
    create?: XOR<CommunityCreateWithoutFavouriteByInput, CommunityUncheckedCreateWithoutFavouriteByInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutFavouriteByInput
    connect?: CommunityWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutFavouriteCommunitiesInput = {
    create?: XOR<UserCreateWithoutFavouriteCommunitiesInput, UserUncheckedCreateWithoutFavouriteCommunitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavouriteCommunitiesInput
    connect?: UserWhereUniqueInput
  }

  export type CommunityUpdateOneRequiredWithoutFavouriteByNestedInput = {
    create?: XOR<CommunityCreateWithoutFavouriteByInput, CommunityUncheckedCreateWithoutFavouriteByInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutFavouriteByInput
    upsert?: CommunityUpsertWithoutFavouriteByInput
    connect?: CommunityWhereUniqueInput
    update?: XOR<XOR<CommunityUpdateToOneWithWhereWithoutFavouriteByInput, CommunityUpdateWithoutFavouriteByInput>, CommunityUncheckedUpdateWithoutFavouriteByInput>
  }

  export type UserUpdateOneRequiredWithoutFavouriteCommunitiesNestedInput = {
    create?: XOR<UserCreateWithoutFavouriteCommunitiesInput, UserUncheckedCreateWithoutFavouriteCommunitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavouriteCommunitiesInput
    upsert?: UserUpsertWithoutFavouriteCommunitiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavouriteCommunitiesInput, UserUpdateWithoutFavouriteCommunitiesInput>, UserUncheckedUpdateWithoutFavouriteCommunitiesInput>
  }

  export type CommunityCreateNestedManyWithoutCategoryInput = {
    create?: XOR<CommunityCreateWithoutCategoryInput, CommunityUncheckedCreateWithoutCategoryInput> | CommunityCreateWithoutCategoryInput[] | CommunityUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CommunityCreateOrConnectWithoutCategoryInput | CommunityCreateOrConnectWithoutCategoryInput[]
    createMany?: CommunityCreateManyCategoryInputEnvelope
    connect?: CommunityWhereUniqueInput | CommunityWhereUniqueInput[]
  }

  export type CommunityUncheckedCreateNestedManyWithoutCategoryInput = {
    create?: XOR<CommunityCreateWithoutCategoryInput, CommunityUncheckedCreateWithoutCategoryInput> | CommunityCreateWithoutCategoryInput[] | CommunityUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CommunityCreateOrConnectWithoutCategoryInput | CommunityCreateOrConnectWithoutCategoryInput[]
    createMany?: CommunityCreateManyCategoryInputEnvelope
    connect?: CommunityWhereUniqueInput | CommunityWhereUniqueInput[]
  }

  export type CommunityUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<CommunityCreateWithoutCategoryInput, CommunityUncheckedCreateWithoutCategoryInput> | CommunityCreateWithoutCategoryInput[] | CommunityUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CommunityCreateOrConnectWithoutCategoryInput | CommunityCreateOrConnectWithoutCategoryInput[]
    upsert?: CommunityUpsertWithWhereUniqueWithoutCategoryInput | CommunityUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: CommunityCreateManyCategoryInputEnvelope
    set?: CommunityWhereUniqueInput | CommunityWhereUniqueInput[]
    disconnect?: CommunityWhereUniqueInput | CommunityWhereUniqueInput[]
    delete?: CommunityWhereUniqueInput | CommunityWhereUniqueInput[]
    connect?: CommunityWhereUniqueInput | CommunityWhereUniqueInput[]
    update?: CommunityUpdateWithWhereUniqueWithoutCategoryInput | CommunityUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: CommunityUpdateManyWithWhereWithoutCategoryInput | CommunityUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: CommunityScalarWhereInput | CommunityScalarWhereInput[]
  }

  export type CommunityUncheckedUpdateManyWithoutCategoryNestedInput = {
    create?: XOR<CommunityCreateWithoutCategoryInput, CommunityUncheckedCreateWithoutCategoryInput> | CommunityCreateWithoutCategoryInput[] | CommunityUncheckedCreateWithoutCategoryInput[]
    connectOrCreate?: CommunityCreateOrConnectWithoutCategoryInput | CommunityCreateOrConnectWithoutCategoryInput[]
    upsert?: CommunityUpsertWithWhereUniqueWithoutCategoryInput | CommunityUpsertWithWhereUniqueWithoutCategoryInput[]
    createMany?: CommunityCreateManyCategoryInputEnvelope
    set?: CommunityWhereUniqueInput | CommunityWhereUniqueInput[]
    disconnect?: CommunityWhereUniqueInput | CommunityWhereUniqueInput[]
    delete?: CommunityWhereUniqueInput | CommunityWhereUniqueInput[]
    connect?: CommunityWhereUniqueInput | CommunityWhereUniqueInput[]
    update?: CommunityUpdateWithWhereUniqueWithoutCategoryInput | CommunityUpdateWithWhereUniqueWithoutCategoryInput[]
    updateMany?: CommunityUpdateManyWithWhereWithoutCategoryInput | CommunityUpdateManyWithWhereWithoutCategoryInput[]
    deleteMany?: CommunityScalarWhereInput | CommunityScalarWhereInput[]
  }

  export type CommunityCreateNestedOneWithoutMembersInput = {
    create?: XOR<CommunityCreateWithoutMembersInput, CommunityUncheckedCreateWithoutMembersInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutMembersInput
    connect?: CommunityWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutCommunitiesInput = {
    create?: XOR<UserCreateWithoutCommunitiesInput, UserUncheckedCreateWithoutCommunitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommunitiesInput
    connect?: UserWhereUniqueInput
  }

  export type EnumRoleFieldUpdateOperationsInput = {
    set?: $Enums.Role
  }

  export type CommunityUpdateOneRequiredWithoutMembersNestedInput = {
    create?: XOR<CommunityCreateWithoutMembersInput, CommunityUncheckedCreateWithoutMembersInput>
    connectOrCreate?: CommunityCreateOrConnectWithoutMembersInput
    upsert?: CommunityUpsertWithoutMembersInput
    connect?: CommunityWhereUniqueInput
    update?: XOR<XOR<CommunityUpdateToOneWithWhereWithoutMembersInput, CommunityUpdateWithoutMembersInput>, CommunityUncheckedUpdateWithoutMembersInput>
  }

  export type UserUpdateOneRequiredWithoutCommunitiesNestedInput = {
    create?: XOR<UserCreateWithoutCommunitiesInput, UserUncheckedCreateWithoutCommunitiesInput>
    connectOrCreate?: UserCreateOrConnectWithoutCommunitiesInput
    upsert?: UserUpsertWithoutCommunitiesInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutCommunitiesInput, UserUpdateWithoutCommunitiesInput>, UserUncheckedUpdateWithoutCommunitiesInput>
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[]
    notIn?: string[]
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | null
    notIn?: string[] | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | null
    notIn?: number[] | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[]
    notIn?: Date[] | string[]
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedDateTimeNullableFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableFilter<$PrismaModel> | Date | string | null
  }

  export type NestedDateTimeNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel> | null
    in?: Date[] | string[] | null
    notIn?: Date[] | string[] | null
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeNullableWithAggregatesFilter<$PrismaModel> | Date | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedDateTimeNullableFilter<$PrismaModel>
    _max?: NestedDateTimeNullableFilter<$PrismaModel>
  }

  export type NestedBoolFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolFilter<$PrismaModel> | boolean
  }

  export type NestedBoolWithAggregatesFilter<$PrismaModel = never> = {
    equals?: boolean | BooleanFieldRefInput<$PrismaModel>
    not?: NestedBoolWithAggregatesFilter<$PrismaModel> | boolean
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedBoolFilter<$PrismaModel>
    _max?: NestedBoolFilter<$PrismaModel>
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[]
    notIn?: number[]
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedEnumRoleFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleFilter<$PrismaModel> | $Enums.Role
  }

  export type NestedEnumRoleWithAggregatesFilter<$PrismaModel = never> = {
    equals?: $Enums.Role | EnumRoleFieldRefInput<$PrismaModel>
    in?: $Enums.Role[]
    notIn?: $Enums.Role[]
    not?: NestedEnumRoleWithAggregatesFilter<$PrismaModel> | $Enums.Role
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedEnumRoleFilter<$PrismaModel>
    _max?: NestedEnumRoleFilter<$PrismaModel>
  }

  export type UserCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    sessions?: SessionCreateNestedManyWithoutUserInput
    followedBy?: UserCreateNestedManyWithoutFollowingInput
    following?: UserCreateNestedManyWithoutFollowedByInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    communities?: UserCommunityCreateNestedManyWithoutUserInput
    mentions?: MentionCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityCreateNestedManyWithoutUserInput
    sharedPost?: UserShareCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAccountsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    followedBy?: UserUncheckedCreateNestedManyWithoutFollowingInput
    following?: UserUncheckedCreateNestedManyWithoutFollowedByInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    communities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    mentions?: MentionUncheckedCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityUncheckedCreateNestedManyWithoutUserInput
    sharedPost?: UserShareUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAccountsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
  }

  export type UserUpsertWithoutAccountsInput = {
    update: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
    create: XOR<UserCreateWithoutAccountsInput, UserUncheckedCreateWithoutAccountsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAccountsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAccountsInput, UserUncheckedUpdateWithoutAccountsInput>
  }

  export type UserUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUpdateManyWithoutUserNestedInput
    followedBy?: UserUpdateManyWithoutFollowingNestedInput
    following?: UserUpdateManyWithoutFollowedByNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUpdateManyWithoutUserNestedInput
    mentions?: MentionUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAccountsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    following?: UserUncheckedUpdateManyWithoutFollowedByNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUncheckedUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    followedBy?: UserCreateNestedManyWithoutFollowingInput
    following?: UserCreateNestedManyWithoutFollowedByInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    communities?: UserCommunityCreateNestedManyWithoutUserInput
    mentions?: MentionCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityCreateNestedManyWithoutUserInput
    sharedPost?: UserShareCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSessionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    followedBy?: UserUncheckedCreateNestedManyWithoutFollowingInput
    following?: UserUncheckedCreateNestedManyWithoutFollowedByInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    communities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    mentions?: MentionUncheckedCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityUncheckedCreateNestedManyWithoutUserInput
    sharedPost?: UserShareUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSessionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
  }

  export type UserUpsertWithoutSessionsInput = {
    update: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
    create: XOR<UserCreateWithoutSessionsInput, UserUncheckedCreateWithoutSessionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSessionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSessionsInput, UserUncheckedUpdateWithoutSessionsInput>
  }

  export type UserUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    followedBy?: UserUpdateManyWithoutFollowingNestedInput
    following?: UserUpdateManyWithoutFollowedByNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUpdateManyWithoutUserNestedInput
    mentions?: MentionUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSessionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    following?: UserUncheckedUpdateManyWithoutFollowedByNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUncheckedUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AccountCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    refresh_token_expires_in?: number | null
  }

  export type AccountUncheckedCreateWithoutUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    refresh_token_expires_in?: number | null
  }

  export type AccountCreateOrConnectWithoutUserInput = {
    where: AccountWhereUniqueInput
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountCreateManyUserInputEnvelope = {
    data: AccountCreateManyUserInput | AccountCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SessionCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionUncheckedCreateWithoutUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type SessionCreateOrConnectWithoutUserInput = {
    where: SessionWhereUniqueInput
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionCreateManyUserInputEnvelope = {
    data: SessionCreateManyUserInput | SessionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutFollowingInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    followedBy?: UserCreateNestedManyWithoutFollowingInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    communities?: UserCommunityCreateNestedManyWithoutUserInput
    mentions?: MentionCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityCreateNestedManyWithoutUserInput
    sharedPost?: UserShareCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFollowingInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    followedBy?: UserUncheckedCreateNestedManyWithoutFollowingInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    communities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    mentions?: MentionUncheckedCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityUncheckedCreateNestedManyWithoutUserInput
    sharedPost?: UserShareUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFollowingInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
  }

  export type UserCreateWithoutFollowedByInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    following?: UserCreateNestedManyWithoutFollowedByInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    communities?: UserCommunityCreateNestedManyWithoutUserInput
    mentions?: MentionCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityCreateNestedManyWithoutUserInput
    sharedPost?: UserShareCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFollowedByInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    following?: UserUncheckedCreateNestedManyWithoutFollowedByInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    communities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    mentions?: MentionUncheckedCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityUncheckedCreateNestedManyWithoutUserInput
    sharedPost?: UserShareUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFollowedByInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFollowedByInput, UserUncheckedCreateWithoutFollowedByInput>
  }

  export type PostCreateWithoutUserInput = {
    id?: string
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    link?: string | null
    comments?: CommentCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkCreateNestedManyWithoutPostInput
    images?: ImageCreateNestedManyWithoutPostInput
    tags?: PostTagCreateNestedManyWithoutPostInput
    shareParent?: PostCreateNestedOneWithoutSharesInput
    shares?: PostCreateNestedManyWithoutShareParentInput
    community?: CommunityCreateNestedOneWithoutPostsInput
    mentions?: MentionCreateNestedManyWithoutPostInput
    sharedBy?: UserShareCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutUserInput = {
    id?: string
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    shareParentId?: string | null
    communityId?: string | null
    link?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkUncheckedCreateNestedManyWithoutPostInput
    images?: ImageUncheckedCreateNestedManyWithoutPostInput
    tags?: PostTagUncheckedCreateNestedManyWithoutPostInput
    shares?: PostUncheckedCreateNestedManyWithoutShareParentInput
    mentions?: MentionUncheckedCreateNestedManyWithoutPostInput
    sharedBy?: UserShareUncheckedCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutUserInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput>
  }

  export type PostCreateManyUserInputEnvelope = {
    data: PostCreateManyUserInput | PostCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutUserInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    post: PostCreateNestedOneWithoutCommentsInput
    likes?: CommentLikeCreateNestedManyWithoutCommentInput
    parent?: CommentCreateNestedOneWithoutChildrenInput
    children?: CommentCreateNestedManyWithoutParentInput
    notificationPostComment?: NotificationPostCommentCreateNestedManyWithoutCommentInput
    notificationCommentReply?: NotificationCommentReplyCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutUserInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    postId: string
    parentId?: string | null
    isDeleted?: boolean
    likes?: CommentLikeUncheckedCreateNestedManyWithoutCommentInput
    children?: CommentUncheckedCreateNestedManyWithoutParentInput
    notificationPostComment?: NotificationPostCommentUncheckedCreateNestedManyWithoutCommentInput
    notificationCommentReply?: NotificationCommentReplyUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutUserInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentCreateManyUserInputEnvelope = {
    data: CommentCreateManyUserInput | CommentCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type PostLikeCreateWithoutUserInput = {
    post: PostCreateNestedOneWithoutLikesInput
  }

  export type PostLikeUncheckedCreateWithoutUserInput = {
    postId: string
  }

  export type PostLikeCreateOrConnectWithoutUserInput = {
    where: PostLikeWhereUniqueInput
    create: XOR<PostLikeCreateWithoutUserInput, PostLikeUncheckedCreateWithoutUserInput>
  }

  export type PostLikeCreateManyUserInputEnvelope = {
    data: PostLikeCreateManyUserInput | PostLikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type CommentLikeCreateWithoutUserInput = {
    comment: CommentCreateNestedOneWithoutLikesInput
  }

  export type CommentLikeUncheckedCreateWithoutUserInput = {
    commentId: string
  }

  export type CommentLikeCreateOrConnectWithoutUserInput = {
    where: CommentLikeWhereUniqueInput
    create: XOR<CommentLikeCreateWithoutUserInput, CommentLikeUncheckedCreateWithoutUserInput>
  }

  export type CommentLikeCreateManyUserInputEnvelope = {
    data: CommentLikeCreateManyUserInput | CommentLikeCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type BookmarkCreateWithoutUserInput = {
    post: PostCreateNestedOneWithoutBookmarkedByInput
  }

  export type BookmarkUncheckedCreateWithoutUserInput = {
    postId: string
  }

  export type BookmarkCreateOrConnectWithoutUserInput = {
    where: BookmarkWhereUniqueInput
    create: XOR<BookmarkCreateWithoutUserInput, BookmarkUncheckedCreateWithoutUserInput>
  }

  export type BookmarkCreateManyUserInputEnvelope = {
    data: BookmarkCreateManyUserInput | BookmarkCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserCommunityCreateWithoutUserInput = {
    role?: $Enums.Role
    community: CommunityCreateNestedOneWithoutMembersInput
  }

  export type UserCommunityUncheckedCreateWithoutUserInput = {
    communityId: string
    role?: $Enums.Role
  }

  export type UserCommunityCreateOrConnectWithoutUserInput = {
    where: UserCommunityWhereUniqueInput
    create: XOR<UserCommunityCreateWithoutUserInput, UserCommunityUncheckedCreateWithoutUserInput>
  }

  export type UserCommunityCreateManyUserInputEnvelope = {
    data: UserCommunityCreateManyUserInput | UserCommunityCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type MentionCreateWithoutUserInput = {
    post: PostCreateNestedOneWithoutMentionsInput
  }

  export type MentionUncheckedCreateWithoutUserInput = {
    postId: string
  }

  export type MentionCreateOrConnectWithoutUserInput = {
    where: MentionWhereUniqueInput
    create: XOR<MentionCreateWithoutUserInput, MentionUncheckedCreateWithoutUserInput>
  }

  export type MentionCreateManyUserInputEnvelope = {
    data: MentionCreateManyUserInput | MentionCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FavouriteCommunityCreateWithoutUserInput = {
    community: CommunityCreateNestedOneWithoutFavouriteByInput
  }

  export type FavouriteCommunityUncheckedCreateWithoutUserInput = {
    communityId: string
  }

  export type FavouriteCommunityCreateOrConnectWithoutUserInput = {
    where: FavouriteCommunityWhereUniqueInput
    create: XOR<FavouriteCommunityCreateWithoutUserInput, FavouriteCommunityUncheckedCreateWithoutUserInput>
  }

  export type FavouriteCommunityCreateManyUserInputEnvelope = {
    data: FavouriteCommunityCreateManyUserInput | FavouriteCommunityCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type UserShareCreateWithoutUserInput = {
    post: PostCreateNestedOneWithoutSharedByInput
  }

  export type UserShareUncheckedCreateWithoutUserInput = {
    postId: string
  }

  export type UserShareCreateOrConnectWithoutUserInput = {
    where: UserShareWhereUniqueInput
    create: XOR<UserShareCreateWithoutUserInput, UserShareUncheckedCreateWithoutUserInput>
  }

  export type UserShareCreateManyUserInputEnvelope = {
    data: UserShareCreateManyUserInput | UserShareCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    isRead?: boolean
    notificationMention?: NotificationMentionCreateNestedOneWithoutNotificationInput
    notificationStartFollow?: NotificationStartFollowCreateNestedOneWithoutNotificationInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedOneWithoutNotificationInput
    notificationPostComment?: NotificationPostCommentCreateNestedOneWithoutNotificationInput
    notificationCommentReply?: NotificationCommentReplyCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateWithoutUserInput = {
    id?: string
    createdAt?: Date | string
    isRead?: boolean
    notificationMention?: NotificationMentionUncheckedCreateNestedOneWithoutNotificationInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedOneWithoutNotificationInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedOneWithoutNotificationInput
    notificationPostComment?: NotificationPostCommentUncheckedCreateNestedOneWithoutNotificationInput
    notificationCommentReply?: NotificationCommentReplyUncheckedCreateNestedOneWithoutNotificationInput
  }

  export type NotificationCreateOrConnectWithoutUserInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationCreateManyUserInputEnvelope = {
    data: NotificationCreateManyUserInput | NotificationCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type NotificationStartFollowCreateWithoutUserNotificationStartFollowInput = {
    id?: string
    notification: NotificationCreateNestedOneWithoutNotificationStartFollowInput
  }

  export type NotificationStartFollowUncheckedCreateWithoutUserNotificationStartFollowInput = {
    id?: string
    notificationId: string
  }

  export type NotificationStartFollowCreateOrConnectWithoutUserNotificationStartFollowInput = {
    where: NotificationStartFollowWhereUniqueInput
    create: XOR<NotificationStartFollowCreateWithoutUserNotificationStartFollowInput, NotificationStartFollowUncheckedCreateWithoutUserNotificationStartFollowInput>
  }

  export type NotificationStartFollowCreateManyUserNotificationStartFollowInputEnvelope = {
    data: NotificationStartFollowCreateManyUserNotificationStartFollowInput | NotificationStartFollowCreateManyUserNotificationStartFollowInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCommunityNewMemberCreateWithoutUserInput = {
    id?: string
    notification: NotificationCreateNestedOneWithoutNotificationCommunityNewMemberInput
    community: CommunityCreateNestedOneWithoutNotificationCommunityNewMemberInput
  }

  export type NotificationCommunityNewMemberUncheckedCreateWithoutUserInput = {
    id?: string
    notificationId: string
    communityId: string
  }

  export type NotificationCommunityNewMemberCreateOrConnectWithoutUserInput = {
    where: NotificationCommunityNewMemberWhereUniqueInput
    create: XOR<NotificationCommunityNewMemberCreateWithoutUserInput, NotificationCommunityNewMemberUncheckedCreateWithoutUserInput>
  }

  export type NotificationCommunityNewMemberCreateManyUserInputEnvelope = {
    data: NotificationCommunityNewMemberCreateManyUserInput | NotificationCommunityNewMemberCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AccountUpsertWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    update: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
    create: XOR<AccountCreateWithoutUserInput, AccountUncheckedCreateWithoutUserInput>
  }

  export type AccountUpdateWithWhereUniqueWithoutUserInput = {
    where: AccountWhereUniqueInput
    data: XOR<AccountUpdateWithoutUserInput, AccountUncheckedUpdateWithoutUserInput>
  }

  export type AccountUpdateManyWithWhereWithoutUserInput = {
    where: AccountScalarWhereInput
    data: XOR<AccountUpdateManyMutationInput, AccountUncheckedUpdateManyWithoutUserInput>
  }

  export type AccountScalarWhereInput = {
    AND?: AccountScalarWhereInput | AccountScalarWhereInput[]
    OR?: AccountScalarWhereInput[]
    NOT?: AccountScalarWhereInput | AccountScalarWhereInput[]
    id?: StringFilter<"Account"> | string
    userId?: StringFilter<"Account"> | string
    type?: StringFilter<"Account"> | string
    provider?: StringFilter<"Account"> | string
    providerAccountId?: StringFilter<"Account"> | string
    refresh_token?: StringNullableFilter<"Account"> | string | null
    access_token?: StringNullableFilter<"Account"> | string | null
    expires_at?: IntNullableFilter<"Account"> | number | null
    token_type?: StringNullableFilter<"Account"> | string | null
    scope?: StringNullableFilter<"Account"> | string | null
    id_token?: StringNullableFilter<"Account"> | string | null
    session_state?: StringNullableFilter<"Account"> | string | null
    refresh_token_expires_in?: IntNullableFilter<"Account"> | number | null
  }

  export type SessionUpsertWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    update: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
    create: XOR<SessionCreateWithoutUserInput, SessionUncheckedCreateWithoutUserInput>
  }

  export type SessionUpdateWithWhereUniqueWithoutUserInput = {
    where: SessionWhereUniqueInput
    data: XOR<SessionUpdateWithoutUserInput, SessionUncheckedUpdateWithoutUserInput>
  }

  export type SessionUpdateManyWithWhereWithoutUserInput = {
    where: SessionScalarWhereInput
    data: XOR<SessionUpdateManyMutationInput, SessionUncheckedUpdateManyWithoutUserInput>
  }

  export type SessionScalarWhereInput = {
    AND?: SessionScalarWhereInput | SessionScalarWhereInput[]
    OR?: SessionScalarWhereInput[]
    NOT?: SessionScalarWhereInput | SessionScalarWhereInput[]
    id?: StringFilter<"Session"> | string
    sessionToken?: StringFilter<"Session"> | string
    userId?: StringFilter<"Session"> | string
    expires?: DateTimeFilter<"Session"> | Date | string
  }

  export type UserUpsertWithWhereUniqueWithoutFollowingInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>
    create: XOR<UserCreateWithoutFollowingInput, UserUncheckedCreateWithoutFollowingInput>
  }

  export type UserUpdateWithWhereUniqueWithoutFollowingInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutFollowingInput, UserUncheckedUpdateWithoutFollowingInput>
  }

  export type UserUpdateManyWithWhereWithoutFollowingInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutFollowingInput>
  }

  export type UserScalarWhereInput = {
    AND?: UserScalarWhereInput | UserScalarWhereInput[]
    OR?: UserScalarWhereInput[]
    NOT?: UserScalarWhereInput | UserScalarWhereInput[]
    id?: StringFilter<"User"> | string
    name?: StringNullableFilter<"User"> | string | null
    email?: StringNullableFilter<"User"> | string | null
    emailVerified?: DateTimeNullableFilter<"User"> | Date | string | null
    image?: StringNullableFilter<"User"> | string | null
    bannerImage?: StringNullableFilter<"User"> | string | null
    bio?: StringFilter<"User"> | string
    facebook?: StringNullableFilter<"User"> | string | null
    instagram?: StringNullableFilter<"User"> | string | null
    twitter?: StringNullableFilter<"User"> | string | null
    whatsapp?: StringNullableFilter<"User"> | string | null
  }

  export type UserUpsertWithWhereUniqueWithoutFollowedByInput = {
    where: UserWhereUniqueInput
    update: XOR<UserUpdateWithoutFollowedByInput, UserUncheckedUpdateWithoutFollowedByInput>
    create: XOR<UserCreateWithoutFollowedByInput, UserUncheckedCreateWithoutFollowedByInput>
  }

  export type UserUpdateWithWhereUniqueWithoutFollowedByInput = {
    where: UserWhereUniqueInput
    data: XOR<UserUpdateWithoutFollowedByInput, UserUncheckedUpdateWithoutFollowedByInput>
  }

  export type UserUpdateManyWithWhereWithoutFollowedByInput = {
    where: UserScalarWhereInput
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyWithoutFollowedByInput>
  }

  export type PostUpsertWithWhereUniqueWithoutUserInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutUserInput, PostUncheckedUpdateWithoutUserInput>
    create: XOR<PostCreateWithoutUserInput, PostUncheckedCreateWithoutUserInput>
  }

  export type PostUpdateWithWhereUniqueWithoutUserInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutUserInput, PostUncheckedUpdateWithoutUserInput>
  }

  export type PostUpdateManyWithWhereWithoutUserInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutUserInput>
  }

  export type PostScalarWhereInput = {
    AND?: PostScalarWhereInput | PostScalarWhereInput[]
    OR?: PostScalarWhereInput[]
    NOT?: PostScalarWhereInput | PostScalarWhereInput[]
    id?: StringFilter<"Post"> | string
    content?: StringNullableFilter<"Post"> | string | null
    userId?: StringFilter<"Post"> | string
    createdAt?: DateTimeFilter<"Post"> | Date | string
    updatedAt?: DateTimeFilter<"Post"> | Date | string
    isDeleted?: BoolFilter<"Post"> | boolean
    shareParentId?: StringNullableFilter<"Post"> | string | null
    communityId?: StringNullableFilter<"Post"> | string | null
    link?: StringNullableFilter<"Post"> | string | null
  }

  export type CommentUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
    create: XOR<CommentCreateWithoutUserInput, CommentUncheckedCreateWithoutUserInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutUserInput, CommentUncheckedUpdateWithoutUserInput>
  }

  export type CommentUpdateManyWithWhereWithoutUserInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentScalarWhereInput = {
    AND?: CommentScalarWhereInput | CommentScalarWhereInput[]
    OR?: CommentScalarWhereInput[]
    NOT?: CommentScalarWhereInput | CommentScalarWhereInput[]
    id?: StringFilter<"Comment"> | string
    message?: StringFilter<"Comment"> | string
    createdAt?: DateTimeFilter<"Comment"> | Date | string
    updatedAt?: DateTimeFilter<"Comment"> | Date | string
    userId?: StringFilter<"Comment"> | string
    postId?: StringFilter<"Comment"> | string
    parentId?: StringNullableFilter<"Comment"> | string | null
    isDeleted?: BoolFilter<"Comment"> | boolean
  }

  export type PostLikeUpsertWithWhereUniqueWithoutUserInput = {
    where: PostLikeWhereUniqueInput
    update: XOR<PostLikeUpdateWithoutUserInput, PostLikeUncheckedUpdateWithoutUserInput>
    create: XOR<PostLikeCreateWithoutUserInput, PostLikeUncheckedCreateWithoutUserInput>
  }

  export type PostLikeUpdateWithWhereUniqueWithoutUserInput = {
    where: PostLikeWhereUniqueInput
    data: XOR<PostLikeUpdateWithoutUserInput, PostLikeUncheckedUpdateWithoutUserInput>
  }

  export type PostLikeUpdateManyWithWhereWithoutUserInput = {
    where: PostLikeScalarWhereInput
    data: XOR<PostLikeUpdateManyMutationInput, PostLikeUncheckedUpdateManyWithoutUserInput>
  }

  export type PostLikeScalarWhereInput = {
    AND?: PostLikeScalarWhereInput | PostLikeScalarWhereInput[]
    OR?: PostLikeScalarWhereInput[]
    NOT?: PostLikeScalarWhereInput | PostLikeScalarWhereInput[]
    userId?: StringFilter<"PostLike"> | string
    postId?: StringFilter<"PostLike"> | string
  }

  export type CommentLikeUpsertWithWhereUniqueWithoutUserInput = {
    where: CommentLikeWhereUniqueInput
    update: XOR<CommentLikeUpdateWithoutUserInput, CommentLikeUncheckedUpdateWithoutUserInput>
    create: XOR<CommentLikeCreateWithoutUserInput, CommentLikeUncheckedCreateWithoutUserInput>
  }

  export type CommentLikeUpdateWithWhereUniqueWithoutUserInput = {
    where: CommentLikeWhereUniqueInput
    data: XOR<CommentLikeUpdateWithoutUserInput, CommentLikeUncheckedUpdateWithoutUserInput>
  }

  export type CommentLikeUpdateManyWithWhereWithoutUserInput = {
    where: CommentLikeScalarWhereInput
    data: XOR<CommentLikeUpdateManyMutationInput, CommentLikeUncheckedUpdateManyWithoutUserInput>
  }

  export type CommentLikeScalarWhereInput = {
    AND?: CommentLikeScalarWhereInput | CommentLikeScalarWhereInput[]
    OR?: CommentLikeScalarWhereInput[]
    NOT?: CommentLikeScalarWhereInput | CommentLikeScalarWhereInput[]
    userId?: StringFilter<"CommentLike"> | string
    commentId?: StringFilter<"CommentLike"> | string
  }

  export type BookmarkUpsertWithWhereUniqueWithoutUserInput = {
    where: BookmarkWhereUniqueInput
    update: XOR<BookmarkUpdateWithoutUserInput, BookmarkUncheckedUpdateWithoutUserInput>
    create: XOR<BookmarkCreateWithoutUserInput, BookmarkUncheckedCreateWithoutUserInput>
  }

  export type BookmarkUpdateWithWhereUniqueWithoutUserInput = {
    where: BookmarkWhereUniqueInput
    data: XOR<BookmarkUpdateWithoutUserInput, BookmarkUncheckedUpdateWithoutUserInput>
  }

  export type BookmarkUpdateManyWithWhereWithoutUserInput = {
    where: BookmarkScalarWhereInput
    data: XOR<BookmarkUpdateManyMutationInput, BookmarkUncheckedUpdateManyWithoutUserInput>
  }

  export type BookmarkScalarWhereInput = {
    AND?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
    OR?: BookmarkScalarWhereInput[]
    NOT?: BookmarkScalarWhereInput | BookmarkScalarWhereInput[]
    userId?: StringFilter<"Bookmark"> | string
    postId?: StringFilter<"Bookmark"> | string
  }

  export type UserCommunityUpsertWithWhereUniqueWithoutUserInput = {
    where: UserCommunityWhereUniqueInput
    update: XOR<UserCommunityUpdateWithoutUserInput, UserCommunityUncheckedUpdateWithoutUserInput>
    create: XOR<UserCommunityCreateWithoutUserInput, UserCommunityUncheckedCreateWithoutUserInput>
  }

  export type UserCommunityUpdateWithWhereUniqueWithoutUserInput = {
    where: UserCommunityWhereUniqueInput
    data: XOR<UserCommunityUpdateWithoutUserInput, UserCommunityUncheckedUpdateWithoutUserInput>
  }

  export type UserCommunityUpdateManyWithWhereWithoutUserInput = {
    where: UserCommunityScalarWhereInput
    data: XOR<UserCommunityUpdateManyMutationInput, UserCommunityUncheckedUpdateManyWithoutUserInput>
  }

  export type UserCommunityScalarWhereInput = {
    AND?: UserCommunityScalarWhereInput | UserCommunityScalarWhereInput[]
    OR?: UserCommunityScalarWhereInput[]
    NOT?: UserCommunityScalarWhereInput | UserCommunityScalarWhereInput[]
    communityId?: StringFilter<"UserCommunity"> | string
    userId?: StringFilter<"UserCommunity"> | string
    role?: EnumRoleFilter<"UserCommunity"> | $Enums.Role
  }

  export type MentionUpsertWithWhereUniqueWithoutUserInput = {
    where: MentionWhereUniqueInput
    update: XOR<MentionUpdateWithoutUserInput, MentionUncheckedUpdateWithoutUserInput>
    create: XOR<MentionCreateWithoutUserInput, MentionUncheckedCreateWithoutUserInput>
  }

  export type MentionUpdateWithWhereUniqueWithoutUserInput = {
    where: MentionWhereUniqueInput
    data: XOR<MentionUpdateWithoutUserInput, MentionUncheckedUpdateWithoutUserInput>
  }

  export type MentionUpdateManyWithWhereWithoutUserInput = {
    where: MentionScalarWhereInput
    data: XOR<MentionUpdateManyMutationInput, MentionUncheckedUpdateManyWithoutUserInput>
  }

  export type MentionScalarWhereInput = {
    AND?: MentionScalarWhereInput | MentionScalarWhereInput[]
    OR?: MentionScalarWhereInput[]
    NOT?: MentionScalarWhereInput | MentionScalarWhereInput[]
    userId?: StringFilter<"Mention"> | string
    postId?: StringFilter<"Mention"> | string
  }

  export type FavouriteCommunityUpsertWithWhereUniqueWithoutUserInput = {
    where: FavouriteCommunityWhereUniqueInput
    update: XOR<FavouriteCommunityUpdateWithoutUserInput, FavouriteCommunityUncheckedUpdateWithoutUserInput>
    create: XOR<FavouriteCommunityCreateWithoutUserInput, FavouriteCommunityUncheckedCreateWithoutUserInput>
  }

  export type FavouriteCommunityUpdateWithWhereUniqueWithoutUserInput = {
    where: FavouriteCommunityWhereUniqueInput
    data: XOR<FavouriteCommunityUpdateWithoutUserInput, FavouriteCommunityUncheckedUpdateWithoutUserInput>
  }

  export type FavouriteCommunityUpdateManyWithWhereWithoutUserInput = {
    where: FavouriteCommunityScalarWhereInput
    data: XOR<FavouriteCommunityUpdateManyMutationInput, FavouriteCommunityUncheckedUpdateManyWithoutUserInput>
  }

  export type FavouriteCommunityScalarWhereInput = {
    AND?: FavouriteCommunityScalarWhereInput | FavouriteCommunityScalarWhereInput[]
    OR?: FavouriteCommunityScalarWhereInput[]
    NOT?: FavouriteCommunityScalarWhereInput | FavouriteCommunityScalarWhereInput[]
    communityId?: StringFilter<"FavouriteCommunity"> | string
    userId?: StringFilter<"FavouriteCommunity"> | string
  }

  export type UserShareUpsertWithWhereUniqueWithoutUserInput = {
    where: UserShareWhereUniqueInput
    update: XOR<UserShareUpdateWithoutUserInput, UserShareUncheckedUpdateWithoutUserInput>
    create: XOR<UserShareCreateWithoutUserInput, UserShareUncheckedCreateWithoutUserInput>
  }

  export type UserShareUpdateWithWhereUniqueWithoutUserInput = {
    where: UserShareWhereUniqueInput
    data: XOR<UserShareUpdateWithoutUserInput, UserShareUncheckedUpdateWithoutUserInput>
  }

  export type UserShareUpdateManyWithWhereWithoutUserInput = {
    where: UserShareScalarWhereInput
    data: XOR<UserShareUpdateManyMutationInput, UserShareUncheckedUpdateManyWithoutUserInput>
  }

  export type UserShareScalarWhereInput = {
    AND?: UserShareScalarWhereInput | UserShareScalarWhereInput[]
    OR?: UserShareScalarWhereInput[]
    NOT?: UserShareScalarWhereInput | UserShareScalarWhereInput[]
    userId?: StringFilter<"UserShare"> | string
    postId?: StringFilter<"UserShare"> | string
  }

  export type NotificationUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    update: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCreateWithoutUserInput, NotificationUncheckedCreateWithoutUserInput>
  }

  export type NotificationUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationWhereUniqueInput
    data: XOR<NotificationUpdateWithoutUserInput, NotificationUncheckedUpdateWithoutUserInput>
  }

  export type NotificationUpdateManyWithWhereWithoutUserInput = {
    where: NotificationScalarWhereInput
    data: XOR<NotificationUpdateManyMutationInput, NotificationUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationScalarWhereInput = {
    AND?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    OR?: NotificationScalarWhereInput[]
    NOT?: NotificationScalarWhereInput | NotificationScalarWhereInput[]
    id?: StringFilter<"Notification"> | string
    createdAt?: DateTimeFilter<"Notification"> | Date | string
    isRead?: BoolFilter<"Notification"> | boolean
    userId?: StringFilter<"Notification"> | string
  }

  export type NotificationStartFollowUpsertWithWhereUniqueWithoutUserNotificationStartFollowInput = {
    where: NotificationStartFollowWhereUniqueInput
    update: XOR<NotificationStartFollowUpdateWithoutUserNotificationStartFollowInput, NotificationStartFollowUncheckedUpdateWithoutUserNotificationStartFollowInput>
    create: XOR<NotificationStartFollowCreateWithoutUserNotificationStartFollowInput, NotificationStartFollowUncheckedCreateWithoutUserNotificationStartFollowInput>
  }

  export type NotificationStartFollowUpdateWithWhereUniqueWithoutUserNotificationStartFollowInput = {
    where: NotificationStartFollowWhereUniqueInput
    data: XOR<NotificationStartFollowUpdateWithoutUserNotificationStartFollowInput, NotificationStartFollowUncheckedUpdateWithoutUserNotificationStartFollowInput>
  }

  export type NotificationStartFollowUpdateManyWithWhereWithoutUserNotificationStartFollowInput = {
    where: NotificationStartFollowScalarWhereInput
    data: XOR<NotificationStartFollowUpdateManyMutationInput, NotificationStartFollowUncheckedUpdateManyWithoutUserNotificationStartFollowInput>
  }

  export type NotificationStartFollowScalarWhereInput = {
    AND?: NotificationStartFollowScalarWhereInput | NotificationStartFollowScalarWhereInput[]
    OR?: NotificationStartFollowScalarWhereInput[]
    NOT?: NotificationStartFollowScalarWhereInput | NotificationStartFollowScalarWhereInput[]
    id?: StringFilter<"NotificationStartFollow"> | string
    notificationId?: StringFilter<"NotificationStartFollow"> | string
    userIdNotificationStartFollow?: StringFilter<"NotificationStartFollow"> | string
  }

  export type NotificationCommunityNewMemberUpsertWithWhereUniqueWithoutUserInput = {
    where: NotificationCommunityNewMemberWhereUniqueInput
    update: XOR<NotificationCommunityNewMemberUpdateWithoutUserInput, NotificationCommunityNewMemberUncheckedUpdateWithoutUserInput>
    create: XOR<NotificationCommunityNewMemberCreateWithoutUserInput, NotificationCommunityNewMemberUncheckedCreateWithoutUserInput>
  }

  export type NotificationCommunityNewMemberUpdateWithWhereUniqueWithoutUserInput = {
    where: NotificationCommunityNewMemberWhereUniqueInput
    data: XOR<NotificationCommunityNewMemberUpdateWithoutUserInput, NotificationCommunityNewMemberUncheckedUpdateWithoutUserInput>
  }

  export type NotificationCommunityNewMemberUpdateManyWithWhereWithoutUserInput = {
    where: NotificationCommunityNewMemberScalarWhereInput
    data: XOR<NotificationCommunityNewMemberUpdateManyMutationInput, NotificationCommunityNewMemberUncheckedUpdateManyWithoutUserInput>
  }

  export type NotificationCommunityNewMemberScalarWhereInput = {
    AND?: NotificationCommunityNewMemberScalarWhereInput | NotificationCommunityNewMemberScalarWhereInput[]
    OR?: NotificationCommunityNewMemberScalarWhereInput[]
    NOT?: NotificationCommunityNewMemberScalarWhereInput | NotificationCommunityNewMemberScalarWhereInput[]
    id?: StringFilter<"NotificationCommunityNewMember"> | string
    notificationId?: StringFilter<"NotificationCommunityNewMember"> | string
    communityId?: StringFilter<"NotificationCommunityNewMember"> | string
    userId?: StringFilter<"NotificationCommunityNewMember"> | string
  }

  export type UserCreateWithoutPostsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    followedBy?: UserCreateNestedManyWithoutFollowingInput
    following?: UserCreateNestedManyWithoutFollowedByInput
    comments?: CommentCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    communities?: UserCommunityCreateNestedManyWithoutUserInput
    mentions?: MentionCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityCreateNestedManyWithoutUserInput
    sharedPost?: UserShareCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutPostsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    followedBy?: UserUncheckedCreateNestedManyWithoutFollowingInput
    following?: UserUncheckedCreateNestedManyWithoutFollowedByInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    communities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    mentions?: MentionUncheckedCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityUncheckedCreateNestedManyWithoutUserInput
    sharedPost?: UserShareUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutPostsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
  }

  export type CommentCreateWithoutPostInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutCommentsInput
    likes?: CommentLikeCreateNestedManyWithoutCommentInput
    parent?: CommentCreateNestedOneWithoutChildrenInput
    children?: CommentCreateNestedManyWithoutParentInput
    notificationPostComment?: NotificationPostCommentCreateNestedManyWithoutCommentInput
    notificationCommentReply?: NotificationCommentReplyCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutPostInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    parentId?: string | null
    isDeleted?: boolean
    likes?: CommentLikeUncheckedCreateNestedManyWithoutCommentInput
    children?: CommentUncheckedCreateNestedManyWithoutParentInput
    notificationPostComment?: NotificationPostCommentUncheckedCreateNestedManyWithoutCommentInput
    notificationCommentReply?: NotificationCommentReplyUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutPostInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
  }

  export type CommentCreateManyPostInputEnvelope = {
    data: CommentCreateManyPostInput | CommentCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type PostLikeCreateWithoutPostInput = {
    user: UserCreateNestedOneWithoutLikedPostsInput
  }

  export type PostLikeUncheckedCreateWithoutPostInput = {
    userId: string
  }

  export type PostLikeCreateOrConnectWithoutPostInput = {
    where: PostLikeWhereUniqueInput
    create: XOR<PostLikeCreateWithoutPostInput, PostLikeUncheckedCreateWithoutPostInput>
  }

  export type PostLikeCreateManyPostInputEnvelope = {
    data: PostLikeCreateManyPostInput | PostLikeCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type BookmarkCreateWithoutPostInput = {
    user: UserCreateNestedOneWithoutBookmarksInput
  }

  export type BookmarkUncheckedCreateWithoutPostInput = {
    userId: string
  }

  export type BookmarkCreateOrConnectWithoutPostInput = {
    where: BookmarkWhereUniqueInput
    create: XOR<BookmarkCreateWithoutPostInput, BookmarkUncheckedCreateWithoutPostInput>
  }

  export type BookmarkCreateManyPostInputEnvelope = {
    data: BookmarkCreateManyPostInput | BookmarkCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type ImageCreateWithoutPostInput = {
    id?: string
    url: string
    fallbackUrl: string
    alt: string
    width: number
    height: number
  }

  export type ImageUncheckedCreateWithoutPostInput = {
    id?: string
    url: string
    fallbackUrl: string
    alt: string
    width: number
    height: number
  }

  export type ImageCreateOrConnectWithoutPostInput = {
    where: ImageWhereUniqueInput
    create: XOR<ImageCreateWithoutPostInput, ImageUncheckedCreateWithoutPostInput>
  }

  export type ImageCreateManyPostInputEnvelope = {
    data: ImageCreateManyPostInput | ImageCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type PostTagCreateWithoutPostInput = {
    tag: TagCreateNestedOneWithoutPostsInput
  }

  export type PostTagUncheckedCreateWithoutPostInput = {
    tagName: string
  }

  export type PostTagCreateOrConnectWithoutPostInput = {
    where: PostTagWhereUniqueInput
    create: XOR<PostTagCreateWithoutPostInput, PostTagUncheckedCreateWithoutPostInput>
  }

  export type PostTagCreateManyPostInputEnvelope = {
    data: PostTagCreateManyPostInput | PostTagCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type PostCreateWithoutSharesInput = {
    id?: string
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    link?: string | null
    user: UserCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkCreateNestedManyWithoutPostInput
    images?: ImageCreateNestedManyWithoutPostInput
    tags?: PostTagCreateNestedManyWithoutPostInput
    shareParent?: PostCreateNestedOneWithoutSharesInput
    community?: CommunityCreateNestedOneWithoutPostsInput
    mentions?: MentionCreateNestedManyWithoutPostInput
    sharedBy?: UserShareCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutSharesInput = {
    id?: string
    content?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    shareParentId?: string | null
    communityId?: string | null
    link?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkUncheckedCreateNestedManyWithoutPostInput
    images?: ImageUncheckedCreateNestedManyWithoutPostInput
    tags?: PostTagUncheckedCreateNestedManyWithoutPostInput
    mentions?: MentionUncheckedCreateNestedManyWithoutPostInput
    sharedBy?: UserShareUncheckedCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutSharesInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutSharesInput, PostUncheckedCreateWithoutSharesInput>
  }

  export type PostCreateWithoutShareParentInput = {
    id?: string
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    link?: string | null
    user: UserCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkCreateNestedManyWithoutPostInput
    images?: ImageCreateNestedManyWithoutPostInput
    tags?: PostTagCreateNestedManyWithoutPostInput
    shares?: PostCreateNestedManyWithoutShareParentInput
    community?: CommunityCreateNestedOneWithoutPostsInput
    mentions?: MentionCreateNestedManyWithoutPostInput
    sharedBy?: UserShareCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutShareParentInput = {
    id?: string
    content?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    communityId?: string | null
    link?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkUncheckedCreateNestedManyWithoutPostInput
    images?: ImageUncheckedCreateNestedManyWithoutPostInput
    tags?: PostTagUncheckedCreateNestedManyWithoutPostInput
    shares?: PostUncheckedCreateNestedManyWithoutShareParentInput
    mentions?: MentionUncheckedCreateNestedManyWithoutPostInput
    sharedBy?: UserShareUncheckedCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutShareParentInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutShareParentInput, PostUncheckedCreateWithoutShareParentInput>
  }

  export type PostCreateManyShareParentInputEnvelope = {
    data: PostCreateManyShareParentInput | PostCreateManyShareParentInput[]
    skipDuplicates?: boolean
  }

  export type CommunityCreateWithoutPostsInput = {
    id?: string
    name: string
    image?: string
    bannerImage?: string
    description?: string
    members?: UserCommunityCreateNestedManyWithoutCommunityInput
    favouriteBy?: FavouriteCommunityCreateNestedManyWithoutCommunityInput
    category: CategoryCreateNestedOneWithoutComunitiesInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUncheckedCreateWithoutPostsInput = {
    id?: string
    name: string
    image?: string
    bannerImage?: string
    description?: string
    categoryId: string
    members?: UserCommunityUncheckedCreateNestedManyWithoutCommunityInput
    favouriteBy?: FavouriteCommunityUncheckedCreateNestedManyWithoutCommunityInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type CommunityCreateOrConnectWithoutPostsInput = {
    where: CommunityWhereUniqueInput
    create: XOR<CommunityCreateWithoutPostsInput, CommunityUncheckedCreateWithoutPostsInput>
  }

  export type MentionCreateWithoutPostInput = {
    user: UserCreateNestedOneWithoutMentionsInput
  }

  export type MentionUncheckedCreateWithoutPostInput = {
    userId: string
  }

  export type MentionCreateOrConnectWithoutPostInput = {
    where: MentionWhereUniqueInput
    create: XOR<MentionCreateWithoutPostInput, MentionUncheckedCreateWithoutPostInput>
  }

  export type MentionCreateManyPostInputEnvelope = {
    data: MentionCreateManyPostInput | MentionCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type UserShareCreateWithoutPostInput = {
    user: UserCreateNestedOneWithoutSharedPostInput
  }

  export type UserShareUncheckedCreateWithoutPostInput = {
    userId: string
  }

  export type UserShareCreateOrConnectWithoutPostInput = {
    where: UserShareWhereUniqueInput
    create: XOR<UserShareCreateWithoutPostInput, UserShareUncheckedCreateWithoutPostInput>
  }

  export type UserShareCreateManyPostInputEnvelope = {
    data: UserShareCreateManyPostInput | UserShareCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type NotificationMentionCreateWithoutPostInput = {
    id?: string
    notification: NotificationCreateNestedOneWithoutNotificationMentionInput
  }

  export type NotificationMentionUncheckedCreateWithoutPostInput = {
    id?: string
    notificationId: string
  }

  export type NotificationMentionCreateOrConnectWithoutPostInput = {
    where: NotificationMentionWhereUniqueInput
    create: XOR<NotificationMentionCreateWithoutPostInput, NotificationMentionUncheckedCreateWithoutPostInput>
  }

  export type NotificationMentionCreateManyPostInputEnvelope = {
    data: NotificationMentionCreateManyPostInput | NotificationMentionCreateManyPostInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutPostsInput = {
    update: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
    create: XOR<UserCreateWithoutPostsInput, UserUncheckedCreateWithoutPostsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutPostsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutPostsInput, UserUncheckedUpdateWithoutPostsInput>
  }

  export type UserUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    followedBy?: UserUpdateManyWithoutFollowingNestedInput
    following?: UserUpdateManyWithoutFollowedByNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUpdateManyWithoutUserNestedInput
    mentions?: MentionUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    following?: UserUncheckedUpdateManyWithoutFollowedByNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUncheckedUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>
    create: XOR<CommentCreateWithoutPostInput, CommentUncheckedCreateWithoutPostInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutPostInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutPostInput, CommentUncheckedUpdateWithoutPostInput>
  }

  export type CommentUpdateManyWithWhereWithoutPostInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutPostInput>
  }

  export type PostLikeUpsertWithWhereUniqueWithoutPostInput = {
    where: PostLikeWhereUniqueInput
    update: XOR<PostLikeUpdateWithoutPostInput, PostLikeUncheckedUpdateWithoutPostInput>
    create: XOR<PostLikeCreateWithoutPostInput, PostLikeUncheckedCreateWithoutPostInput>
  }

  export type PostLikeUpdateWithWhereUniqueWithoutPostInput = {
    where: PostLikeWhereUniqueInput
    data: XOR<PostLikeUpdateWithoutPostInput, PostLikeUncheckedUpdateWithoutPostInput>
  }

  export type PostLikeUpdateManyWithWhereWithoutPostInput = {
    where: PostLikeScalarWhereInput
    data: XOR<PostLikeUpdateManyMutationInput, PostLikeUncheckedUpdateManyWithoutPostInput>
  }

  export type BookmarkUpsertWithWhereUniqueWithoutPostInput = {
    where: BookmarkWhereUniqueInput
    update: XOR<BookmarkUpdateWithoutPostInput, BookmarkUncheckedUpdateWithoutPostInput>
    create: XOR<BookmarkCreateWithoutPostInput, BookmarkUncheckedCreateWithoutPostInput>
  }

  export type BookmarkUpdateWithWhereUniqueWithoutPostInput = {
    where: BookmarkWhereUniqueInput
    data: XOR<BookmarkUpdateWithoutPostInput, BookmarkUncheckedUpdateWithoutPostInput>
  }

  export type BookmarkUpdateManyWithWhereWithoutPostInput = {
    where: BookmarkScalarWhereInput
    data: XOR<BookmarkUpdateManyMutationInput, BookmarkUncheckedUpdateManyWithoutPostInput>
  }

  export type ImageUpsertWithWhereUniqueWithoutPostInput = {
    where: ImageWhereUniqueInput
    update: XOR<ImageUpdateWithoutPostInput, ImageUncheckedUpdateWithoutPostInput>
    create: XOR<ImageCreateWithoutPostInput, ImageUncheckedCreateWithoutPostInput>
  }

  export type ImageUpdateWithWhereUniqueWithoutPostInput = {
    where: ImageWhereUniqueInput
    data: XOR<ImageUpdateWithoutPostInput, ImageUncheckedUpdateWithoutPostInput>
  }

  export type ImageUpdateManyWithWhereWithoutPostInput = {
    where: ImageScalarWhereInput
    data: XOR<ImageUpdateManyMutationInput, ImageUncheckedUpdateManyWithoutPostInput>
  }

  export type ImageScalarWhereInput = {
    AND?: ImageScalarWhereInput | ImageScalarWhereInput[]
    OR?: ImageScalarWhereInput[]
    NOT?: ImageScalarWhereInput | ImageScalarWhereInput[]
    id?: StringFilter<"Image"> | string
    url?: StringFilter<"Image"> | string
    fallbackUrl?: StringFilter<"Image"> | string
    alt?: StringFilter<"Image"> | string
    postId?: StringFilter<"Image"> | string
    width?: IntFilter<"Image"> | number
    height?: IntFilter<"Image"> | number
  }

  export type PostTagUpsertWithWhereUniqueWithoutPostInput = {
    where: PostTagWhereUniqueInput
    update: XOR<PostTagUpdateWithoutPostInput, PostTagUncheckedUpdateWithoutPostInput>
    create: XOR<PostTagCreateWithoutPostInput, PostTagUncheckedCreateWithoutPostInput>
  }

  export type PostTagUpdateWithWhereUniqueWithoutPostInput = {
    where: PostTagWhereUniqueInput
    data: XOR<PostTagUpdateWithoutPostInput, PostTagUncheckedUpdateWithoutPostInput>
  }

  export type PostTagUpdateManyWithWhereWithoutPostInput = {
    where: PostTagScalarWhereInput
    data: XOR<PostTagUpdateManyMutationInput, PostTagUncheckedUpdateManyWithoutPostInput>
  }

  export type PostTagScalarWhereInput = {
    AND?: PostTagScalarWhereInput | PostTagScalarWhereInput[]
    OR?: PostTagScalarWhereInput[]
    NOT?: PostTagScalarWhereInput | PostTagScalarWhereInput[]
    tagName?: StringFilter<"PostTag"> | string
    postId?: StringFilter<"PostTag"> | string
  }

  export type PostUpsertWithoutSharesInput = {
    update: XOR<PostUpdateWithoutSharesInput, PostUncheckedUpdateWithoutSharesInput>
    create: XOR<PostCreateWithoutSharesInput, PostUncheckedCreateWithoutSharesInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutSharesInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutSharesInput, PostUncheckedUpdateWithoutSharesInput>
  }

  export type PostUpdateWithoutSharesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUpdateManyWithoutPostNestedInput
    images?: ImageUpdateManyWithoutPostNestedInput
    tags?: PostTagUpdateManyWithoutPostNestedInput
    shareParent?: PostUpdateOneWithoutSharesNestedInput
    community?: CommunityUpdateOneWithoutPostsNestedInput
    mentions?: MentionUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutSharesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    shareParentId?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUncheckedUpdateManyWithoutPostNestedInput
    images?: ImageUncheckedUpdateManyWithoutPostNestedInput
    tags?: PostTagUncheckedUpdateManyWithoutPostNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUncheckedUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUpsertWithWhereUniqueWithoutShareParentInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutShareParentInput, PostUncheckedUpdateWithoutShareParentInput>
    create: XOR<PostCreateWithoutShareParentInput, PostUncheckedCreateWithoutShareParentInput>
  }

  export type PostUpdateWithWhereUniqueWithoutShareParentInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutShareParentInput, PostUncheckedUpdateWithoutShareParentInput>
  }

  export type PostUpdateManyWithWhereWithoutShareParentInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutShareParentInput>
  }

  export type CommunityUpsertWithoutPostsInput = {
    update: XOR<CommunityUpdateWithoutPostsInput, CommunityUncheckedUpdateWithoutPostsInput>
    create: XOR<CommunityCreateWithoutPostsInput, CommunityUncheckedCreateWithoutPostsInput>
    where?: CommunityWhereInput
  }

  export type CommunityUpdateToOneWithWhereWithoutPostsInput = {
    where?: CommunityWhereInput
    data: XOR<CommunityUpdateWithoutPostsInput, CommunityUncheckedUpdateWithoutPostsInput>
  }

  export type CommunityUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    bannerImage?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    members?: UserCommunityUpdateManyWithoutCommunityNestedInput
    favouriteBy?: FavouriteCommunityUpdateManyWithoutCommunityNestedInput
    category?: CategoryUpdateOneRequiredWithoutComunitiesNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateWithoutPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    bannerImage?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    members?: UserCommunityUncheckedUpdateManyWithoutCommunityNestedInput
    favouriteBy?: FavouriteCommunityUncheckedUpdateManyWithoutCommunityNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutCommunityNestedInput
  }

  export type MentionUpsertWithWhereUniqueWithoutPostInput = {
    where: MentionWhereUniqueInput
    update: XOR<MentionUpdateWithoutPostInput, MentionUncheckedUpdateWithoutPostInput>
    create: XOR<MentionCreateWithoutPostInput, MentionUncheckedCreateWithoutPostInput>
  }

  export type MentionUpdateWithWhereUniqueWithoutPostInput = {
    where: MentionWhereUniqueInput
    data: XOR<MentionUpdateWithoutPostInput, MentionUncheckedUpdateWithoutPostInput>
  }

  export type MentionUpdateManyWithWhereWithoutPostInput = {
    where: MentionScalarWhereInput
    data: XOR<MentionUpdateManyMutationInput, MentionUncheckedUpdateManyWithoutPostInput>
  }

  export type UserShareUpsertWithWhereUniqueWithoutPostInput = {
    where: UserShareWhereUniqueInput
    update: XOR<UserShareUpdateWithoutPostInput, UserShareUncheckedUpdateWithoutPostInput>
    create: XOR<UserShareCreateWithoutPostInput, UserShareUncheckedCreateWithoutPostInput>
  }

  export type UserShareUpdateWithWhereUniqueWithoutPostInput = {
    where: UserShareWhereUniqueInput
    data: XOR<UserShareUpdateWithoutPostInput, UserShareUncheckedUpdateWithoutPostInput>
  }

  export type UserShareUpdateManyWithWhereWithoutPostInput = {
    where: UserShareScalarWhereInput
    data: XOR<UserShareUpdateManyMutationInput, UserShareUncheckedUpdateManyWithoutPostInput>
  }

  export type NotificationMentionUpsertWithWhereUniqueWithoutPostInput = {
    where: NotificationMentionWhereUniqueInput
    update: XOR<NotificationMentionUpdateWithoutPostInput, NotificationMentionUncheckedUpdateWithoutPostInput>
    create: XOR<NotificationMentionCreateWithoutPostInput, NotificationMentionUncheckedCreateWithoutPostInput>
  }

  export type NotificationMentionUpdateWithWhereUniqueWithoutPostInput = {
    where: NotificationMentionWhereUniqueInput
    data: XOR<NotificationMentionUpdateWithoutPostInput, NotificationMentionUncheckedUpdateWithoutPostInput>
  }

  export type NotificationMentionUpdateManyWithWhereWithoutPostInput = {
    where: NotificationMentionScalarWhereInput
    data: XOR<NotificationMentionUpdateManyMutationInput, NotificationMentionUncheckedUpdateManyWithoutPostInput>
  }

  export type NotificationMentionScalarWhereInput = {
    AND?: NotificationMentionScalarWhereInput | NotificationMentionScalarWhereInput[]
    OR?: NotificationMentionScalarWhereInput[]
    NOT?: NotificationMentionScalarWhereInput | NotificationMentionScalarWhereInput[]
    id?: StringFilter<"NotificationMention"> | string
    notificationId?: StringFilter<"NotificationMention"> | string
    postId?: StringFilter<"NotificationMention"> | string
  }

  export type UserCreateWithoutMentionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    followedBy?: UserCreateNestedManyWithoutFollowingInput
    following?: UserCreateNestedManyWithoutFollowedByInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    communities?: UserCommunityCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityCreateNestedManyWithoutUserInput
    sharedPost?: UserShareCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutMentionsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    followedBy?: UserUncheckedCreateNestedManyWithoutFollowingInput
    following?: UserUncheckedCreateNestedManyWithoutFollowedByInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    communities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityUncheckedCreateNestedManyWithoutUserInput
    sharedPost?: UserShareUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutMentionsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutMentionsInput, UserUncheckedCreateWithoutMentionsInput>
  }

  export type PostCreateWithoutMentionsInput = {
    id?: string
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    link?: string | null
    user: UserCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkCreateNestedManyWithoutPostInput
    images?: ImageCreateNestedManyWithoutPostInput
    tags?: PostTagCreateNestedManyWithoutPostInput
    shareParent?: PostCreateNestedOneWithoutSharesInput
    shares?: PostCreateNestedManyWithoutShareParentInput
    community?: CommunityCreateNestedOneWithoutPostsInput
    sharedBy?: UserShareCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutMentionsInput = {
    id?: string
    content?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    shareParentId?: string | null
    communityId?: string | null
    link?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkUncheckedCreateNestedManyWithoutPostInput
    images?: ImageUncheckedCreateNestedManyWithoutPostInput
    tags?: PostTagUncheckedCreateNestedManyWithoutPostInput
    shares?: PostUncheckedCreateNestedManyWithoutShareParentInput
    sharedBy?: UserShareUncheckedCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutMentionsInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutMentionsInput, PostUncheckedCreateWithoutMentionsInput>
  }

  export type UserUpsertWithoutMentionsInput = {
    update: XOR<UserUpdateWithoutMentionsInput, UserUncheckedUpdateWithoutMentionsInput>
    create: XOR<UserCreateWithoutMentionsInput, UserUncheckedCreateWithoutMentionsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutMentionsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutMentionsInput, UserUncheckedUpdateWithoutMentionsInput>
  }

  export type UserUpdateWithoutMentionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    followedBy?: UserUpdateManyWithoutFollowingNestedInput
    following?: UserUpdateManyWithoutFollowedByNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutMentionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    following?: UserUncheckedUpdateManyWithoutFollowedByNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUncheckedUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostUpsertWithoutMentionsInput = {
    update: XOR<PostUpdateWithoutMentionsInput, PostUncheckedUpdateWithoutMentionsInput>
    create: XOR<PostCreateWithoutMentionsInput, PostUncheckedCreateWithoutMentionsInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutMentionsInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutMentionsInput, PostUncheckedUpdateWithoutMentionsInput>
  }

  export type PostUpdateWithoutMentionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUpdateManyWithoutPostNestedInput
    images?: ImageUpdateManyWithoutPostNestedInput
    tags?: PostTagUpdateManyWithoutPostNestedInput
    shareParent?: PostUpdateOneWithoutSharesNestedInput
    shares?: PostUpdateManyWithoutShareParentNestedInput
    community?: CommunityUpdateOneWithoutPostsNestedInput
    sharedBy?: UserShareUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutMentionsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    shareParentId?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUncheckedUpdateManyWithoutPostNestedInput
    images?: ImageUncheckedUpdateManyWithoutPostNestedInput
    tags?: PostTagUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostUncheckedUpdateManyWithoutShareParentNestedInput
    sharedBy?: UserShareUncheckedUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserCreateWithoutNotificationsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    followedBy?: UserCreateNestedManyWithoutFollowingInput
    following?: UserCreateNestedManyWithoutFollowedByInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    communities?: UserCommunityCreateNestedManyWithoutUserInput
    mentions?: MentionCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityCreateNestedManyWithoutUserInput
    sharedPost?: UserShareCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    followedBy?: UserUncheckedCreateNestedManyWithoutFollowingInput
    following?: UserUncheckedCreateNestedManyWithoutFollowedByInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    communities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    mentions?: MentionUncheckedCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityUncheckedCreateNestedManyWithoutUserInput
    sharedPost?: UserShareUncheckedCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
  }

  export type NotificationMentionCreateWithoutNotificationInput = {
    id?: string
    post: PostCreateNestedOneWithoutNotificationMentionInput
  }

  export type NotificationMentionUncheckedCreateWithoutNotificationInput = {
    id?: string
    postId: string
  }

  export type NotificationMentionCreateOrConnectWithoutNotificationInput = {
    where: NotificationMentionWhereUniqueInput
    create: XOR<NotificationMentionCreateWithoutNotificationInput, NotificationMentionUncheckedCreateWithoutNotificationInput>
  }

  export type NotificationStartFollowCreateWithoutNotificationInput = {
    id?: string
    userNotificationStartFollow: UserCreateNestedOneWithoutNotificationStartFollowInput
  }

  export type NotificationStartFollowUncheckedCreateWithoutNotificationInput = {
    id?: string
    userIdNotificationStartFollow: string
  }

  export type NotificationStartFollowCreateOrConnectWithoutNotificationInput = {
    where: NotificationStartFollowWhereUniqueInput
    create: XOR<NotificationStartFollowCreateWithoutNotificationInput, NotificationStartFollowUncheckedCreateWithoutNotificationInput>
  }

  export type NotificationCommunityNewMemberCreateWithoutNotificationInput = {
    id?: string
    community: CommunityCreateNestedOneWithoutNotificationCommunityNewMemberInput
    user: UserCreateNestedOneWithoutNotificationCommunityNewMemberInput
  }

  export type NotificationCommunityNewMemberUncheckedCreateWithoutNotificationInput = {
    id?: string
    communityId: string
    userId: string
  }

  export type NotificationCommunityNewMemberCreateOrConnectWithoutNotificationInput = {
    where: NotificationCommunityNewMemberWhereUniqueInput
    create: XOR<NotificationCommunityNewMemberCreateWithoutNotificationInput, NotificationCommunityNewMemberUncheckedCreateWithoutNotificationInput>
  }

  export type NotificationPostCommentCreateWithoutNotificationInput = {
    id?: string
    comment: CommentCreateNestedOneWithoutNotificationPostCommentInput
  }

  export type NotificationPostCommentUncheckedCreateWithoutNotificationInput = {
    id?: string
    commentId: string
  }

  export type NotificationPostCommentCreateOrConnectWithoutNotificationInput = {
    where: NotificationPostCommentWhereUniqueInput
    create: XOR<NotificationPostCommentCreateWithoutNotificationInput, NotificationPostCommentUncheckedCreateWithoutNotificationInput>
  }

  export type NotificationCommentReplyCreateWithoutNotificationInput = {
    id?: string
    comment: CommentCreateNestedOneWithoutNotificationCommentReplyInput
  }

  export type NotificationCommentReplyUncheckedCreateWithoutNotificationInput = {
    id?: string
    commentId: string
  }

  export type NotificationCommentReplyCreateOrConnectWithoutNotificationInput = {
    where: NotificationCommentReplyWhereUniqueInput
    create: XOR<NotificationCommentReplyCreateWithoutNotificationInput, NotificationCommentReplyUncheckedCreateWithoutNotificationInput>
  }

  export type UserUpsertWithoutNotificationsInput = {
    update: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
    create: XOR<UserCreateWithoutNotificationsInput, UserUncheckedCreateWithoutNotificationsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationsInput, UserUncheckedUpdateWithoutNotificationsInput>
  }

  export type UserUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    followedBy?: UserUpdateManyWithoutFollowingNestedInput
    following?: UserUpdateManyWithoutFollowedByNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUpdateManyWithoutUserNestedInput
    mentions?: MentionUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    following?: UserUncheckedUpdateManyWithoutFollowedByNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUncheckedUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUncheckedUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type NotificationMentionUpsertWithoutNotificationInput = {
    update: XOR<NotificationMentionUpdateWithoutNotificationInput, NotificationMentionUncheckedUpdateWithoutNotificationInput>
    create: XOR<NotificationMentionCreateWithoutNotificationInput, NotificationMentionUncheckedCreateWithoutNotificationInput>
    where?: NotificationMentionWhereInput
  }

  export type NotificationMentionUpdateToOneWithWhereWithoutNotificationInput = {
    where?: NotificationMentionWhereInput
    data: XOR<NotificationMentionUpdateWithoutNotificationInput, NotificationMentionUncheckedUpdateWithoutNotificationInput>
  }

  export type NotificationMentionUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    post?: PostUpdateOneRequiredWithoutNotificationMentionNestedInput
  }

  export type NotificationMentionUncheckedUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationStartFollowUpsertWithoutNotificationInput = {
    update: XOR<NotificationStartFollowUpdateWithoutNotificationInput, NotificationStartFollowUncheckedUpdateWithoutNotificationInput>
    create: XOR<NotificationStartFollowCreateWithoutNotificationInput, NotificationStartFollowUncheckedCreateWithoutNotificationInput>
    where?: NotificationStartFollowWhereInput
  }

  export type NotificationStartFollowUpdateToOneWithWhereWithoutNotificationInput = {
    where?: NotificationStartFollowWhereInput
    data: XOR<NotificationStartFollowUpdateWithoutNotificationInput, NotificationStartFollowUncheckedUpdateWithoutNotificationInput>
  }

  export type NotificationStartFollowUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userNotificationStartFollow?: UserUpdateOneRequiredWithoutNotificationStartFollowNestedInput
  }

  export type NotificationStartFollowUncheckedUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    userIdNotificationStartFollow?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCommunityNewMemberUpsertWithoutNotificationInput = {
    update: XOR<NotificationCommunityNewMemberUpdateWithoutNotificationInput, NotificationCommunityNewMemberUncheckedUpdateWithoutNotificationInput>
    create: XOR<NotificationCommunityNewMemberCreateWithoutNotificationInput, NotificationCommunityNewMemberUncheckedCreateWithoutNotificationInput>
    where?: NotificationCommunityNewMemberWhereInput
  }

  export type NotificationCommunityNewMemberUpdateToOneWithWhereWithoutNotificationInput = {
    where?: NotificationCommunityNewMemberWhereInput
    data: XOR<NotificationCommunityNewMemberUpdateWithoutNotificationInput, NotificationCommunityNewMemberUncheckedUpdateWithoutNotificationInput>
  }

  export type NotificationCommunityNewMemberUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    community?: CommunityUpdateOneRequiredWithoutNotificationCommunityNewMemberNestedInput
    user?: UserUpdateOneRequiredWithoutNotificationCommunityNewMemberNestedInput
  }

  export type NotificationCommunityNewMemberUncheckedUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationPostCommentUpsertWithoutNotificationInput = {
    update: XOR<NotificationPostCommentUpdateWithoutNotificationInput, NotificationPostCommentUncheckedUpdateWithoutNotificationInput>
    create: XOR<NotificationPostCommentCreateWithoutNotificationInput, NotificationPostCommentUncheckedCreateWithoutNotificationInput>
    where?: NotificationPostCommentWhereInput
  }

  export type NotificationPostCommentUpdateToOneWithWhereWithoutNotificationInput = {
    where?: NotificationPostCommentWhereInput
    data: XOR<NotificationPostCommentUpdateWithoutNotificationInput, NotificationPostCommentUncheckedUpdateWithoutNotificationInput>
  }

  export type NotificationPostCommentUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: CommentUpdateOneRequiredWithoutNotificationPostCommentNestedInput
  }

  export type NotificationPostCommentUncheckedUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCommentReplyUpsertWithoutNotificationInput = {
    update: XOR<NotificationCommentReplyUpdateWithoutNotificationInput, NotificationCommentReplyUncheckedUpdateWithoutNotificationInput>
    create: XOR<NotificationCommentReplyCreateWithoutNotificationInput, NotificationCommentReplyUncheckedCreateWithoutNotificationInput>
    where?: NotificationCommentReplyWhereInput
  }

  export type NotificationCommentReplyUpdateToOneWithWhereWithoutNotificationInput = {
    where?: NotificationCommentReplyWhereInput
    data: XOR<NotificationCommentReplyUpdateWithoutNotificationInput, NotificationCommentReplyUncheckedUpdateWithoutNotificationInput>
  }

  export type NotificationCommentReplyUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    comment?: CommentUpdateOneRequiredWithoutNotificationCommentReplyNestedInput
  }

  export type NotificationCommentReplyUncheckedUpdateWithoutNotificationInput = {
    id?: StringFieldUpdateOperationsInput | string
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCreateWithoutNotificationMentionInput = {
    id?: string
    createdAt?: Date | string
    isRead?: boolean
    user: UserCreateNestedOneWithoutNotificationsInput
    notificationStartFollow?: NotificationStartFollowCreateNestedOneWithoutNotificationInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedOneWithoutNotificationInput
    notificationPostComment?: NotificationPostCommentCreateNestedOneWithoutNotificationInput
    notificationCommentReply?: NotificationCommentReplyCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateWithoutNotificationMentionInput = {
    id?: string
    createdAt?: Date | string
    isRead?: boolean
    userId: string
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedOneWithoutNotificationInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedOneWithoutNotificationInput
    notificationPostComment?: NotificationPostCommentUncheckedCreateNestedOneWithoutNotificationInput
    notificationCommentReply?: NotificationCommentReplyUncheckedCreateNestedOneWithoutNotificationInput
  }

  export type NotificationCreateOrConnectWithoutNotificationMentionInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutNotificationMentionInput, NotificationUncheckedCreateWithoutNotificationMentionInput>
  }

  export type PostCreateWithoutNotificationMentionInput = {
    id?: string
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    link?: string | null
    user: UserCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkCreateNestedManyWithoutPostInput
    images?: ImageCreateNestedManyWithoutPostInput
    tags?: PostTagCreateNestedManyWithoutPostInput
    shareParent?: PostCreateNestedOneWithoutSharesInput
    shares?: PostCreateNestedManyWithoutShareParentInput
    community?: CommunityCreateNestedOneWithoutPostsInput
    mentions?: MentionCreateNestedManyWithoutPostInput
    sharedBy?: UserShareCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutNotificationMentionInput = {
    id?: string
    content?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    shareParentId?: string | null
    communityId?: string | null
    link?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkUncheckedCreateNestedManyWithoutPostInput
    images?: ImageUncheckedCreateNestedManyWithoutPostInput
    tags?: PostTagUncheckedCreateNestedManyWithoutPostInput
    shares?: PostUncheckedCreateNestedManyWithoutShareParentInput
    mentions?: MentionUncheckedCreateNestedManyWithoutPostInput
    sharedBy?: UserShareUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutNotificationMentionInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutNotificationMentionInput, PostUncheckedCreateWithoutNotificationMentionInput>
  }

  export type NotificationUpsertWithoutNotificationMentionInput = {
    update: XOR<NotificationUpdateWithoutNotificationMentionInput, NotificationUncheckedUpdateWithoutNotificationMentionInput>
    create: XOR<NotificationCreateWithoutNotificationMentionInput, NotificationUncheckedCreateWithoutNotificationMentionInput>
    where?: NotificationWhereInput
  }

  export type NotificationUpdateToOneWithWhereWithoutNotificationMentionInput = {
    where?: NotificationWhereInput
    data: XOR<NotificationUpdateWithoutNotificationMentionInput, NotificationUncheckedUpdateWithoutNotificationMentionInput>
  }

  export type NotificationUpdateWithoutNotificationMentionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateOneWithoutNotificationNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateOneWithoutNotificationNestedInput
    notificationPostComment?: NotificationPostCommentUpdateOneWithoutNotificationNestedInput
    notificationCommentReply?: NotificationCommentReplyUpdateOneWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutNotificationMentionInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateOneWithoutNotificationNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateOneWithoutNotificationNestedInput
    notificationPostComment?: NotificationPostCommentUncheckedUpdateOneWithoutNotificationNestedInput
    notificationCommentReply?: NotificationCommentReplyUncheckedUpdateOneWithoutNotificationNestedInput
  }

  export type PostUpsertWithoutNotificationMentionInput = {
    update: XOR<PostUpdateWithoutNotificationMentionInput, PostUncheckedUpdateWithoutNotificationMentionInput>
    create: XOR<PostCreateWithoutNotificationMentionInput, PostUncheckedCreateWithoutNotificationMentionInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutNotificationMentionInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutNotificationMentionInput, PostUncheckedUpdateWithoutNotificationMentionInput>
  }

  export type PostUpdateWithoutNotificationMentionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUpdateManyWithoutPostNestedInput
    images?: ImageUpdateManyWithoutPostNestedInput
    tags?: PostTagUpdateManyWithoutPostNestedInput
    shareParent?: PostUpdateOneWithoutSharesNestedInput
    shares?: PostUpdateManyWithoutShareParentNestedInput
    community?: CommunityUpdateOneWithoutPostsNestedInput
    mentions?: MentionUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutNotificationMentionInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    shareParentId?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUncheckedUpdateManyWithoutPostNestedInput
    images?: ImageUncheckedUpdateManyWithoutPostNestedInput
    tags?: PostTagUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostUncheckedUpdateManyWithoutShareParentNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUncheckedUpdateManyWithoutPostNestedInput
  }

  export type NotificationCreateWithoutNotificationStartFollowInput = {
    id?: string
    createdAt?: Date | string
    isRead?: boolean
    user: UserCreateNestedOneWithoutNotificationsInput
    notificationMention?: NotificationMentionCreateNestedOneWithoutNotificationInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedOneWithoutNotificationInput
    notificationPostComment?: NotificationPostCommentCreateNestedOneWithoutNotificationInput
    notificationCommentReply?: NotificationCommentReplyCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateWithoutNotificationStartFollowInput = {
    id?: string
    createdAt?: Date | string
    isRead?: boolean
    userId: string
    notificationMention?: NotificationMentionUncheckedCreateNestedOneWithoutNotificationInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedOneWithoutNotificationInput
    notificationPostComment?: NotificationPostCommentUncheckedCreateNestedOneWithoutNotificationInput
    notificationCommentReply?: NotificationCommentReplyUncheckedCreateNestedOneWithoutNotificationInput
  }

  export type NotificationCreateOrConnectWithoutNotificationStartFollowInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutNotificationStartFollowInput, NotificationUncheckedCreateWithoutNotificationStartFollowInput>
  }

  export type UserCreateWithoutNotificationStartFollowInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    followedBy?: UserCreateNestedManyWithoutFollowingInput
    following?: UserCreateNestedManyWithoutFollowedByInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    communities?: UserCommunityCreateNestedManyWithoutUserInput
    mentions?: MentionCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityCreateNestedManyWithoutUserInput
    sharedPost?: UserShareCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutNotificationStartFollowInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    followedBy?: UserUncheckedCreateNestedManyWithoutFollowingInput
    following?: UserUncheckedCreateNestedManyWithoutFollowedByInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    communities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    mentions?: MentionUncheckedCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityUncheckedCreateNestedManyWithoutUserInput
    sharedPost?: UserShareUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutNotificationStartFollowInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationStartFollowInput, UserUncheckedCreateWithoutNotificationStartFollowInput>
  }

  export type NotificationUpsertWithoutNotificationStartFollowInput = {
    update: XOR<NotificationUpdateWithoutNotificationStartFollowInput, NotificationUncheckedUpdateWithoutNotificationStartFollowInput>
    create: XOR<NotificationCreateWithoutNotificationStartFollowInput, NotificationUncheckedCreateWithoutNotificationStartFollowInput>
    where?: NotificationWhereInput
  }

  export type NotificationUpdateToOneWithWhereWithoutNotificationStartFollowInput = {
    where?: NotificationWhereInput
    data: XOR<NotificationUpdateWithoutNotificationStartFollowInput, NotificationUncheckedUpdateWithoutNotificationStartFollowInput>
  }

  export type NotificationUpdateWithoutNotificationStartFollowInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    notificationMention?: NotificationMentionUpdateOneWithoutNotificationNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateOneWithoutNotificationNestedInput
    notificationPostComment?: NotificationPostCommentUpdateOneWithoutNotificationNestedInput
    notificationCommentReply?: NotificationCommentReplyUpdateOneWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutNotificationStartFollowInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    notificationMention?: NotificationMentionUncheckedUpdateOneWithoutNotificationNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateOneWithoutNotificationNestedInput
    notificationPostComment?: NotificationPostCommentUncheckedUpdateOneWithoutNotificationNestedInput
    notificationCommentReply?: NotificationCommentReplyUncheckedUpdateOneWithoutNotificationNestedInput
  }

  export type UserUpsertWithoutNotificationStartFollowInput = {
    update: XOR<UserUpdateWithoutNotificationStartFollowInput, UserUncheckedUpdateWithoutNotificationStartFollowInput>
    create: XOR<UserCreateWithoutNotificationStartFollowInput, UserUncheckedCreateWithoutNotificationStartFollowInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationStartFollowInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationStartFollowInput, UserUncheckedUpdateWithoutNotificationStartFollowInput>
  }

  export type UserUpdateWithoutNotificationStartFollowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    followedBy?: UserUpdateManyWithoutFollowingNestedInput
    following?: UserUpdateManyWithoutFollowedByNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUpdateManyWithoutUserNestedInput
    mentions?: MentionUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationStartFollowInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    following?: UserUncheckedUpdateManyWithoutFollowedByNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUncheckedUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type NotificationCreateWithoutNotificationCommunityNewMemberInput = {
    id?: string
    createdAt?: Date | string
    isRead?: boolean
    user: UserCreateNestedOneWithoutNotificationsInput
    notificationMention?: NotificationMentionCreateNestedOneWithoutNotificationInput
    notificationStartFollow?: NotificationStartFollowCreateNestedOneWithoutNotificationInput
    notificationPostComment?: NotificationPostCommentCreateNestedOneWithoutNotificationInput
    notificationCommentReply?: NotificationCommentReplyCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateWithoutNotificationCommunityNewMemberInput = {
    id?: string
    createdAt?: Date | string
    isRead?: boolean
    userId: string
    notificationMention?: NotificationMentionUncheckedCreateNestedOneWithoutNotificationInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedOneWithoutNotificationInput
    notificationPostComment?: NotificationPostCommentUncheckedCreateNestedOneWithoutNotificationInput
    notificationCommentReply?: NotificationCommentReplyUncheckedCreateNestedOneWithoutNotificationInput
  }

  export type NotificationCreateOrConnectWithoutNotificationCommunityNewMemberInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutNotificationCommunityNewMemberInput, NotificationUncheckedCreateWithoutNotificationCommunityNewMemberInput>
  }

  export type CommunityCreateWithoutNotificationCommunityNewMemberInput = {
    id?: string
    name: string
    image?: string
    bannerImage?: string
    description?: string
    posts?: PostCreateNestedManyWithoutCommunityInput
    members?: UserCommunityCreateNestedManyWithoutCommunityInput
    favouriteBy?: FavouriteCommunityCreateNestedManyWithoutCommunityInput
    category: CategoryCreateNestedOneWithoutComunitiesInput
  }

  export type CommunityUncheckedCreateWithoutNotificationCommunityNewMemberInput = {
    id?: string
    name: string
    image?: string
    bannerImage?: string
    description?: string
    categoryId: string
    posts?: PostUncheckedCreateNestedManyWithoutCommunityInput
    members?: UserCommunityUncheckedCreateNestedManyWithoutCommunityInput
    favouriteBy?: FavouriteCommunityUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type CommunityCreateOrConnectWithoutNotificationCommunityNewMemberInput = {
    where: CommunityWhereUniqueInput
    create: XOR<CommunityCreateWithoutNotificationCommunityNewMemberInput, CommunityUncheckedCreateWithoutNotificationCommunityNewMemberInput>
  }

  export type UserCreateWithoutNotificationCommunityNewMemberInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    followedBy?: UserCreateNestedManyWithoutFollowingInput
    following?: UserCreateNestedManyWithoutFollowedByInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    communities?: UserCommunityCreateNestedManyWithoutUserInput
    mentions?: MentionCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityCreateNestedManyWithoutUserInput
    sharedPost?: UserShareCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowCreateNestedManyWithoutUserNotificationStartFollowInput
  }

  export type UserUncheckedCreateWithoutNotificationCommunityNewMemberInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    followedBy?: UserUncheckedCreateNestedManyWithoutFollowingInput
    following?: UserUncheckedCreateNestedManyWithoutFollowedByInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    communities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    mentions?: MentionUncheckedCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityUncheckedCreateNestedManyWithoutUserInput
    sharedPost?: UserShareUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedManyWithoutUserNotificationStartFollowInput
  }

  export type UserCreateOrConnectWithoutNotificationCommunityNewMemberInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutNotificationCommunityNewMemberInput, UserUncheckedCreateWithoutNotificationCommunityNewMemberInput>
  }

  export type NotificationUpsertWithoutNotificationCommunityNewMemberInput = {
    update: XOR<NotificationUpdateWithoutNotificationCommunityNewMemberInput, NotificationUncheckedUpdateWithoutNotificationCommunityNewMemberInput>
    create: XOR<NotificationCreateWithoutNotificationCommunityNewMemberInput, NotificationUncheckedCreateWithoutNotificationCommunityNewMemberInput>
    where?: NotificationWhereInput
  }

  export type NotificationUpdateToOneWithWhereWithoutNotificationCommunityNewMemberInput = {
    where?: NotificationWhereInput
    data: XOR<NotificationUpdateWithoutNotificationCommunityNewMemberInput, NotificationUncheckedUpdateWithoutNotificationCommunityNewMemberInput>
  }

  export type NotificationUpdateWithoutNotificationCommunityNewMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    notificationMention?: NotificationMentionUpdateOneWithoutNotificationNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateOneWithoutNotificationNestedInput
    notificationPostComment?: NotificationPostCommentUpdateOneWithoutNotificationNestedInput
    notificationCommentReply?: NotificationCommentReplyUpdateOneWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutNotificationCommunityNewMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    notificationMention?: NotificationMentionUncheckedUpdateOneWithoutNotificationNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateOneWithoutNotificationNestedInput
    notificationPostComment?: NotificationPostCommentUncheckedUpdateOneWithoutNotificationNestedInput
    notificationCommentReply?: NotificationCommentReplyUncheckedUpdateOneWithoutNotificationNestedInput
  }

  export type CommunityUpsertWithoutNotificationCommunityNewMemberInput = {
    update: XOR<CommunityUpdateWithoutNotificationCommunityNewMemberInput, CommunityUncheckedUpdateWithoutNotificationCommunityNewMemberInput>
    create: XOR<CommunityCreateWithoutNotificationCommunityNewMemberInput, CommunityUncheckedCreateWithoutNotificationCommunityNewMemberInput>
    where?: CommunityWhereInput
  }

  export type CommunityUpdateToOneWithWhereWithoutNotificationCommunityNewMemberInput = {
    where?: CommunityWhereInput
    data: XOR<CommunityUpdateWithoutNotificationCommunityNewMemberInput, CommunityUncheckedUpdateWithoutNotificationCommunityNewMemberInput>
  }

  export type CommunityUpdateWithoutNotificationCommunityNewMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    bannerImage?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    posts?: PostUpdateManyWithoutCommunityNestedInput
    members?: UserCommunityUpdateManyWithoutCommunityNestedInput
    favouriteBy?: FavouriteCommunityUpdateManyWithoutCommunityNestedInput
    category?: CategoryUpdateOneRequiredWithoutComunitiesNestedInput
  }

  export type CommunityUncheckedUpdateWithoutNotificationCommunityNewMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    bannerImage?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    posts?: PostUncheckedUpdateManyWithoutCommunityNestedInput
    members?: UserCommunityUncheckedUpdateManyWithoutCommunityNestedInput
    favouriteBy?: FavouriteCommunityUncheckedUpdateManyWithoutCommunityNestedInput
  }

  export type UserUpsertWithoutNotificationCommunityNewMemberInput = {
    update: XOR<UserUpdateWithoutNotificationCommunityNewMemberInput, UserUncheckedUpdateWithoutNotificationCommunityNewMemberInput>
    create: XOR<UserCreateWithoutNotificationCommunityNewMemberInput, UserUncheckedCreateWithoutNotificationCommunityNewMemberInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutNotificationCommunityNewMemberInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutNotificationCommunityNewMemberInput, UserUncheckedUpdateWithoutNotificationCommunityNewMemberInput>
  }

  export type UserUpdateWithoutNotificationCommunityNewMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    followedBy?: UserUpdateManyWithoutFollowingNestedInput
    following?: UserUpdateManyWithoutFollowedByNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUpdateManyWithoutUserNestedInput
    mentions?: MentionUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateManyWithoutUserNotificationStartFollowNestedInput
  }

  export type UserUncheckedUpdateWithoutNotificationCommunityNewMemberInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    following?: UserUncheckedUpdateManyWithoutFollowedByNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUncheckedUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateManyWithoutUserNotificationStartFollowNestedInput
  }

  export type NotificationCreateWithoutNotificationPostCommentInput = {
    id?: string
    createdAt?: Date | string
    isRead?: boolean
    user: UserCreateNestedOneWithoutNotificationsInput
    notificationMention?: NotificationMentionCreateNestedOneWithoutNotificationInput
    notificationStartFollow?: NotificationStartFollowCreateNestedOneWithoutNotificationInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedOneWithoutNotificationInput
    notificationCommentReply?: NotificationCommentReplyCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateWithoutNotificationPostCommentInput = {
    id?: string
    createdAt?: Date | string
    isRead?: boolean
    userId: string
    notificationMention?: NotificationMentionUncheckedCreateNestedOneWithoutNotificationInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedOneWithoutNotificationInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedOneWithoutNotificationInput
    notificationCommentReply?: NotificationCommentReplyUncheckedCreateNestedOneWithoutNotificationInput
  }

  export type NotificationCreateOrConnectWithoutNotificationPostCommentInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutNotificationPostCommentInput, NotificationUncheckedCreateWithoutNotificationPostCommentInput>
  }

  export type CommentCreateWithoutNotificationPostCommentInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutCommentsInput
    post: PostCreateNestedOneWithoutCommentsInput
    likes?: CommentLikeCreateNestedManyWithoutCommentInput
    parent?: CommentCreateNestedOneWithoutChildrenInput
    children?: CommentCreateNestedManyWithoutParentInput
    notificationCommentReply?: NotificationCommentReplyCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutNotificationPostCommentInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    postId: string
    parentId?: string | null
    isDeleted?: boolean
    likes?: CommentLikeUncheckedCreateNestedManyWithoutCommentInput
    children?: CommentUncheckedCreateNestedManyWithoutParentInput
    notificationCommentReply?: NotificationCommentReplyUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutNotificationPostCommentInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutNotificationPostCommentInput, CommentUncheckedCreateWithoutNotificationPostCommentInput>
  }

  export type NotificationUpsertWithoutNotificationPostCommentInput = {
    update: XOR<NotificationUpdateWithoutNotificationPostCommentInput, NotificationUncheckedUpdateWithoutNotificationPostCommentInput>
    create: XOR<NotificationCreateWithoutNotificationPostCommentInput, NotificationUncheckedCreateWithoutNotificationPostCommentInput>
    where?: NotificationWhereInput
  }

  export type NotificationUpdateToOneWithWhereWithoutNotificationPostCommentInput = {
    where?: NotificationWhereInput
    data: XOR<NotificationUpdateWithoutNotificationPostCommentInput, NotificationUncheckedUpdateWithoutNotificationPostCommentInput>
  }

  export type NotificationUpdateWithoutNotificationPostCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    notificationMention?: NotificationMentionUpdateOneWithoutNotificationNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateOneWithoutNotificationNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateOneWithoutNotificationNestedInput
    notificationCommentReply?: NotificationCommentReplyUpdateOneWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutNotificationPostCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    notificationMention?: NotificationMentionUncheckedUpdateOneWithoutNotificationNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateOneWithoutNotificationNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateOneWithoutNotificationNestedInput
    notificationCommentReply?: NotificationCommentReplyUncheckedUpdateOneWithoutNotificationNestedInput
  }

  export type CommentUpsertWithoutNotificationPostCommentInput = {
    update: XOR<CommentUpdateWithoutNotificationPostCommentInput, CommentUncheckedUpdateWithoutNotificationPostCommentInput>
    create: XOR<CommentCreateWithoutNotificationPostCommentInput, CommentUncheckedCreateWithoutNotificationPostCommentInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutNotificationPostCommentInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutNotificationPostCommentInput, CommentUncheckedUpdateWithoutNotificationPostCommentInput>
  }

  export type CommentUpdateWithoutNotificationPostCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    likes?: CommentLikeUpdateManyWithoutCommentNestedInput
    parent?: CommentUpdateOneWithoutChildrenNestedInput
    children?: CommentUpdateManyWithoutParentNestedInput
    notificationCommentReply?: NotificationCommentReplyUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutNotificationPostCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    likes?: CommentLikeUncheckedUpdateManyWithoutCommentNestedInput
    children?: CommentUncheckedUpdateManyWithoutParentNestedInput
    notificationCommentReply?: NotificationCommentReplyUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type NotificationCreateWithoutNotificationCommentReplyInput = {
    id?: string
    createdAt?: Date | string
    isRead?: boolean
    user: UserCreateNestedOneWithoutNotificationsInput
    notificationMention?: NotificationMentionCreateNestedOneWithoutNotificationInput
    notificationStartFollow?: NotificationStartFollowCreateNestedOneWithoutNotificationInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedOneWithoutNotificationInput
    notificationPostComment?: NotificationPostCommentCreateNestedOneWithoutNotificationInput
  }

  export type NotificationUncheckedCreateWithoutNotificationCommentReplyInput = {
    id?: string
    createdAt?: Date | string
    isRead?: boolean
    userId: string
    notificationMention?: NotificationMentionUncheckedCreateNestedOneWithoutNotificationInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedOneWithoutNotificationInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedOneWithoutNotificationInput
    notificationPostComment?: NotificationPostCommentUncheckedCreateNestedOneWithoutNotificationInput
  }

  export type NotificationCreateOrConnectWithoutNotificationCommentReplyInput = {
    where: NotificationWhereUniqueInput
    create: XOR<NotificationCreateWithoutNotificationCommentReplyInput, NotificationUncheckedCreateWithoutNotificationCommentReplyInput>
  }

  export type CommentCreateWithoutNotificationCommentReplyInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutCommentsInput
    post: PostCreateNestedOneWithoutCommentsInput
    likes?: CommentLikeCreateNestedManyWithoutCommentInput
    parent?: CommentCreateNestedOneWithoutChildrenInput
    children?: CommentCreateNestedManyWithoutParentInput
    notificationPostComment?: NotificationPostCommentCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutNotificationCommentReplyInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    postId: string
    parentId?: string | null
    isDeleted?: boolean
    likes?: CommentLikeUncheckedCreateNestedManyWithoutCommentInput
    children?: CommentUncheckedCreateNestedManyWithoutParentInput
    notificationPostComment?: NotificationPostCommentUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutNotificationCommentReplyInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutNotificationCommentReplyInput, CommentUncheckedCreateWithoutNotificationCommentReplyInput>
  }

  export type NotificationUpsertWithoutNotificationCommentReplyInput = {
    update: XOR<NotificationUpdateWithoutNotificationCommentReplyInput, NotificationUncheckedUpdateWithoutNotificationCommentReplyInput>
    create: XOR<NotificationCreateWithoutNotificationCommentReplyInput, NotificationUncheckedCreateWithoutNotificationCommentReplyInput>
    where?: NotificationWhereInput
  }

  export type NotificationUpdateToOneWithWhereWithoutNotificationCommentReplyInput = {
    where?: NotificationWhereInput
    data: XOR<NotificationUpdateWithoutNotificationCommentReplyInput, NotificationUncheckedUpdateWithoutNotificationCommentReplyInput>
  }

  export type NotificationUpdateWithoutNotificationCommentReplyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutNotificationsNestedInput
    notificationMention?: NotificationMentionUpdateOneWithoutNotificationNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateOneWithoutNotificationNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateOneWithoutNotificationNestedInput
    notificationPostComment?: NotificationPostCommentUpdateOneWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutNotificationCommentReplyInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    userId?: StringFieldUpdateOperationsInput | string
    notificationMention?: NotificationMentionUncheckedUpdateOneWithoutNotificationNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateOneWithoutNotificationNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateOneWithoutNotificationNestedInput
    notificationPostComment?: NotificationPostCommentUncheckedUpdateOneWithoutNotificationNestedInput
  }

  export type CommentUpsertWithoutNotificationCommentReplyInput = {
    update: XOR<CommentUpdateWithoutNotificationCommentReplyInput, CommentUncheckedUpdateWithoutNotificationCommentReplyInput>
    create: XOR<CommentCreateWithoutNotificationCommentReplyInput, CommentUncheckedCreateWithoutNotificationCommentReplyInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutNotificationCommentReplyInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutNotificationCommentReplyInput, CommentUncheckedUpdateWithoutNotificationCommentReplyInput>
  }

  export type CommentUpdateWithoutNotificationCommentReplyInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    likes?: CommentLikeUpdateManyWithoutCommentNestedInput
    parent?: CommentUpdateOneWithoutChildrenNestedInput
    children?: CommentUpdateManyWithoutParentNestedInput
    notificationPostComment?: NotificationPostCommentUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutNotificationCommentReplyInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    likes?: CommentLikeUncheckedUpdateManyWithoutCommentNestedInput
    children?: CommentUncheckedUpdateManyWithoutParentNestedInput
    notificationPostComment?: NotificationPostCommentUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type UserCreateWithoutSharedPostInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    followedBy?: UserCreateNestedManyWithoutFollowingInput
    following?: UserCreateNestedManyWithoutFollowedByInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    communities?: UserCommunityCreateNestedManyWithoutUserInput
    mentions?: MentionCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSharedPostInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    followedBy?: UserUncheckedCreateNestedManyWithoutFollowingInput
    following?: UserUncheckedCreateNestedManyWithoutFollowedByInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    communities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    mentions?: MentionUncheckedCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSharedPostInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSharedPostInput, UserUncheckedCreateWithoutSharedPostInput>
  }

  export type PostCreateWithoutSharedByInput = {
    id?: string
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    link?: string | null
    user: UserCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkCreateNestedManyWithoutPostInput
    images?: ImageCreateNestedManyWithoutPostInput
    tags?: PostTagCreateNestedManyWithoutPostInput
    shareParent?: PostCreateNestedOneWithoutSharesInput
    shares?: PostCreateNestedManyWithoutShareParentInput
    community?: CommunityCreateNestedOneWithoutPostsInput
    mentions?: MentionCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutSharedByInput = {
    id?: string
    content?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    shareParentId?: string | null
    communityId?: string | null
    link?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkUncheckedCreateNestedManyWithoutPostInput
    images?: ImageUncheckedCreateNestedManyWithoutPostInput
    tags?: PostTagUncheckedCreateNestedManyWithoutPostInput
    shares?: PostUncheckedCreateNestedManyWithoutShareParentInput
    mentions?: MentionUncheckedCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutSharedByInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutSharedByInput, PostUncheckedCreateWithoutSharedByInput>
  }

  export type UserUpsertWithoutSharedPostInput = {
    update: XOR<UserUpdateWithoutSharedPostInput, UserUncheckedUpdateWithoutSharedPostInput>
    create: XOR<UserCreateWithoutSharedPostInput, UserUncheckedCreateWithoutSharedPostInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSharedPostInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSharedPostInput, UserUncheckedUpdateWithoutSharedPostInput>
  }

  export type UserUpdateWithoutSharedPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    followedBy?: UserUpdateManyWithoutFollowingNestedInput
    following?: UserUpdateManyWithoutFollowedByNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUpdateManyWithoutUserNestedInput
    mentions?: MentionUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSharedPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    following?: UserUncheckedUpdateManyWithoutFollowedByNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostUpsertWithoutSharedByInput = {
    update: XOR<PostUpdateWithoutSharedByInput, PostUncheckedUpdateWithoutSharedByInput>
    create: XOR<PostCreateWithoutSharedByInput, PostUncheckedCreateWithoutSharedByInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutSharedByInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutSharedByInput, PostUncheckedUpdateWithoutSharedByInput>
  }

  export type PostUpdateWithoutSharedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUpdateManyWithoutPostNestedInput
    images?: ImageUpdateManyWithoutPostNestedInput
    tags?: PostTagUpdateManyWithoutPostNestedInput
    shareParent?: PostUpdateOneWithoutSharesNestedInput
    shares?: PostUpdateManyWithoutShareParentNestedInput
    community?: CommunityUpdateOneWithoutPostsNestedInput
    mentions?: MentionUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutSharedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    shareParentId?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUncheckedUpdateManyWithoutPostNestedInput
    images?: ImageUncheckedUpdateManyWithoutPostNestedInput
    tags?: PostTagUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostUncheckedUpdateManyWithoutShareParentNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateWithoutImagesInput = {
    id?: string
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    link?: string | null
    user: UserCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkCreateNestedManyWithoutPostInput
    tags?: PostTagCreateNestedManyWithoutPostInput
    shareParent?: PostCreateNestedOneWithoutSharesInput
    shares?: PostCreateNestedManyWithoutShareParentInput
    community?: CommunityCreateNestedOneWithoutPostsInput
    mentions?: MentionCreateNestedManyWithoutPostInput
    sharedBy?: UserShareCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutImagesInput = {
    id?: string
    content?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    shareParentId?: string | null
    communityId?: string | null
    link?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkUncheckedCreateNestedManyWithoutPostInput
    tags?: PostTagUncheckedCreateNestedManyWithoutPostInput
    shares?: PostUncheckedCreateNestedManyWithoutShareParentInput
    mentions?: MentionUncheckedCreateNestedManyWithoutPostInput
    sharedBy?: UserShareUncheckedCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutImagesInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutImagesInput, PostUncheckedCreateWithoutImagesInput>
  }

  export type PostUpsertWithoutImagesInput = {
    update: XOR<PostUpdateWithoutImagesInput, PostUncheckedUpdateWithoutImagesInput>
    create: XOR<PostCreateWithoutImagesInput, PostUncheckedCreateWithoutImagesInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutImagesInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutImagesInput, PostUncheckedUpdateWithoutImagesInput>
  }

  export type PostUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUpdateManyWithoutPostNestedInput
    tags?: PostTagUpdateManyWithoutPostNestedInput
    shareParent?: PostUpdateOneWithoutSharesNestedInput
    shares?: PostUpdateManyWithoutShareParentNestedInput
    community?: CommunityUpdateOneWithoutPostsNestedInput
    mentions?: MentionUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutImagesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    shareParentId?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUncheckedUpdateManyWithoutPostNestedInput
    tags?: PostTagUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostUncheckedUpdateManyWithoutShareParentNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUncheckedUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserCreateWithoutCommentsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    followedBy?: UserCreateNestedManyWithoutFollowingInput
    following?: UserCreateNestedManyWithoutFollowedByInput
    posts?: PostCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    communities?: UserCommunityCreateNestedManyWithoutUserInput
    mentions?: MentionCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityCreateNestedManyWithoutUserInput
    sharedPost?: UserShareCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommentsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    followedBy?: UserUncheckedCreateNestedManyWithoutFollowingInput
    following?: UserUncheckedCreateNestedManyWithoutFollowedByInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    communities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    mentions?: MentionUncheckedCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityUncheckedCreateNestedManyWithoutUserInput
    sharedPost?: UserShareUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
  }

  export type PostCreateWithoutCommentsInput = {
    id?: string
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    link?: string | null
    user: UserCreateNestedOneWithoutPostsInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkCreateNestedManyWithoutPostInput
    images?: ImageCreateNestedManyWithoutPostInput
    tags?: PostTagCreateNestedManyWithoutPostInput
    shareParent?: PostCreateNestedOneWithoutSharesInput
    shares?: PostCreateNestedManyWithoutShareParentInput
    community?: CommunityCreateNestedOneWithoutPostsInput
    mentions?: MentionCreateNestedManyWithoutPostInput
    sharedBy?: UserShareCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutCommentsInput = {
    id?: string
    content?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    shareParentId?: string | null
    communityId?: string | null
    link?: string | null
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkUncheckedCreateNestedManyWithoutPostInput
    images?: ImageUncheckedCreateNestedManyWithoutPostInput
    tags?: PostTagUncheckedCreateNestedManyWithoutPostInput
    shares?: PostUncheckedCreateNestedManyWithoutShareParentInput
    mentions?: MentionUncheckedCreateNestedManyWithoutPostInput
    sharedBy?: UserShareUncheckedCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutCommentsInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
  }

  export type CommentLikeCreateWithoutCommentInput = {
    user: UserCreateNestedOneWithoutLikedCommentsInput
  }

  export type CommentLikeUncheckedCreateWithoutCommentInput = {
    userId: string
  }

  export type CommentLikeCreateOrConnectWithoutCommentInput = {
    where: CommentLikeWhereUniqueInput
    create: XOR<CommentLikeCreateWithoutCommentInput, CommentLikeUncheckedCreateWithoutCommentInput>
  }

  export type CommentLikeCreateManyCommentInputEnvelope = {
    data: CommentLikeCreateManyCommentInput | CommentLikeCreateManyCommentInput[]
    skipDuplicates?: boolean
  }

  export type CommentCreateWithoutChildrenInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutCommentsInput
    post: PostCreateNestedOneWithoutCommentsInput
    likes?: CommentLikeCreateNestedManyWithoutCommentInput
    parent?: CommentCreateNestedOneWithoutChildrenInput
    notificationPostComment?: NotificationPostCommentCreateNestedManyWithoutCommentInput
    notificationCommentReply?: NotificationCommentReplyCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutChildrenInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    postId: string
    parentId?: string | null
    isDeleted?: boolean
    likes?: CommentLikeUncheckedCreateNestedManyWithoutCommentInput
    notificationPostComment?: NotificationPostCommentUncheckedCreateNestedManyWithoutCommentInput
    notificationCommentReply?: NotificationCommentReplyUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutChildrenInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutChildrenInput, CommentUncheckedCreateWithoutChildrenInput>
  }

  export type CommentCreateWithoutParentInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutCommentsInput
    post: PostCreateNestedOneWithoutCommentsInput
    likes?: CommentLikeCreateNestedManyWithoutCommentInput
    children?: CommentCreateNestedManyWithoutParentInput
    notificationPostComment?: NotificationPostCommentCreateNestedManyWithoutCommentInput
    notificationCommentReply?: NotificationCommentReplyCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutParentInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    postId: string
    isDeleted?: boolean
    likes?: CommentLikeUncheckedCreateNestedManyWithoutCommentInput
    children?: CommentUncheckedCreateNestedManyWithoutParentInput
    notificationPostComment?: NotificationPostCommentUncheckedCreateNestedManyWithoutCommentInput
    notificationCommentReply?: NotificationCommentReplyUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutParentInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput>
  }

  export type CommentCreateManyParentInputEnvelope = {
    data: CommentCreateManyParentInput | CommentCreateManyParentInput[]
    skipDuplicates?: boolean
  }

  export type NotificationPostCommentCreateWithoutCommentInput = {
    id?: string
    notification: NotificationCreateNestedOneWithoutNotificationPostCommentInput
  }

  export type NotificationPostCommentUncheckedCreateWithoutCommentInput = {
    id?: string
    notificationId: string
  }

  export type NotificationPostCommentCreateOrConnectWithoutCommentInput = {
    where: NotificationPostCommentWhereUniqueInput
    create: XOR<NotificationPostCommentCreateWithoutCommentInput, NotificationPostCommentUncheckedCreateWithoutCommentInput>
  }

  export type NotificationPostCommentCreateManyCommentInputEnvelope = {
    data: NotificationPostCommentCreateManyCommentInput | NotificationPostCommentCreateManyCommentInput[]
    skipDuplicates?: boolean
  }

  export type NotificationCommentReplyCreateWithoutCommentInput = {
    id?: string
    notification: NotificationCreateNestedOneWithoutNotificationCommentReplyInput
  }

  export type NotificationCommentReplyUncheckedCreateWithoutCommentInput = {
    id?: string
    notificationId: string
  }

  export type NotificationCommentReplyCreateOrConnectWithoutCommentInput = {
    where: NotificationCommentReplyWhereUniqueInput
    create: XOR<NotificationCommentReplyCreateWithoutCommentInput, NotificationCommentReplyUncheckedCreateWithoutCommentInput>
  }

  export type NotificationCommentReplyCreateManyCommentInputEnvelope = {
    data: NotificationCommentReplyCreateManyCommentInput | NotificationCommentReplyCreateManyCommentInput[]
    skipDuplicates?: boolean
  }

  export type UserUpsertWithoutCommentsInput = {
    update: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
    create: XOR<UserCreateWithoutCommentsInput, UserUncheckedCreateWithoutCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommentsInput, UserUncheckedUpdateWithoutCommentsInput>
  }

  export type UserUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    followedBy?: UserUpdateManyWithoutFollowingNestedInput
    following?: UserUpdateManyWithoutFollowedByNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUpdateManyWithoutUserNestedInput
    mentions?: MentionUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    following?: UserUncheckedUpdateManyWithoutFollowedByNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUncheckedUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostUpsertWithoutCommentsInput = {
    update: XOR<PostUpdateWithoutCommentsInput, PostUncheckedUpdateWithoutCommentsInput>
    create: XOR<PostCreateWithoutCommentsInput, PostUncheckedCreateWithoutCommentsInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutCommentsInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutCommentsInput, PostUncheckedUpdateWithoutCommentsInput>
  }

  export type PostUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPostsNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUpdateManyWithoutPostNestedInput
    images?: ImageUpdateManyWithoutPostNestedInput
    tags?: PostTagUpdateManyWithoutPostNestedInput
    shareParent?: PostUpdateOneWithoutSharesNestedInput
    shares?: PostUpdateManyWithoutShareParentNestedInput
    community?: CommunityUpdateOneWithoutPostsNestedInput
    mentions?: MentionUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    shareParentId?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUncheckedUpdateManyWithoutPostNestedInput
    images?: ImageUncheckedUpdateManyWithoutPostNestedInput
    tags?: PostTagUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostUncheckedUpdateManyWithoutShareParentNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUncheckedUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type CommentLikeUpsertWithWhereUniqueWithoutCommentInput = {
    where: CommentLikeWhereUniqueInput
    update: XOR<CommentLikeUpdateWithoutCommentInput, CommentLikeUncheckedUpdateWithoutCommentInput>
    create: XOR<CommentLikeCreateWithoutCommentInput, CommentLikeUncheckedCreateWithoutCommentInput>
  }

  export type CommentLikeUpdateWithWhereUniqueWithoutCommentInput = {
    where: CommentLikeWhereUniqueInput
    data: XOR<CommentLikeUpdateWithoutCommentInput, CommentLikeUncheckedUpdateWithoutCommentInput>
  }

  export type CommentLikeUpdateManyWithWhereWithoutCommentInput = {
    where: CommentLikeScalarWhereInput
    data: XOR<CommentLikeUpdateManyMutationInput, CommentLikeUncheckedUpdateManyWithoutCommentInput>
  }

  export type CommentUpsertWithoutChildrenInput = {
    update: XOR<CommentUpdateWithoutChildrenInput, CommentUncheckedUpdateWithoutChildrenInput>
    create: XOR<CommentCreateWithoutChildrenInput, CommentUncheckedCreateWithoutChildrenInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutChildrenInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutChildrenInput, CommentUncheckedUpdateWithoutChildrenInput>
  }

  export type CommentUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    likes?: CommentLikeUpdateManyWithoutCommentNestedInput
    parent?: CommentUpdateOneWithoutChildrenNestedInput
    notificationPostComment?: NotificationPostCommentUpdateManyWithoutCommentNestedInput
    notificationCommentReply?: NotificationCommentReplyUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutChildrenInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    likes?: CommentLikeUncheckedUpdateManyWithoutCommentNestedInput
    notificationPostComment?: NotificationPostCommentUncheckedUpdateManyWithoutCommentNestedInput
    notificationCommentReply?: NotificationCommentReplyUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUpsertWithWhereUniqueWithoutParentInput = {
    where: CommentWhereUniqueInput
    update: XOR<CommentUpdateWithoutParentInput, CommentUncheckedUpdateWithoutParentInput>
    create: XOR<CommentCreateWithoutParentInput, CommentUncheckedCreateWithoutParentInput>
  }

  export type CommentUpdateWithWhereUniqueWithoutParentInput = {
    where: CommentWhereUniqueInput
    data: XOR<CommentUpdateWithoutParentInput, CommentUncheckedUpdateWithoutParentInput>
  }

  export type CommentUpdateManyWithWhereWithoutParentInput = {
    where: CommentScalarWhereInput
    data: XOR<CommentUpdateManyMutationInput, CommentUncheckedUpdateManyWithoutParentInput>
  }

  export type NotificationPostCommentUpsertWithWhereUniqueWithoutCommentInput = {
    where: NotificationPostCommentWhereUniqueInput
    update: XOR<NotificationPostCommentUpdateWithoutCommentInput, NotificationPostCommentUncheckedUpdateWithoutCommentInput>
    create: XOR<NotificationPostCommentCreateWithoutCommentInput, NotificationPostCommentUncheckedCreateWithoutCommentInput>
  }

  export type NotificationPostCommentUpdateWithWhereUniqueWithoutCommentInput = {
    where: NotificationPostCommentWhereUniqueInput
    data: XOR<NotificationPostCommentUpdateWithoutCommentInput, NotificationPostCommentUncheckedUpdateWithoutCommentInput>
  }

  export type NotificationPostCommentUpdateManyWithWhereWithoutCommentInput = {
    where: NotificationPostCommentScalarWhereInput
    data: XOR<NotificationPostCommentUpdateManyMutationInput, NotificationPostCommentUncheckedUpdateManyWithoutCommentInput>
  }

  export type NotificationPostCommentScalarWhereInput = {
    AND?: NotificationPostCommentScalarWhereInput | NotificationPostCommentScalarWhereInput[]
    OR?: NotificationPostCommentScalarWhereInput[]
    NOT?: NotificationPostCommentScalarWhereInput | NotificationPostCommentScalarWhereInput[]
    id?: StringFilter<"NotificationPostComment"> | string
    notificationId?: StringFilter<"NotificationPostComment"> | string
    commentId?: StringFilter<"NotificationPostComment"> | string
  }

  export type NotificationCommentReplyUpsertWithWhereUniqueWithoutCommentInput = {
    where: NotificationCommentReplyWhereUniqueInput
    update: XOR<NotificationCommentReplyUpdateWithoutCommentInput, NotificationCommentReplyUncheckedUpdateWithoutCommentInput>
    create: XOR<NotificationCommentReplyCreateWithoutCommentInput, NotificationCommentReplyUncheckedCreateWithoutCommentInput>
  }

  export type NotificationCommentReplyUpdateWithWhereUniqueWithoutCommentInput = {
    where: NotificationCommentReplyWhereUniqueInput
    data: XOR<NotificationCommentReplyUpdateWithoutCommentInput, NotificationCommentReplyUncheckedUpdateWithoutCommentInput>
  }

  export type NotificationCommentReplyUpdateManyWithWhereWithoutCommentInput = {
    where: NotificationCommentReplyScalarWhereInput
    data: XOR<NotificationCommentReplyUpdateManyMutationInput, NotificationCommentReplyUncheckedUpdateManyWithoutCommentInput>
  }

  export type NotificationCommentReplyScalarWhereInput = {
    AND?: NotificationCommentReplyScalarWhereInput | NotificationCommentReplyScalarWhereInput[]
    OR?: NotificationCommentReplyScalarWhereInput[]
    NOT?: NotificationCommentReplyScalarWhereInput | NotificationCommentReplyScalarWhereInput[]
    id?: StringFilter<"NotificationCommentReply"> | string
    notificationId?: StringFilter<"NotificationCommentReply"> | string
    commentId?: StringFilter<"NotificationCommentReply"> | string
  }

  export type UserCreateWithoutLikedPostsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    followedBy?: UserCreateNestedManyWithoutFollowingInput
    following?: UserCreateNestedManyWithoutFollowedByInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    communities?: UserCommunityCreateNestedManyWithoutUserInput
    mentions?: MentionCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityCreateNestedManyWithoutUserInput
    sharedPost?: UserShareCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLikedPostsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    followedBy?: UserUncheckedCreateNestedManyWithoutFollowingInput
    following?: UserUncheckedCreateNestedManyWithoutFollowedByInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    communities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    mentions?: MentionUncheckedCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityUncheckedCreateNestedManyWithoutUserInput
    sharedPost?: UserShareUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLikedPostsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikedPostsInput, UserUncheckedCreateWithoutLikedPostsInput>
  }

  export type PostCreateWithoutLikesInput = {
    id?: string
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    link?: string | null
    user: UserCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkCreateNestedManyWithoutPostInput
    images?: ImageCreateNestedManyWithoutPostInput
    tags?: PostTagCreateNestedManyWithoutPostInput
    shareParent?: PostCreateNestedOneWithoutSharesInput
    shares?: PostCreateNestedManyWithoutShareParentInput
    community?: CommunityCreateNestedOneWithoutPostsInput
    mentions?: MentionCreateNestedManyWithoutPostInput
    sharedBy?: UserShareCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutLikesInput = {
    id?: string
    content?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    shareParentId?: string | null
    communityId?: string | null
    link?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkUncheckedCreateNestedManyWithoutPostInput
    images?: ImageUncheckedCreateNestedManyWithoutPostInput
    tags?: PostTagUncheckedCreateNestedManyWithoutPostInput
    shares?: PostUncheckedCreateNestedManyWithoutShareParentInput
    mentions?: MentionUncheckedCreateNestedManyWithoutPostInput
    sharedBy?: UserShareUncheckedCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutLikesInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
  }

  export type UserUpsertWithoutLikedPostsInput = {
    update: XOR<UserUpdateWithoutLikedPostsInput, UserUncheckedUpdateWithoutLikedPostsInput>
    create: XOR<UserCreateWithoutLikedPostsInput, UserUncheckedCreateWithoutLikedPostsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLikedPostsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLikedPostsInput, UserUncheckedUpdateWithoutLikedPostsInput>
  }

  export type UserUpdateWithoutLikedPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    followedBy?: UserUpdateManyWithoutFollowingNestedInput
    following?: UserUpdateManyWithoutFollowedByNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUpdateManyWithoutUserNestedInput
    mentions?: MentionUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLikedPostsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    following?: UserUncheckedUpdateManyWithoutFollowedByNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUncheckedUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostUpsertWithoutLikesInput = {
    update: XOR<PostUpdateWithoutLikesInput, PostUncheckedUpdateWithoutLikesInput>
    create: XOR<PostCreateWithoutLikesInput, PostUncheckedCreateWithoutLikesInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutLikesInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutLikesInput, PostUncheckedUpdateWithoutLikesInput>
  }

  export type PostUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUpdateManyWithoutPostNestedInput
    images?: ImageUpdateManyWithoutPostNestedInput
    tags?: PostTagUpdateManyWithoutPostNestedInput
    shareParent?: PostUpdateOneWithoutSharesNestedInput
    shares?: PostUpdateManyWithoutShareParentNestedInput
    community?: CommunityUpdateOneWithoutPostsNestedInput
    mentions?: MentionUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    shareParentId?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUncheckedUpdateManyWithoutPostNestedInput
    images?: ImageUncheckedUpdateManyWithoutPostNestedInput
    tags?: PostTagUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostUncheckedUpdateManyWithoutShareParentNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUncheckedUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type UserCreateWithoutLikedCommentsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    followedBy?: UserCreateNestedManyWithoutFollowingInput
    following?: UserCreateNestedManyWithoutFollowedByInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    communities?: UserCommunityCreateNestedManyWithoutUserInput
    mentions?: MentionCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityCreateNestedManyWithoutUserInput
    sharedPost?: UserShareCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutLikedCommentsInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    followedBy?: UserUncheckedCreateNestedManyWithoutFollowingInput
    following?: UserUncheckedCreateNestedManyWithoutFollowedByInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    communities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    mentions?: MentionUncheckedCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityUncheckedCreateNestedManyWithoutUserInput
    sharedPost?: UserShareUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutLikedCommentsInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutLikedCommentsInput, UserUncheckedCreateWithoutLikedCommentsInput>
  }

  export type CommentCreateWithoutLikesInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    user: UserCreateNestedOneWithoutCommentsInput
    post: PostCreateNestedOneWithoutCommentsInput
    parent?: CommentCreateNestedOneWithoutChildrenInput
    children?: CommentCreateNestedManyWithoutParentInput
    notificationPostComment?: NotificationPostCommentCreateNestedManyWithoutCommentInput
    notificationCommentReply?: NotificationCommentReplyCreateNestedManyWithoutCommentInput
  }

  export type CommentUncheckedCreateWithoutLikesInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    postId: string
    parentId?: string | null
    isDeleted?: boolean
    children?: CommentUncheckedCreateNestedManyWithoutParentInput
    notificationPostComment?: NotificationPostCommentUncheckedCreateNestedManyWithoutCommentInput
    notificationCommentReply?: NotificationCommentReplyUncheckedCreateNestedManyWithoutCommentInput
  }

  export type CommentCreateOrConnectWithoutLikesInput = {
    where: CommentWhereUniqueInput
    create: XOR<CommentCreateWithoutLikesInput, CommentUncheckedCreateWithoutLikesInput>
  }

  export type UserUpsertWithoutLikedCommentsInput = {
    update: XOR<UserUpdateWithoutLikedCommentsInput, UserUncheckedUpdateWithoutLikedCommentsInput>
    create: XOR<UserCreateWithoutLikedCommentsInput, UserUncheckedCreateWithoutLikedCommentsInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutLikedCommentsInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutLikedCommentsInput, UserUncheckedUpdateWithoutLikedCommentsInput>
  }

  export type UserUpdateWithoutLikedCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    followedBy?: UserUpdateManyWithoutFollowingNestedInput
    following?: UserUpdateManyWithoutFollowedByNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUpdateManyWithoutUserNestedInput
    mentions?: MentionUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutLikedCommentsInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    following?: UserUncheckedUpdateManyWithoutFollowedByNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUncheckedUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommentUpsertWithoutLikesInput = {
    update: XOR<CommentUpdateWithoutLikesInput, CommentUncheckedUpdateWithoutLikesInput>
    create: XOR<CommentCreateWithoutLikesInput, CommentUncheckedCreateWithoutLikesInput>
    where?: CommentWhereInput
  }

  export type CommentUpdateToOneWithWhereWithoutLikesInput = {
    where?: CommentWhereInput
    data: XOR<CommentUpdateWithoutLikesInput, CommentUncheckedUpdateWithoutLikesInput>
  }

  export type CommentUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    parent?: CommentUpdateOneWithoutChildrenNestedInput
    children?: CommentUpdateManyWithoutParentNestedInput
    notificationPostComment?: NotificationPostCommentUpdateManyWithoutCommentNestedInput
    notificationCommentReply?: NotificationCommentReplyUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutLikesInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    children?: CommentUncheckedUpdateManyWithoutParentNestedInput
    notificationPostComment?: NotificationPostCommentUncheckedUpdateManyWithoutCommentNestedInput
    notificationCommentReply?: NotificationCommentReplyUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type UserCreateWithoutBookmarksInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    followedBy?: UserCreateNestedManyWithoutFollowingInput
    following?: UserCreateNestedManyWithoutFollowedByInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeCreateNestedManyWithoutUserInput
    communities?: UserCommunityCreateNestedManyWithoutUserInput
    mentions?: MentionCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityCreateNestedManyWithoutUserInput
    sharedPost?: UserShareCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutBookmarksInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    followedBy?: UserUncheckedCreateNestedManyWithoutFollowingInput
    following?: UserUncheckedCreateNestedManyWithoutFollowedByInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    communities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    mentions?: MentionUncheckedCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityUncheckedCreateNestedManyWithoutUserInput
    sharedPost?: UserShareUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutBookmarksInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutBookmarksInput, UserUncheckedCreateWithoutBookmarksInput>
  }

  export type PostCreateWithoutBookmarkedByInput = {
    id?: string
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    link?: string | null
    user: UserCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    images?: ImageCreateNestedManyWithoutPostInput
    tags?: PostTagCreateNestedManyWithoutPostInput
    shareParent?: PostCreateNestedOneWithoutSharesInput
    shares?: PostCreateNestedManyWithoutShareParentInput
    community?: CommunityCreateNestedOneWithoutPostsInput
    mentions?: MentionCreateNestedManyWithoutPostInput
    sharedBy?: UserShareCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutBookmarkedByInput = {
    id?: string
    content?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    shareParentId?: string | null
    communityId?: string | null
    link?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    images?: ImageUncheckedCreateNestedManyWithoutPostInput
    tags?: PostTagUncheckedCreateNestedManyWithoutPostInput
    shares?: PostUncheckedCreateNestedManyWithoutShareParentInput
    mentions?: MentionUncheckedCreateNestedManyWithoutPostInput
    sharedBy?: UserShareUncheckedCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutBookmarkedByInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutBookmarkedByInput, PostUncheckedCreateWithoutBookmarkedByInput>
  }

  export type UserUpsertWithoutBookmarksInput = {
    update: XOR<UserUpdateWithoutBookmarksInput, UserUncheckedUpdateWithoutBookmarksInput>
    create: XOR<UserCreateWithoutBookmarksInput, UserUncheckedCreateWithoutBookmarksInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutBookmarksInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutBookmarksInput, UserUncheckedUpdateWithoutBookmarksInput>
  }

  export type UserUpdateWithoutBookmarksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    followedBy?: UserUpdateManyWithoutFollowingNestedInput
    following?: UserUpdateManyWithoutFollowedByNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUpdateManyWithoutUserNestedInput
    mentions?: MentionUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutBookmarksInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    following?: UserUncheckedUpdateManyWithoutFollowedByNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUncheckedUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type PostUpsertWithoutBookmarkedByInput = {
    update: XOR<PostUpdateWithoutBookmarkedByInput, PostUncheckedUpdateWithoutBookmarkedByInput>
    create: XOR<PostCreateWithoutBookmarkedByInput, PostUncheckedCreateWithoutBookmarkedByInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutBookmarkedByInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutBookmarkedByInput, PostUncheckedUpdateWithoutBookmarkedByInput>
  }

  export type PostUpdateWithoutBookmarkedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    images?: ImageUpdateManyWithoutPostNestedInput
    tags?: PostTagUpdateManyWithoutPostNestedInput
    shareParent?: PostUpdateOneWithoutSharesNestedInput
    shares?: PostUpdateManyWithoutShareParentNestedInput
    community?: CommunityUpdateOneWithoutPostsNestedInput
    mentions?: MentionUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutBookmarkedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    shareParentId?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    images?: ImageUncheckedUpdateManyWithoutPostNestedInput
    tags?: PostTagUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostUncheckedUpdateManyWithoutShareParentNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUncheckedUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostTagCreateWithoutTagInput = {
    post: PostCreateNestedOneWithoutTagsInput
  }

  export type PostTagUncheckedCreateWithoutTagInput = {
    postId: string
  }

  export type PostTagCreateOrConnectWithoutTagInput = {
    where: PostTagWhereUniqueInput
    create: XOR<PostTagCreateWithoutTagInput, PostTagUncheckedCreateWithoutTagInput>
  }

  export type PostTagCreateManyTagInputEnvelope = {
    data: PostTagCreateManyTagInput | PostTagCreateManyTagInput[]
    skipDuplicates?: boolean
  }

  export type PostTagUpsertWithWhereUniqueWithoutTagInput = {
    where: PostTagWhereUniqueInput
    update: XOR<PostTagUpdateWithoutTagInput, PostTagUncheckedUpdateWithoutTagInput>
    create: XOR<PostTagCreateWithoutTagInput, PostTagUncheckedCreateWithoutTagInput>
  }

  export type PostTagUpdateWithWhereUniqueWithoutTagInput = {
    where: PostTagWhereUniqueInput
    data: XOR<PostTagUpdateWithoutTagInput, PostTagUncheckedUpdateWithoutTagInput>
  }

  export type PostTagUpdateManyWithWhereWithoutTagInput = {
    where: PostTagScalarWhereInput
    data: XOR<PostTagUpdateManyMutationInput, PostTagUncheckedUpdateManyWithoutTagInput>
  }

  export type TagCreateWithoutPostsInput = {
    name: string
    color: string
  }

  export type TagUncheckedCreateWithoutPostsInput = {
    name: string
    color: string
  }

  export type TagCreateOrConnectWithoutPostsInput = {
    where: TagWhereUniqueInput
    create: XOR<TagCreateWithoutPostsInput, TagUncheckedCreateWithoutPostsInput>
  }

  export type PostCreateWithoutTagsInput = {
    id?: string
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    link?: string | null
    user: UserCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkCreateNestedManyWithoutPostInput
    images?: ImageCreateNestedManyWithoutPostInput
    shareParent?: PostCreateNestedOneWithoutSharesInput
    shares?: PostCreateNestedManyWithoutShareParentInput
    community?: CommunityCreateNestedOneWithoutPostsInput
    mentions?: MentionCreateNestedManyWithoutPostInput
    sharedBy?: UserShareCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutTagsInput = {
    id?: string
    content?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    shareParentId?: string | null
    communityId?: string | null
    link?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkUncheckedCreateNestedManyWithoutPostInput
    images?: ImageUncheckedCreateNestedManyWithoutPostInput
    shares?: PostUncheckedCreateNestedManyWithoutShareParentInput
    mentions?: MentionUncheckedCreateNestedManyWithoutPostInput
    sharedBy?: UserShareUncheckedCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutTagsInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutTagsInput, PostUncheckedCreateWithoutTagsInput>
  }

  export type TagUpsertWithoutPostsInput = {
    update: XOR<TagUpdateWithoutPostsInput, TagUncheckedUpdateWithoutPostsInput>
    create: XOR<TagCreateWithoutPostsInput, TagUncheckedCreateWithoutPostsInput>
    where?: TagWhereInput
  }

  export type TagUpdateToOneWithWhereWithoutPostsInput = {
    where?: TagWhereInput
    data: XOR<TagUpdateWithoutPostsInput, TagUncheckedUpdateWithoutPostsInput>
  }

  export type TagUpdateWithoutPostsInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type TagUncheckedUpdateWithoutPostsInput = {
    name?: StringFieldUpdateOperationsInput | string
    color?: StringFieldUpdateOperationsInput | string
  }

  export type PostUpsertWithoutTagsInput = {
    update: XOR<PostUpdateWithoutTagsInput, PostUncheckedUpdateWithoutTagsInput>
    create: XOR<PostCreateWithoutTagsInput, PostUncheckedCreateWithoutTagsInput>
    where?: PostWhereInput
  }

  export type PostUpdateToOneWithWhereWithoutTagsInput = {
    where?: PostWhereInput
    data: XOR<PostUpdateWithoutTagsInput, PostUncheckedUpdateWithoutTagsInput>
  }

  export type PostUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUpdateManyWithoutPostNestedInput
    images?: ImageUpdateManyWithoutPostNestedInput
    shareParent?: PostUpdateOneWithoutSharesNestedInput
    shares?: PostUpdateManyWithoutShareParentNestedInput
    community?: CommunityUpdateOneWithoutPostsNestedInput
    mentions?: MentionUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutTagsInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    shareParentId?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUncheckedUpdateManyWithoutPostNestedInput
    images?: ImageUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostUncheckedUpdateManyWithoutShareParentNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUncheckedUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostCreateWithoutCommunityInput = {
    id?: string
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    link?: string | null
    user: UserCreateNestedOneWithoutPostsInput
    comments?: CommentCreateNestedManyWithoutPostInput
    likes?: PostLikeCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkCreateNestedManyWithoutPostInput
    images?: ImageCreateNestedManyWithoutPostInput
    tags?: PostTagCreateNestedManyWithoutPostInput
    shareParent?: PostCreateNestedOneWithoutSharesInput
    shares?: PostCreateNestedManyWithoutShareParentInput
    mentions?: MentionCreateNestedManyWithoutPostInput
    sharedBy?: UserShareCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionCreateNestedManyWithoutPostInput
  }

  export type PostUncheckedCreateWithoutCommunityInput = {
    id?: string
    content?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    shareParentId?: string | null
    link?: string | null
    comments?: CommentUncheckedCreateNestedManyWithoutPostInput
    likes?: PostLikeUncheckedCreateNestedManyWithoutPostInput
    bookmarkedBy?: BookmarkUncheckedCreateNestedManyWithoutPostInput
    images?: ImageUncheckedCreateNestedManyWithoutPostInput
    tags?: PostTagUncheckedCreateNestedManyWithoutPostInput
    shares?: PostUncheckedCreateNestedManyWithoutShareParentInput
    mentions?: MentionUncheckedCreateNestedManyWithoutPostInput
    sharedBy?: UserShareUncheckedCreateNestedManyWithoutPostInput
    NotificationMention?: NotificationMentionUncheckedCreateNestedManyWithoutPostInput
  }

  export type PostCreateOrConnectWithoutCommunityInput = {
    where: PostWhereUniqueInput
    create: XOR<PostCreateWithoutCommunityInput, PostUncheckedCreateWithoutCommunityInput>
  }

  export type PostCreateManyCommunityInputEnvelope = {
    data: PostCreateManyCommunityInput | PostCreateManyCommunityInput[]
    skipDuplicates?: boolean
  }

  export type UserCommunityCreateWithoutCommunityInput = {
    role?: $Enums.Role
    user: UserCreateNestedOneWithoutCommunitiesInput
  }

  export type UserCommunityUncheckedCreateWithoutCommunityInput = {
    userId: string
    role?: $Enums.Role
  }

  export type UserCommunityCreateOrConnectWithoutCommunityInput = {
    where: UserCommunityWhereUniqueInput
    create: XOR<UserCommunityCreateWithoutCommunityInput, UserCommunityUncheckedCreateWithoutCommunityInput>
  }

  export type UserCommunityCreateManyCommunityInputEnvelope = {
    data: UserCommunityCreateManyCommunityInput | UserCommunityCreateManyCommunityInput[]
    skipDuplicates?: boolean
  }

  export type FavouriteCommunityCreateWithoutCommunityInput = {
    user: UserCreateNestedOneWithoutFavouriteCommunitiesInput
  }

  export type FavouriteCommunityUncheckedCreateWithoutCommunityInput = {
    userId: string
  }

  export type FavouriteCommunityCreateOrConnectWithoutCommunityInput = {
    where: FavouriteCommunityWhereUniqueInput
    create: XOR<FavouriteCommunityCreateWithoutCommunityInput, FavouriteCommunityUncheckedCreateWithoutCommunityInput>
  }

  export type FavouriteCommunityCreateManyCommunityInputEnvelope = {
    data: FavouriteCommunityCreateManyCommunityInput | FavouriteCommunityCreateManyCommunityInput[]
    skipDuplicates?: boolean
  }

  export type CategoryCreateWithoutComunitiesInput = {
    id?: string
    name: string
  }

  export type CategoryUncheckedCreateWithoutComunitiesInput = {
    id?: string
    name: string
  }

  export type CategoryCreateOrConnectWithoutComunitiesInput = {
    where: CategoryWhereUniqueInput
    create: XOR<CategoryCreateWithoutComunitiesInput, CategoryUncheckedCreateWithoutComunitiesInput>
  }

  export type NotificationCommunityNewMemberCreateWithoutCommunityInput = {
    id?: string
    notification: NotificationCreateNestedOneWithoutNotificationCommunityNewMemberInput
    user: UserCreateNestedOneWithoutNotificationCommunityNewMemberInput
  }

  export type NotificationCommunityNewMemberUncheckedCreateWithoutCommunityInput = {
    id?: string
    notificationId: string
    userId: string
  }

  export type NotificationCommunityNewMemberCreateOrConnectWithoutCommunityInput = {
    where: NotificationCommunityNewMemberWhereUniqueInput
    create: XOR<NotificationCommunityNewMemberCreateWithoutCommunityInput, NotificationCommunityNewMemberUncheckedCreateWithoutCommunityInput>
  }

  export type NotificationCommunityNewMemberCreateManyCommunityInputEnvelope = {
    data: NotificationCommunityNewMemberCreateManyCommunityInput | NotificationCommunityNewMemberCreateManyCommunityInput[]
    skipDuplicates?: boolean
  }

  export type PostUpsertWithWhereUniqueWithoutCommunityInput = {
    where: PostWhereUniqueInput
    update: XOR<PostUpdateWithoutCommunityInput, PostUncheckedUpdateWithoutCommunityInput>
    create: XOR<PostCreateWithoutCommunityInput, PostUncheckedCreateWithoutCommunityInput>
  }

  export type PostUpdateWithWhereUniqueWithoutCommunityInput = {
    where: PostWhereUniqueInput
    data: XOR<PostUpdateWithoutCommunityInput, PostUncheckedUpdateWithoutCommunityInput>
  }

  export type PostUpdateManyWithWhereWithoutCommunityInput = {
    where: PostScalarWhereInput
    data: XOR<PostUpdateManyMutationInput, PostUncheckedUpdateManyWithoutCommunityInput>
  }

  export type UserCommunityUpsertWithWhereUniqueWithoutCommunityInput = {
    where: UserCommunityWhereUniqueInput
    update: XOR<UserCommunityUpdateWithoutCommunityInput, UserCommunityUncheckedUpdateWithoutCommunityInput>
    create: XOR<UserCommunityCreateWithoutCommunityInput, UserCommunityUncheckedCreateWithoutCommunityInput>
  }

  export type UserCommunityUpdateWithWhereUniqueWithoutCommunityInput = {
    where: UserCommunityWhereUniqueInput
    data: XOR<UserCommunityUpdateWithoutCommunityInput, UserCommunityUncheckedUpdateWithoutCommunityInput>
  }

  export type UserCommunityUpdateManyWithWhereWithoutCommunityInput = {
    where: UserCommunityScalarWhereInput
    data: XOR<UserCommunityUpdateManyMutationInput, UserCommunityUncheckedUpdateManyWithoutCommunityInput>
  }

  export type FavouriteCommunityUpsertWithWhereUniqueWithoutCommunityInput = {
    where: FavouriteCommunityWhereUniqueInput
    update: XOR<FavouriteCommunityUpdateWithoutCommunityInput, FavouriteCommunityUncheckedUpdateWithoutCommunityInput>
    create: XOR<FavouriteCommunityCreateWithoutCommunityInput, FavouriteCommunityUncheckedCreateWithoutCommunityInput>
  }

  export type FavouriteCommunityUpdateWithWhereUniqueWithoutCommunityInput = {
    where: FavouriteCommunityWhereUniqueInput
    data: XOR<FavouriteCommunityUpdateWithoutCommunityInput, FavouriteCommunityUncheckedUpdateWithoutCommunityInput>
  }

  export type FavouriteCommunityUpdateManyWithWhereWithoutCommunityInput = {
    where: FavouriteCommunityScalarWhereInput
    data: XOR<FavouriteCommunityUpdateManyMutationInput, FavouriteCommunityUncheckedUpdateManyWithoutCommunityInput>
  }

  export type CategoryUpsertWithoutComunitiesInput = {
    update: XOR<CategoryUpdateWithoutComunitiesInput, CategoryUncheckedUpdateWithoutComunitiesInput>
    create: XOR<CategoryCreateWithoutComunitiesInput, CategoryUncheckedCreateWithoutComunitiesInput>
    where?: CategoryWhereInput
  }

  export type CategoryUpdateToOneWithWhereWithoutComunitiesInput = {
    where?: CategoryWhereInput
    data: XOR<CategoryUpdateWithoutComunitiesInput, CategoryUncheckedUpdateWithoutComunitiesInput>
  }

  export type CategoryUpdateWithoutComunitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type CategoryUncheckedUpdateWithoutComunitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCommunityNewMemberUpsertWithWhereUniqueWithoutCommunityInput = {
    where: NotificationCommunityNewMemberWhereUniqueInput
    update: XOR<NotificationCommunityNewMemberUpdateWithoutCommunityInput, NotificationCommunityNewMemberUncheckedUpdateWithoutCommunityInput>
    create: XOR<NotificationCommunityNewMemberCreateWithoutCommunityInput, NotificationCommunityNewMemberUncheckedCreateWithoutCommunityInput>
  }

  export type NotificationCommunityNewMemberUpdateWithWhereUniqueWithoutCommunityInput = {
    where: NotificationCommunityNewMemberWhereUniqueInput
    data: XOR<NotificationCommunityNewMemberUpdateWithoutCommunityInput, NotificationCommunityNewMemberUncheckedUpdateWithoutCommunityInput>
  }

  export type NotificationCommunityNewMemberUpdateManyWithWhereWithoutCommunityInput = {
    where: NotificationCommunityNewMemberScalarWhereInput
    data: XOR<NotificationCommunityNewMemberUpdateManyMutationInput, NotificationCommunityNewMemberUncheckedUpdateManyWithoutCommunityInput>
  }

  export type CommunityCreateWithoutFavouriteByInput = {
    id?: string
    name: string
    image?: string
    bannerImage?: string
    description?: string
    posts?: PostCreateNestedManyWithoutCommunityInput
    members?: UserCommunityCreateNestedManyWithoutCommunityInput
    category: CategoryCreateNestedOneWithoutComunitiesInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUncheckedCreateWithoutFavouriteByInput = {
    id?: string
    name: string
    image?: string
    bannerImage?: string
    description?: string
    categoryId: string
    posts?: PostUncheckedCreateNestedManyWithoutCommunityInput
    members?: UserCommunityUncheckedCreateNestedManyWithoutCommunityInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type CommunityCreateOrConnectWithoutFavouriteByInput = {
    where: CommunityWhereUniqueInput
    create: XOR<CommunityCreateWithoutFavouriteByInput, CommunityUncheckedCreateWithoutFavouriteByInput>
  }

  export type UserCreateWithoutFavouriteCommunitiesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    followedBy?: UserCreateNestedManyWithoutFollowingInput
    following?: UserCreateNestedManyWithoutFollowedByInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    communities?: UserCommunityCreateNestedManyWithoutUserInput
    mentions?: MentionCreateNestedManyWithoutUserInput
    sharedPost?: UserShareCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFavouriteCommunitiesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    followedBy?: UserUncheckedCreateNestedManyWithoutFollowingInput
    following?: UserUncheckedCreateNestedManyWithoutFollowedByInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    communities?: UserCommunityUncheckedCreateNestedManyWithoutUserInput
    mentions?: MentionUncheckedCreateNestedManyWithoutUserInput
    sharedPost?: UserShareUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFavouriteCommunitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavouriteCommunitiesInput, UserUncheckedCreateWithoutFavouriteCommunitiesInput>
  }

  export type CommunityUpsertWithoutFavouriteByInput = {
    update: XOR<CommunityUpdateWithoutFavouriteByInput, CommunityUncheckedUpdateWithoutFavouriteByInput>
    create: XOR<CommunityCreateWithoutFavouriteByInput, CommunityUncheckedCreateWithoutFavouriteByInput>
    where?: CommunityWhereInput
  }

  export type CommunityUpdateToOneWithWhereWithoutFavouriteByInput = {
    where?: CommunityWhereInput
    data: XOR<CommunityUpdateWithoutFavouriteByInput, CommunityUncheckedUpdateWithoutFavouriteByInput>
  }

  export type CommunityUpdateWithoutFavouriteByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    bannerImage?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    posts?: PostUpdateManyWithoutCommunityNestedInput
    members?: UserCommunityUpdateManyWithoutCommunityNestedInput
    category?: CategoryUpdateOneRequiredWithoutComunitiesNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateWithoutFavouriteByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    bannerImage?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    posts?: PostUncheckedUpdateManyWithoutCommunityNestedInput
    members?: UserCommunityUncheckedUpdateManyWithoutCommunityNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutCommunityNestedInput
  }

  export type UserUpsertWithoutFavouriteCommunitiesInput = {
    update: XOR<UserUpdateWithoutFavouriteCommunitiesInput, UserUncheckedUpdateWithoutFavouriteCommunitiesInput>
    create: XOR<UserCreateWithoutFavouriteCommunitiesInput, UserUncheckedCreateWithoutFavouriteCommunitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavouriteCommunitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavouriteCommunitiesInput, UserUncheckedUpdateWithoutFavouriteCommunitiesInput>
  }

  export type UserUpdateWithoutFavouriteCommunitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    followedBy?: UserUpdateManyWithoutFollowingNestedInput
    following?: UserUpdateManyWithoutFollowedByNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUpdateManyWithoutUserNestedInput
    mentions?: MentionUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFavouriteCommunitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    following?: UserUncheckedUpdateManyWithoutFollowedByNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type CommunityCreateWithoutCategoryInput = {
    id?: string
    name: string
    image?: string
    bannerImage?: string
    description?: string
    posts?: PostCreateNestedManyWithoutCommunityInput
    members?: UserCommunityCreateNestedManyWithoutCommunityInput
    favouriteBy?: FavouriteCommunityCreateNestedManyWithoutCommunityInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUncheckedCreateWithoutCategoryInput = {
    id?: string
    name: string
    image?: string
    bannerImage?: string
    description?: string
    posts?: PostUncheckedCreateNestedManyWithoutCommunityInput
    members?: UserCommunityUncheckedCreateNestedManyWithoutCommunityInput
    favouriteBy?: FavouriteCommunityUncheckedCreateNestedManyWithoutCommunityInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type CommunityCreateOrConnectWithoutCategoryInput = {
    where: CommunityWhereUniqueInput
    create: XOR<CommunityCreateWithoutCategoryInput, CommunityUncheckedCreateWithoutCategoryInput>
  }

  export type CommunityCreateManyCategoryInputEnvelope = {
    data: CommunityCreateManyCategoryInput | CommunityCreateManyCategoryInput[]
    skipDuplicates?: boolean
  }

  export type CommunityUpsertWithWhereUniqueWithoutCategoryInput = {
    where: CommunityWhereUniqueInput
    update: XOR<CommunityUpdateWithoutCategoryInput, CommunityUncheckedUpdateWithoutCategoryInput>
    create: XOR<CommunityCreateWithoutCategoryInput, CommunityUncheckedCreateWithoutCategoryInput>
  }

  export type CommunityUpdateWithWhereUniqueWithoutCategoryInput = {
    where: CommunityWhereUniqueInput
    data: XOR<CommunityUpdateWithoutCategoryInput, CommunityUncheckedUpdateWithoutCategoryInput>
  }

  export type CommunityUpdateManyWithWhereWithoutCategoryInput = {
    where: CommunityScalarWhereInput
    data: XOR<CommunityUpdateManyMutationInput, CommunityUncheckedUpdateManyWithoutCategoryInput>
  }

  export type CommunityScalarWhereInput = {
    AND?: CommunityScalarWhereInput | CommunityScalarWhereInput[]
    OR?: CommunityScalarWhereInput[]
    NOT?: CommunityScalarWhereInput | CommunityScalarWhereInput[]
    id?: StringFilter<"Community"> | string
    name?: StringFilter<"Community"> | string
    image?: StringFilter<"Community"> | string
    bannerImage?: StringFilter<"Community"> | string
    description?: StringFilter<"Community"> | string
    categoryId?: StringFilter<"Community"> | string
  }

  export type CommunityCreateWithoutMembersInput = {
    id?: string
    name: string
    image?: string
    bannerImage?: string
    description?: string
    posts?: PostCreateNestedManyWithoutCommunityInput
    favouriteBy?: FavouriteCommunityCreateNestedManyWithoutCommunityInput
    category: CategoryCreateNestedOneWithoutComunitiesInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutCommunityInput
  }

  export type CommunityUncheckedCreateWithoutMembersInput = {
    id?: string
    name: string
    image?: string
    bannerImage?: string
    description?: string
    categoryId: string
    posts?: PostUncheckedCreateNestedManyWithoutCommunityInput
    favouriteBy?: FavouriteCommunityUncheckedCreateNestedManyWithoutCommunityInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutCommunityInput
  }

  export type CommunityCreateOrConnectWithoutMembersInput = {
    where: CommunityWhereUniqueInput
    create: XOR<CommunityCreateWithoutMembersInput, CommunityUncheckedCreateWithoutMembersInput>
  }

  export type UserCreateWithoutCommunitiesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountCreateNestedManyWithoutUserInput
    sessions?: SessionCreateNestedManyWithoutUserInput
    followedBy?: UserCreateNestedManyWithoutFollowingInput
    following?: UserCreateNestedManyWithoutFollowedByInput
    posts?: PostCreateNestedManyWithoutUserInput
    comments?: CommentCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkCreateNestedManyWithoutUserInput
    mentions?: MentionCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityCreateNestedManyWithoutUserInput
    sharedPost?: UserShareCreateNestedManyWithoutUserInput
    notifications?: NotificationCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutCommunitiesInput = {
    id?: string
    name?: string | null
    email?: string | null
    emailVerified?: Date | string | null
    image?: string | null
    bannerImage?: string | null
    bio?: string
    facebook?: string | null
    instagram?: string | null
    twitter?: string | null
    whatsapp?: string | null
    accounts?: AccountUncheckedCreateNestedManyWithoutUserInput
    sessions?: SessionUncheckedCreateNestedManyWithoutUserInput
    followedBy?: UserUncheckedCreateNestedManyWithoutFollowingInput
    following?: UserUncheckedCreateNestedManyWithoutFollowedByInput
    posts?: PostUncheckedCreateNestedManyWithoutUserInput
    comments?: CommentUncheckedCreateNestedManyWithoutUserInput
    likedPosts?: PostLikeUncheckedCreateNestedManyWithoutUserInput
    likedComments?: CommentLikeUncheckedCreateNestedManyWithoutUserInput
    bookmarks?: BookmarkUncheckedCreateNestedManyWithoutUserInput
    mentions?: MentionUncheckedCreateNestedManyWithoutUserInput
    favouriteCommunities?: FavouriteCommunityUncheckedCreateNestedManyWithoutUserInput
    sharedPost?: UserShareUncheckedCreateNestedManyWithoutUserInput
    notifications?: NotificationUncheckedCreateNestedManyWithoutUserInput
    notificationStartFollow?: NotificationStartFollowUncheckedCreateNestedManyWithoutUserNotificationStartFollowInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutCommunitiesInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutCommunitiesInput, UserUncheckedCreateWithoutCommunitiesInput>
  }

  export type CommunityUpsertWithoutMembersInput = {
    update: XOR<CommunityUpdateWithoutMembersInput, CommunityUncheckedUpdateWithoutMembersInput>
    create: XOR<CommunityCreateWithoutMembersInput, CommunityUncheckedCreateWithoutMembersInput>
    where?: CommunityWhereInput
  }

  export type CommunityUpdateToOneWithWhereWithoutMembersInput = {
    where?: CommunityWhereInput
    data: XOR<CommunityUpdateWithoutMembersInput, CommunityUncheckedUpdateWithoutMembersInput>
  }

  export type CommunityUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    bannerImage?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    posts?: PostUpdateManyWithoutCommunityNestedInput
    favouriteBy?: FavouriteCommunityUpdateManyWithoutCommunityNestedInput
    category?: CategoryUpdateOneRequiredWithoutComunitiesNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateWithoutMembersInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    bannerImage?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    categoryId?: StringFieldUpdateOperationsInput | string
    posts?: PostUncheckedUpdateManyWithoutCommunityNestedInput
    favouriteBy?: FavouriteCommunityUncheckedUpdateManyWithoutCommunityNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutCommunityNestedInput
  }

  export type UserUpsertWithoutCommunitiesInput = {
    update: XOR<UserUpdateWithoutCommunitiesInput, UserUncheckedUpdateWithoutCommunitiesInput>
    create: XOR<UserCreateWithoutCommunitiesInput, UserUncheckedCreateWithoutCommunitiesInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutCommunitiesInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutCommunitiesInput, UserUncheckedUpdateWithoutCommunitiesInput>
  }

  export type UserUpdateWithoutCommunitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    followedBy?: UserUpdateManyWithoutFollowingNestedInput
    following?: UserUpdateManyWithoutFollowedByNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    mentions?: MentionUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutCommunitiesInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    following?: UserUncheckedUpdateManyWithoutFollowedByNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUncheckedUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AccountCreateManyUserInput = {
    id?: string
    type: string
    provider: string
    providerAccountId: string
    refresh_token?: string | null
    access_token?: string | null
    expires_at?: number | null
    token_type?: string | null
    scope?: string | null
    id_token?: string | null
    session_state?: string | null
    refresh_token_expires_in?: number | null
  }

  export type SessionCreateManyUserInput = {
    id?: string
    sessionToken: string
    expires: Date | string
  }

  export type PostCreateManyUserInput = {
    id?: string
    content?: string | null
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    shareParentId?: string | null
    communityId?: string | null
    link?: string | null
  }

  export type CommentCreateManyUserInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    postId: string
    parentId?: string | null
    isDeleted?: boolean
  }

  export type PostLikeCreateManyUserInput = {
    postId: string
  }

  export type CommentLikeCreateManyUserInput = {
    commentId: string
  }

  export type BookmarkCreateManyUserInput = {
    postId: string
  }

  export type UserCommunityCreateManyUserInput = {
    communityId: string
    role?: $Enums.Role
  }

  export type MentionCreateManyUserInput = {
    postId: string
  }

  export type FavouriteCommunityCreateManyUserInput = {
    communityId: string
  }

  export type UserShareCreateManyUserInput = {
    postId: string
  }

  export type NotificationCreateManyUserInput = {
    id?: string
    createdAt?: Date | string
    isRead?: boolean
  }

  export type NotificationStartFollowCreateManyUserNotificationStartFollowInput = {
    id?: string
    notificationId: string
  }

  export type NotificationCommunityNewMemberCreateManyUserInput = {
    id?: string
    notificationId: string
    communityId: string
  }

  export type AccountUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token_expires_in?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AccountUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token_expires_in?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AccountUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    type?: StringFieldUpdateOperationsInput | string
    provider?: StringFieldUpdateOperationsInput | string
    providerAccountId?: StringFieldUpdateOperationsInput | string
    refresh_token?: NullableStringFieldUpdateOperationsInput | string | null
    access_token?: NullableStringFieldUpdateOperationsInput | string | null
    expires_at?: NullableIntFieldUpdateOperationsInput | number | null
    token_type?: NullableStringFieldUpdateOperationsInput | string | null
    scope?: NullableStringFieldUpdateOperationsInput | string | null
    id_token?: NullableStringFieldUpdateOperationsInput | string | null
    session_state?: NullableStringFieldUpdateOperationsInput | string | null
    refresh_token_expires_in?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type SessionUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type SessionUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    sessionToken?: StringFieldUpdateOperationsInput | string
    expires?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type UserUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    followedBy?: UserUpdateManyWithoutFollowingNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUpdateManyWithoutUserNestedInput
    mentions?: MentionUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    followedBy?: UserUncheckedUpdateManyWithoutFollowingNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUncheckedUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutFollowingInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserUpdateWithoutFollowedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUpdateManyWithoutUserNestedInput
    sessions?: SessionUpdateManyWithoutUserNestedInput
    following?: UserUpdateManyWithoutFollowedByNestedInput
    posts?: PostUpdateManyWithoutUserNestedInput
    comments?: CommentUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUpdateManyWithoutUserNestedInput
    mentions?: MentionUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUpdateManyWithoutUserNestedInput
    notifications?: NotificationUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFollowedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
    accounts?: AccountUncheckedUpdateManyWithoutUserNestedInput
    sessions?: SessionUncheckedUpdateManyWithoutUserNestedInput
    following?: UserUncheckedUpdateManyWithoutFollowedByNestedInput
    posts?: PostUncheckedUpdateManyWithoutUserNestedInput
    comments?: CommentUncheckedUpdateManyWithoutUserNestedInput
    likedPosts?: PostLikeUncheckedUpdateManyWithoutUserNestedInput
    likedComments?: CommentLikeUncheckedUpdateManyWithoutUserNestedInput
    bookmarks?: BookmarkUncheckedUpdateManyWithoutUserNestedInput
    communities?: UserCommunityUncheckedUpdateManyWithoutUserNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutUserNestedInput
    favouriteCommunities?: FavouriteCommunityUncheckedUpdateManyWithoutUserNestedInput
    sharedPost?: UserShareUncheckedUpdateManyWithoutUserNestedInput
    notifications?: NotificationUncheckedUpdateManyWithoutUserNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateManyWithoutUserNotificationStartFollowNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateManyWithoutFollowedByInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: NullableStringFieldUpdateOperationsInput | string | null
    email?: NullableStringFieldUpdateOperationsInput | string | null
    emailVerified?: NullableDateTimeFieldUpdateOperationsInput | Date | string | null
    image?: NullableStringFieldUpdateOperationsInput | string | null
    bannerImage?: NullableStringFieldUpdateOperationsInput | string | null
    bio?: StringFieldUpdateOperationsInput | string
    facebook?: NullableStringFieldUpdateOperationsInput | string | null
    instagram?: NullableStringFieldUpdateOperationsInput | string | null
    twitter?: NullableStringFieldUpdateOperationsInput | string | null
    whatsapp?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type PostUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUpdateManyWithoutPostNestedInput
    images?: ImageUpdateManyWithoutPostNestedInput
    tags?: PostTagUpdateManyWithoutPostNestedInput
    shareParent?: PostUpdateOneWithoutSharesNestedInput
    shares?: PostUpdateManyWithoutShareParentNestedInput
    community?: CommunityUpdateOneWithoutPostsNestedInput
    mentions?: MentionUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    shareParentId?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUncheckedUpdateManyWithoutPostNestedInput
    images?: ImageUncheckedUpdateManyWithoutPostNestedInput
    tags?: PostTagUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostUncheckedUpdateManyWithoutShareParentNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUncheckedUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    shareParentId?: NullableStringFieldUpdateOperationsInput | string | null
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type CommentUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    likes?: CommentLikeUpdateManyWithoutCommentNestedInput
    parent?: CommentUpdateOneWithoutChildrenNestedInput
    children?: CommentUpdateManyWithoutParentNestedInput
    notificationPostComment?: NotificationPostCommentUpdateManyWithoutCommentNestedInput
    notificationCommentReply?: NotificationCommentReplyUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    likes?: CommentLikeUncheckedUpdateManyWithoutCommentNestedInput
    children?: CommentUncheckedUpdateManyWithoutParentNestedInput
    notificationPostComment?: NotificationPostCommentUncheckedUpdateManyWithoutCommentNestedInput
    notificationCommentReply?: NotificationCommentReplyUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    postId?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PostLikeUpdateWithoutUserInput = {
    post?: PostUpdateOneRequiredWithoutLikesNestedInput
  }

  export type PostLikeUncheckedUpdateWithoutUserInput = {
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostLikeUncheckedUpdateManyWithoutUserInput = {
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentLikeUpdateWithoutUserInput = {
    comment?: CommentUpdateOneRequiredWithoutLikesNestedInput
  }

  export type CommentLikeUncheckedUpdateWithoutUserInput = {
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentLikeUncheckedUpdateManyWithoutUserInput = {
    commentId?: StringFieldUpdateOperationsInput | string
  }

  export type BookmarkUpdateWithoutUserInput = {
    post?: PostUpdateOneRequiredWithoutBookmarkedByNestedInput
  }

  export type BookmarkUncheckedUpdateWithoutUserInput = {
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type BookmarkUncheckedUpdateManyWithoutUserInput = {
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type UserCommunityUpdateWithoutUserInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    community?: CommunityUpdateOneRequiredWithoutMembersNestedInput
  }

  export type UserCommunityUncheckedUpdateWithoutUserInput = {
    communityId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type UserCommunityUncheckedUpdateManyWithoutUserInput = {
    communityId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type MentionUpdateWithoutUserInput = {
    post?: PostUpdateOneRequiredWithoutMentionsNestedInput
  }

  export type MentionUncheckedUpdateWithoutUserInput = {
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type MentionUncheckedUpdateManyWithoutUserInput = {
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type FavouriteCommunityUpdateWithoutUserInput = {
    community?: CommunityUpdateOneRequiredWithoutFavouriteByNestedInput
  }

  export type FavouriteCommunityUncheckedUpdateWithoutUserInput = {
    communityId?: StringFieldUpdateOperationsInput | string
  }

  export type FavouriteCommunityUncheckedUpdateManyWithoutUserInput = {
    communityId?: StringFieldUpdateOperationsInput | string
  }

  export type UserShareUpdateWithoutUserInput = {
    post?: PostUpdateOneRequiredWithoutSharedByNestedInput
  }

  export type UserShareUncheckedUpdateWithoutUserInput = {
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type UserShareUncheckedUpdateManyWithoutUserInput = {
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    notificationMention?: NotificationMentionUpdateOneWithoutNotificationNestedInput
    notificationStartFollow?: NotificationStartFollowUpdateOneWithoutNotificationNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateOneWithoutNotificationNestedInput
    notificationPostComment?: NotificationPostCommentUpdateOneWithoutNotificationNestedInput
    notificationCommentReply?: NotificationCommentReplyUpdateOneWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
    notificationMention?: NotificationMentionUncheckedUpdateOneWithoutNotificationNestedInput
    notificationStartFollow?: NotificationStartFollowUncheckedUpdateOneWithoutNotificationNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateOneWithoutNotificationNestedInput
    notificationPostComment?: NotificationPostCommentUncheckedUpdateOneWithoutNotificationNestedInput
    notificationCommentReply?: NotificationCommentReplyUncheckedUpdateOneWithoutNotificationNestedInput
  }

  export type NotificationUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isRead?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationStartFollowUpdateWithoutUserNotificationStartFollowInput = {
    id?: StringFieldUpdateOperationsInput | string
    notification?: NotificationUpdateOneRequiredWithoutNotificationStartFollowNestedInput
  }

  export type NotificationStartFollowUncheckedUpdateWithoutUserNotificationStartFollowInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationStartFollowUncheckedUpdateManyWithoutUserNotificationStartFollowInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCommunityNewMemberUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    notification?: NotificationUpdateOneRequiredWithoutNotificationCommunityNewMemberNestedInput
    community?: CommunityUpdateOneRequiredWithoutNotificationCommunityNewMemberNestedInput
  }

  export type NotificationCommunityNewMemberUncheckedUpdateWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCommunityNewMemberUncheckedUpdateManyWithoutUserInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    communityId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentCreateManyPostInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    parentId?: string | null
    isDeleted?: boolean
  }

  export type PostLikeCreateManyPostInput = {
    userId: string
  }

  export type BookmarkCreateManyPostInput = {
    userId: string
  }

  export type ImageCreateManyPostInput = {
    id?: string
    url: string
    fallbackUrl: string
    alt: string
    width: number
    height: number
  }

  export type PostTagCreateManyPostInput = {
    tagName: string
  }

  export type PostCreateManyShareParentInput = {
    id?: string
    content?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    communityId?: string | null
    link?: string | null
  }

  export type MentionCreateManyPostInput = {
    userId: string
  }

  export type UserShareCreateManyPostInput = {
    userId: string
  }

  export type NotificationMentionCreateManyPostInput = {
    id?: string
    notificationId: string
  }

  export type CommentUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    likes?: CommentLikeUpdateManyWithoutCommentNestedInput
    parent?: CommentUpdateOneWithoutChildrenNestedInput
    children?: CommentUpdateManyWithoutParentNestedInput
    notificationPostComment?: NotificationPostCommentUpdateManyWithoutCommentNestedInput
    notificationCommentReply?: NotificationCommentReplyUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    likes?: CommentLikeUncheckedUpdateManyWithoutCommentNestedInput
    children?: CommentUncheckedUpdateManyWithoutParentNestedInput
    notificationPostComment?: NotificationPostCommentUncheckedUpdateManyWithoutCommentNestedInput
    notificationCommentReply?: NotificationCommentReplyUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    parentId?: NullableStringFieldUpdateOperationsInput | string | null
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type PostLikeUpdateWithoutPostInput = {
    user?: UserUpdateOneRequiredWithoutLikedPostsNestedInput
  }

  export type PostLikeUncheckedUpdateWithoutPostInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type PostLikeUncheckedUpdateManyWithoutPostInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type BookmarkUpdateWithoutPostInput = {
    user?: UserUpdateOneRequiredWithoutBookmarksNestedInput
  }

  export type BookmarkUncheckedUpdateWithoutPostInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type BookmarkUncheckedUpdateManyWithoutPostInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type ImageUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fallbackUrl?: StringFieldUpdateOperationsInput | string
    alt?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
  }

  export type ImageUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fallbackUrl?: StringFieldUpdateOperationsInput | string
    alt?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
  }

  export type ImageUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    url?: StringFieldUpdateOperationsInput | string
    fallbackUrl?: StringFieldUpdateOperationsInput | string
    alt?: StringFieldUpdateOperationsInput | string
    width?: IntFieldUpdateOperationsInput | number
    height?: IntFieldUpdateOperationsInput | number
  }

  export type PostTagUpdateWithoutPostInput = {
    tag?: TagUpdateOneRequiredWithoutPostsNestedInput
  }

  export type PostTagUncheckedUpdateWithoutPostInput = {
    tagName?: StringFieldUpdateOperationsInput | string
  }

  export type PostTagUncheckedUpdateManyWithoutPostInput = {
    tagName?: StringFieldUpdateOperationsInput | string
  }

  export type PostUpdateWithoutShareParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUpdateManyWithoutPostNestedInput
    images?: ImageUpdateManyWithoutPostNestedInput
    tags?: PostTagUpdateManyWithoutPostNestedInput
    shares?: PostUpdateManyWithoutShareParentNestedInput
    community?: CommunityUpdateOneWithoutPostsNestedInput
    mentions?: MentionUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutShareParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUncheckedUpdateManyWithoutPostNestedInput
    images?: ImageUncheckedUpdateManyWithoutPostNestedInput
    tags?: PostTagUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostUncheckedUpdateManyWithoutShareParentNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUncheckedUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutShareParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    communityId?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type MentionUpdateWithoutPostInput = {
    user?: UserUpdateOneRequiredWithoutMentionsNestedInput
  }

  export type MentionUncheckedUpdateWithoutPostInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type MentionUncheckedUpdateManyWithoutPostInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserShareUpdateWithoutPostInput = {
    user?: UserUpdateOneRequiredWithoutSharedPostNestedInput
  }

  export type UserShareUncheckedUpdateWithoutPostInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type UserShareUncheckedUpdateManyWithoutPostInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationMentionUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    notification?: NotificationUpdateOneRequiredWithoutNotificationMentionNestedInput
  }

  export type NotificationMentionUncheckedUpdateWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationMentionUncheckedUpdateManyWithoutPostInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentLikeCreateManyCommentInput = {
    userId: string
  }

  export type CommentCreateManyParentInput = {
    id?: string
    message: string
    createdAt?: Date | string
    updatedAt?: Date | string
    userId: string
    postId: string
    isDeleted?: boolean
  }

  export type NotificationPostCommentCreateManyCommentInput = {
    id?: string
    notificationId: string
  }

  export type NotificationCommentReplyCreateManyCommentInput = {
    id?: string
    notificationId: string
  }

  export type CommentLikeUpdateWithoutCommentInput = {
    user?: UserUpdateOneRequiredWithoutLikedCommentsNestedInput
  }

  export type CommentLikeUncheckedUpdateWithoutCommentInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentLikeUncheckedUpdateManyWithoutCommentInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CommentUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    user?: UserUpdateOneRequiredWithoutCommentsNestedInput
    post?: PostUpdateOneRequiredWithoutCommentsNestedInput
    likes?: CommentLikeUpdateManyWithoutCommentNestedInput
    children?: CommentUpdateManyWithoutParentNestedInput
    notificationPostComment?: NotificationPostCommentUpdateManyWithoutCommentNestedInput
    notificationCommentReply?: NotificationCommentReplyUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    likes?: CommentLikeUncheckedUpdateManyWithoutCommentNestedInput
    children?: CommentUncheckedUpdateManyWithoutParentNestedInput
    notificationPostComment?: NotificationPostCommentUncheckedUpdateManyWithoutCommentNestedInput
    notificationCommentReply?: NotificationCommentReplyUncheckedUpdateManyWithoutCommentNestedInput
  }

  export type CommentUncheckedUpdateManyWithoutParentInput = {
    id?: StringFieldUpdateOperationsInput | string
    message?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    userId?: StringFieldUpdateOperationsInput | string
    postId?: StringFieldUpdateOperationsInput | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
  }

  export type NotificationPostCommentUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    notification?: NotificationUpdateOneRequiredWithoutNotificationPostCommentNestedInput
  }

  export type NotificationPostCommentUncheckedUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationPostCommentUncheckedUpdateManyWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCommentReplyUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    notification?: NotificationUpdateOneRequiredWithoutNotificationCommentReplyNestedInput
  }

  export type NotificationCommentReplyUncheckedUpdateWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCommentReplyUncheckedUpdateManyWithoutCommentInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
  }

  export type PostTagCreateManyTagInput = {
    postId: string
  }

  export type PostTagUpdateWithoutTagInput = {
    post?: PostUpdateOneRequiredWithoutTagsNestedInput
  }

  export type PostTagUncheckedUpdateWithoutTagInput = {
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostTagUncheckedUpdateManyWithoutTagInput = {
    postId?: StringFieldUpdateOperationsInput | string
  }

  export type PostCreateManyCommunityInput = {
    id?: string
    content?: string | null
    userId: string
    createdAt?: Date | string
    updatedAt?: Date | string
    isDeleted?: boolean
    shareParentId?: string | null
    link?: string | null
  }

  export type UserCommunityCreateManyCommunityInput = {
    userId: string
    role?: $Enums.Role
  }

  export type FavouriteCommunityCreateManyCommunityInput = {
    userId: string
  }

  export type NotificationCommunityNewMemberCreateManyCommunityInput = {
    id?: string
    notificationId: string
    userId: string
  }

  export type PostUpdateWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    link?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutPostsNestedInput
    comments?: CommentUpdateManyWithoutPostNestedInput
    likes?: PostLikeUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUpdateManyWithoutPostNestedInput
    images?: ImageUpdateManyWithoutPostNestedInput
    tags?: PostTagUpdateManyWithoutPostNestedInput
    shareParent?: PostUpdateOneWithoutSharesNestedInput
    shares?: PostUpdateManyWithoutShareParentNestedInput
    mentions?: MentionUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    shareParentId?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
    comments?: CommentUncheckedUpdateManyWithoutPostNestedInput
    likes?: PostLikeUncheckedUpdateManyWithoutPostNestedInput
    bookmarkedBy?: BookmarkUncheckedUpdateManyWithoutPostNestedInput
    images?: ImageUncheckedUpdateManyWithoutPostNestedInput
    tags?: PostTagUncheckedUpdateManyWithoutPostNestedInput
    shares?: PostUncheckedUpdateManyWithoutShareParentNestedInput
    mentions?: MentionUncheckedUpdateManyWithoutPostNestedInput
    sharedBy?: UserShareUncheckedUpdateManyWithoutPostNestedInput
    NotificationMention?: NotificationMentionUncheckedUpdateManyWithoutPostNestedInput
  }

  export type PostUncheckedUpdateManyWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    content?: NullableStringFieldUpdateOperationsInput | string | null
    userId?: StringFieldUpdateOperationsInput | string
    createdAt?: DateTimeFieldUpdateOperationsInput | Date | string
    updatedAt?: DateTimeFieldUpdateOperationsInput | Date | string
    isDeleted?: BoolFieldUpdateOperationsInput | boolean
    shareParentId?: NullableStringFieldUpdateOperationsInput | string | null
    link?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type UserCommunityUpdateWithoutCommunityInput = {
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
    user?: UserUpdateOneRequiredWithoutCommunitiesNestedInput
  }

  export type UserCommunityUncheckedUpdateWithoutCommunityInput = {
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type UserCommunityUncheckedUpdateManyWithoutCommunityInput = {
    userId?: StringFieldUpdateOperationsInput | string
    role?: EnumRoleFieldUpdateOperationsInput | $Enums.Role
  }

  export type FavouriteCommunityUpdateWithoutCommunityInput = {
    user?: UserUpdateOneRequiredWithoutFavouriteCommunitiesNestedInput
  }

  export type FavouriteCommunityUncheckedUpdateWithoutCommunityInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type FavouriteCommunityUncheckedUpdateManyWithoutCommunityInput = {
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCommunityNewMemberUpdateWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    notification?: NotificationUpdateOneRequiredWithoutNotificationCommunityNewMemberNestedInput
    user?: UserUpdateOneRequiredWithoutNotificationCommunityNewMemberNestedInput
  }

  export type NotificationCommunityNewMemberUncheckedUpdateWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type NotificationCommunityNewMemberUncheckedUpdateManyWithoutCommunityInput = {
    id?: StringFieldUpdateOperationsInput | string
    notificationId?: StringFieldUpdateOperationsInput | string
    userId?: StringFieldUpdateOperationsInput | string
  }

  export type CommunityCreateManyCategoryInput = {
    id?: string
    name: string
    image?: string
    bannerImage?: string
    description?: string
  }

  export type CommunityUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    bannerImage?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    posts?: PostUpdateManyWithoutCommunityNestedInput
    members?: UserCommunityUpdateManyWithoutCommunityNestedInput
    favouriteBy?: FavouriteCommunityUpdateManyWithoutCommunityNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    bannerImage?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
    posts?: PostUncheckedUpdateManyWithoutCommunityNestedInput
    members?: UserCommunityUncheckedUpdateManyWithoutCommunityNestedInput
    favouriteBy?: FavouriteCommunityUncheckedUpdateManyWithoutCommunityNestedInput
    notificationCommunityNewMember?: NotificationCommunityNewMemberUncheckedUpdateManyWithoutCommunityNestedInput
  }

  export type CommunityUncheckedUpdateManyWithoutCategoryInput = {
    id?: StringFieldUpdateOperationsInput | string
    name?: StringFieldUpdateOperationsInput | string
    image?: StringFieldUpdateOperationsInput | string
    bannerImage?: StringFieldUpdateOperationsInput | string
    description?: StringFieldUpdateOperationsInput | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostCountOutputTypeDefaultArgs instead
     */
    export type PostCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PostCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentCountOutputTypeDefaultArgs instead
     */
    export type CommentCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagCountOutputTypeDefaultArgs instead
     */
    export type TagCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommunityCountOutputTypeDefaultArgs instead
     */
    export type CommunityCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommunityCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryCountOutputTypeDefaultArgs instead
     */
    export type CategoryCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ExampleDefaultArgs instead
     */
    export type ExampleArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ExampleDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AccountDefaultArgs instead
     */
    export type AccountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AccountDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SessionDefaultArgs instead
     */
    export type SessionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SessionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use VerificationTokenDefaultArgs instead
     */
    export type VerificationTokenArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = VerificationTokenDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostDefaultArgs instead
     */
    export type PostArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PostDefaultArgs<ExtArgs>
    /**
     * @deprecated Use MentionDefaultArgs instead
     */
    export type MentionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = MentionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationDefaultArgs instead
     */
    export type NotificationArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationMentionDefaultArgs instead
     */
    export type NotificationMentionArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationMentionDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationStartFollowDefaultArgs instead
     */
    export type NotificationStartFollowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationStartFollowDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationCommunityNewMemberDefaultArgs instead
     */
    export type NotificationCommunityNewMemberArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationCommunityNewMemberDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationPostCommentDefaultArgs instead
     */
    export type NotificationPostCommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationPostCommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use NotificationCommentReplyDefaultArgs instead
     */
    export type NotificationCommentReplyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = NotificationCommentReplyDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserShareDefaultArgs instead
     */
    export type UserShareArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserShareDefaultArgs<ExtArgs>
    /**
     * @deprecated Use ImageDefaultArgs instead
     */
    export type ImageArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = ImageDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentDefaultArgs instead
     */
    export type CommentArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostLikeDefaultArgs instead
     */
    export type PostLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PostLikeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommentLikeDefaultArgs instead
     */
    export type CommentLikeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommentLikeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use BookmarkDefaultArgs instead
     */
    export type BookmarkArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = BookmarkDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TagDefaultArgs instead
     */
    export type TagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use PostTagDefaultArgs instead
     */
    export type PostTagArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = PostTagDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CommunityDefaultArgs instead
     */
    export type CommunityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CommunityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FavouriteCommunityDefaultArgs instead
     */
    export type FavouriteCommunityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FavouriteCommunityDefaultArgs<ExtArgs>
    /**
     * @deprecated Use CategoryDefaultArgs instead
     */
    export type CategoryArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = CategoryDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserCommunityDefaultArgs instead
     */
    export type UserCommunityArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCommunityDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}