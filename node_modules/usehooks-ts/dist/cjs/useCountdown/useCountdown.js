"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const useBoolean_1 = require("../useBoolean");
const useCounter_1 = require("../useCounter");
const useInterval_1 = require("../useInterval");
function useCountdown(countdownOption) {
    let isDeprecated = false;
    let countStart, intervalMs, isIncrement, countStop;
    if ('seconds' in countdownOption) {
        console.warn('[useCountdown:DEPRECATED] new interface is already available (see https://usehooks-ts.com/react-hook/use-countdown), the old version will retire on usehooks-ts@3.');
        isDeprecated = true;
        countStart = countdownOption.seconds;
        intervalMs = countdownOption.interval;
        isIncrement = countdownOption.isIncrement;
    }
    else {
        ;
        ({ countStart, intervalMs, isIncrement, countStop } = countdownOption);
    }
    intervalMs = intervalMs ?? 1000;
    isIncrement = isIncrement ?? false;
    countStop = countStop ?? 0;
    const { count, increment, decrement, reset: resetCounter, } = (0, useCounter_1.useCounter)(countStart);
    const { value: isCountdownRunning, setTrue: startCountdown, setFalse: stopCountdown, } = (0, useBoolean_1.useBoolean)(false);
    const resetCountdown = () => {
        stopCountdown();
        resetCounter();
    };
    const countdownCallback = (0, react_1.useCallback)(() => {
        if (count === countStop) {
            stopCountdown();
            return;
        }
        if (isIncrement) {
            increment();
        }
        else {
            decrement();
        }
    }, [count, countStop, decrement, increment, isIncrement, stopCountdown]);
    (0, useInterval_1.useInterval)(countdownCallback, isCountdownRunning ? intervalMs : null);
    return isDeprecated
        ? [
            count,
            {
                start: startCountdown,
                stop: stopCountdown,
                reset: resetCountdown,
            },
        ]
        : [
            count,
            {
                startCountdown,
                stopCountdown,
                resetCountdown,
            },
        ];
}
exports.default = useCountdown;
//# sourceMappingURL=useCountdown.js.map