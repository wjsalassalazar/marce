"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const react_1 = require("react");
const useEventCallback_1 = require("../useEventCallback");
const useEventListener_1 = require("../useEventListener");
function useLocalStorage(key, initialValue) {
    const readValue = (0, react_1.useCallback)(() => {
        if (typeof window === 'undefined') {
            return initialValue;
        }
        try {
            const item = window.localStorage.getItem(key);
            return item ? parseJSON(item) : initialValue;
        }
        catch (error) {
            console.warn(`Error reading localStorage key “${key}”:`, error);
            return initialValue;
        }
    }, [initialValue, key]);
    const [storedValue, setStoredValue] = (0, react_1.useState)(readValue);
    const setValue = (0, useEventCallback_1.useEventCallback)(value => {
        if (typeof window == 'undefined') {
            console.warn(`Tried setting localStorage key “${key}” even though environment is not a client`);
        }
        try {
            const newValue = value instanceof Function ? value(storedValue) : value;
            window.localStorage.setItem(key, JSON.stringify(newValue));
            setStoredValue(newValue);
            window.dispatchEvent(new Event('local-storage'));
        }
        catch (error) {
            console.warn(`Error setting localStorage key “${key}”:`, error);
        }
    });
    (0, react_1.useEffect)(() => {
        setStoredValue(readValue());
    }, []);
    const handleStorageChange = (0, react_1.useCallback)((event) => {
        if (event?.key && event.key !== key) {
            return;
        }
        setStoredValue(readValue());
    }, [key, readValue]);
    (0, useEventListener_1.useEventListener)('storage', handleStorageChange);
    (0, useEventListener_1.useEventListener)('local-storage', handleStorageChange);
    return [storedValue, setValue];
}
exports.default = useLocalStorage;
function parseJSON(value) {
    try {
        return value === 'undefined' ? undefined : JSON.parse(value ?? '');
    }
    catch {
        console.log('parsing error on', { value });
        return undefined;
    }
}
//# sourceMappingURL=useLocalStorage.js.map